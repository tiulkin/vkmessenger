{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Utils"
    },
    "designerId": "30ad0619-7e9a-42ce-b4ba-0d1e5f05de66",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "uploadPhoto",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "controller.uploadOverlay=controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    centered:false,\r",
                    "    modal:false,\r",
                    "    width: '10px',\r",
                    "    height:'10px',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '10px',\r",
                    "            docked: 'bottom',\r",
                    "            itemId:'tmpPhoto',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            }\r",
                    "        }]\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "var a=Ext.ComponentQuery.query('#tmpPhoto')[0];\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.aaa=function(){\r",
                    "\r",
                    "    VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getChatUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token, chat_id:VKM.app.globals.chat.currentChatId},VKM.app.getController('DataLoader').uploadChatStep2,{});\r",
                    "}\r",
                    "a.setHtml('<form name =\"subscribe\" id=\"demo-form\" action=\"#\"> <input type = \"file\" onchange = \"VKM.app.globals.aaa()\" id = \"photoToUpload10\" name = \"photo\" accept= \"image\" / ></form>');\r",
                    "document.getElementById(\"photoToUpload10\").click();\r",
                    "//a.setHidden(true);\r",
                    ""
                ]
            },
            "designerId": "78d08f98-91b7-4841-a592-d84f415ecbbe"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "takePhoto",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "controller.uploadOverlay=controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    centered:false,\r",
                    "    modal:false,\r",
                    "    width: '10px',\r",
                    "    height:'10px',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '10px',\r",
                    "            docked: 'bottom',\r",
                    "            itemId:'tmpPhoto',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            }\r",
                    "        }]\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "var a=Ext.ComponentQuery.query('#tmpPhoto')[0];\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.aaa=function(){\r",
                    "\r",
                    "    VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getChatUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token, chat_id:VKM.app.globals.chat.currentChatId},VKM.app.getController('DataLoader').uploadChatStep2,{});\r",
                    "}\r",
                    "a.setHtml('<form name =\"subscribe\" id=\"demo-form\" action=\"#\"> <input type = \"file\"  capture=\"camera\" onchange = \"VKM.app.globals.aaa()\" id = \"photoToUpload10\" name = \"photo\" accept= \"image\" / ></form>');\r",
                    "document.getElementById(\"photoToUpload10\").click();\r",
                    "\r",
                    "\r",
                    "//a.setHidden(true);\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "4612c006-d5e3-4a0c-b167-b9de2ea82b75"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "searchfield[doFilter=true]",
                "designer|targetType": "Ext.field.Search",
                "fn": "onSearchfieldKeyup",
                "implHandler": [
                    "var value = textfield.getValue(),\r",
                    "    store = Ext.getStore(textfield.config.boundStore),\r",
                    "    fields = textfield.config.fields;\r",
                    "if (!fields)\r",
                    "{\r",
                    "    fields=['body'];\r",
                    "}\r",
                    "\r",
                    "\r",
                    "//first clear any current filters on the store. If there is a new value, then suppress the refresh event\r",
                    "if (!textfield.isFriends)\r",
                    "    {\r",
                    "        store.clearFilter(!!value)\r",
                    "        store.searchFilter=null;\r",
                    "    }\r",
                    "else\r",
                    "{\r",
                    "    store.clearFilter(!!value);\r",
                    "    store.searchFilter=null;\r",
                    "    if(this.getIsOnline().getChecked())\r",
                    "    {\r",
                    "        store.filter('online',1);\r",
                    "    }\r",
                    "}\r",
                    ";\r",
                    "\r",
                    "//check if a value is set first, as if it isnt we dont have to do anything\r",
                    "if (value) {\r",
                    "    //the user could have entered spaces, so we must split them so we can loop through them all\r",
                    "    var searches = value.split(','),\r",
                    "        regexps = [],\r",
                    "        i, regex;\r",
                    "\r",
                    "    //loop them all\r",
                    "    for (i = 0; i < searches.length; i++) {\r",
                    "        //if it is nothing, continue\r",
                    "        if (!searches[i]) continue;\r",
                    "\r",
                    "        regex = searches[i].trim();\r",
                    "        regex = regex.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r",
                    "\r",
                    "        //if found, create a new regular expression which is case insenstive\r",
                    "        regexps.push(new RegExp(regex.trim(), 'i'));\r",
                    "    }\r",
                    "\r",
                    "    //now filter the store by passing a method\r",
                    "    //the passed method will be called for each record in the store\r",
                    "    store.searchFilter=new Ext.util.Filter({\r",
                    "        filterFn: function(record) {\r",
                    "            var matched = [];\r",
                    "\r",
                    "            //loop through each of the regular expressions\r",
                    "            for (i = 0; i < regexps.length; i++) {\r",
                    "                var search = regexps[i];\r",
                    "                var fieldsToSearch='';\r",
                    "                for (var i=0;i<fields.length;i++)\r",
                    "                {\r",
                    "                    fieldsToSearch+=record.get(fields[i]);\r",
                    "                }\r",
                    "                var didMatch = search.test(fieldsToSearch);\r",
                    "\r",
                    "\r",
                    "                //if it matched the first or last name, push it into the matches array\r",
                    "                matched.push(didMatch);\r",
                    "            }\r",
                    "\r",
                    "            return (regexps.length && matched.indexOf(true) !== -1);\r",
                    "        }\r",
                    "    });\r",
                    "\r",
                    "    store.filter(store.searchFilter);\r",
                    "}"
                ],
                "name": "keyup"
            },
            "designerId": "56559198-e280-4b05-907e-56195c423543"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "searchfield[doFilter=true]",
                "designer|targetType": "Ext.field.Search",
                "fn": "ControllerAction25",
                "implHandler": [
                    "var value = textfield.getValue(),\r",
                    "    store = Ext.getStore(textfield.config.boundStore),\r",
                    "    fields = textfield.config.fields;\r",
                    "\r",
                    "//first clear any current filters on the store. If there is a new value, then suppress the refresh event\r",
                    "if (!textfield.isFriends)\r",
                    "    {\r",
                    "        store.clearFilter()\r",
                    "        store.searchFilter=null;\r",
                    "    }\r",
                    "else\r",
                    "{\r",
                    "    store.clearFilter();\r",
                    "    store.searchFilter=null;\r",
                    "    if(this.getIsOnline().getChecked())\r",
                    "    {\r",
                    "        store.filter('online',1);\r",
                    "    }\r",
                    "};\r",
                    ""
                ],
                "name": "clearicontap"
            },
            "designerId": "afe232ea-e1b1-4fad-ac89-1be3eda4f8dd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getTizenAddresses",
                "implHandler": [
                    "if(tizen)\r",
                    "{\r",
                    "    var addressbook;\r",
                    "\r",
                    "    // Define the error callback for all the asynchronous calls\r",
                    "    function errorCB(err) {\r",
                    "        console.log('The following error occurred: ' +  err.name);\r",
                    "    }\r",
                    "\r",
                    "    function contactsUpdatedCB() {\r",
                    "        console.log('Contacts were updated');\r",
                    "    }\r",
                    "\r",
                    "    function contactsFoundCB(contacts) {\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    // Get default address book.\r",
                    "    addressbook = tizen.contact.getDefaultAddressBook();\r",
                    "\r",
                    "    //var filter = new tizen.AttributeFilter('name.firstName', 'CONTAINS', 'Chris');\r",
                    "    try {\r",
                    "        addressbook.find(function(){\r",
                    "            var contacts=arguments[0];\r",
                    "            var contactsStore=Ext.getStore('PhoneContacts');\r",
                    "            var phonNumbersList='';\r",
                    "            var emailList='';\r",
                    "            for (var i=0;i<contacts.length;i++)\r",
                    "            {\r",
                    "                var contact=contactsStore.getById(contacts.id);\r",
                    "                for (var k=0;k<contacts[i].phoneNumbers.length;k++)\r",
                    "                {\r",
                    "\r",
                    "                    if(phonNumbersList!='')\r",
                    "                    {\r",
                    "                        phonNumbersList+=',';\r",
                    "                    }\r",
                    "\r",
                    "                    phonNumbersList+=contacts[i].phoneNumbers[k].number;\r",
                    "                }\r",
                    "                for (var k=0;k<contacts[i].emails.length;k++)\r",
                    "                {\r",
                    "                    emailList+=(emailList=='')?'':',';\r",
                    "                    emailList+=contacts[i].emails[k].email;\r",
                    "                }\r",
                    "                contactData={\r",
                    "                    id:contacts[i].id,\r",
                    "                    firstName:contacts[i].name.firstName,\r",
                    "                    middleName:contacts[i].name.middleName,\r",
                    "                    lastName:contacts[i].name.lastName,\r",
                    "                    phoneNumbers:contacts[i].phoneNumbers,\r",
                    "                    photoURI:contacts[i].photoURI,\r",
                    "                    emails:contacts[i].emails,\r",
                    "                    displayName:contacts[i].name.displayName,\r",
                    "                    lastUpdated:new Date(contacts[i].lastUpdated)\r",
                    "                }\r",
                    "                if(!contact)\r",
                    "                {\r",
                    "                    contact=new VKM.model.PhoneContact(contactData);\r",
                    "                    contactsStore.add(contact);\r",
                    "                    contact.save();\r",
                    "                }\r",
                    "                else\r",
                    "                {                    \r",
                    "                    contactData.vkId=contact.get('vkId');\r",
                    "                    contactsStore.add(contact);\r",
                    "                    contact.save;                    \r",
                    "\r",
                    "                }\r",
                    "            };\r",
                    "            //console.log(phonNumbersList);\r",
                    "            //console.log(emailList);\r",
                    "        }\r",
                    "                         , errorCB);\r",
                    "    } catch (err) {\r",
                    "        console.log('The following error occurred while finding: ' +  err.name);\r",
                    "    }\r",
                    "}"
                ]
            },
            "designerId": "22724515-2ba0-4a09-a440-f6077e90d1f5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "MyFunction72",
                "implHandler": [
                    "if(tizen)\r",
                    "{\r",
                    "    var addressbook;\r",
                    "\r",
                    "    // Define the error callback for all the asynchronous calls\r",
                    "    function errorCB(err) {\r",
                    "        console.log('The following error occurred: ' +  err.name);\r",
                    "    }\r",
                    "\r",
                    "    function contactsUpdatedCB() {\r",
                    "        console.log('Contacts were updated');\r",
                    "    }\r",
                    "\r",
                    "    function contactsFoundCB(contacts) {\r",
                    "        // The contact has been successfully found\r",
                    "        for(var i = 0; i < contacts.length; i++) {\r",
                    "            contacts[i].name.firstName = 'Christopher';\r",
                    "        }\r",
                    "        try {\r",
                    "            addressbook.updateBatch(contacts, contactsUpdatedCB, errorCB);\r",
                    "        } catch (err) {\r",
                    "            console.log('The following error occurred while updating: ' +  err.name);\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "    // Get default address book.\r",
                    "    //friends.getByPhones\r",
                    "    addressbook = tizen.contact.getDefaultAddressBook();\r",
                    "\r",
                    "    var filter = new tizen.AttributeFilter('name.firstName', 'CONTAINS', 'Chris');\r",
                    "    try {\r",
                    "        addressbook.find(contactsFoundCB, errorCB, filter);\r",
                    "    } catch (err) {\r",
                    "        console.log('The following error occurred while finding: ' +  err.name);\r",
                    "    }\r",
                    "}"
                ]
            },
            "designerId": "9496f459-6710-4d36-9746-334e04e4b198"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "isOnline",
                "selector": "checkboxfield#isOnline"
            },
            "designerId": "19fbe32c-f429-4b4c-ba77-18f64fb81ffe"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "chooseAlbumDialogue",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "\r",
                    "controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    items:[\r",
                    "        {xtype:'albumlist',controller:controller},\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '100%',\r",
                    "            docked: 'bottom',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatAttachConfirmButton',\r",
                    "                    handler: function(){\r",
                    "\r",
                    "                    },\r",
                    "                    ui: 'action',\r",
                    "                    hidden:true,\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'checkMark'\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatAttachCancelButton',\r",
                    "                    handler: function(){controller.overlay.destroy()},\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'delete'\r",
                    "                }\r",
                    "            ]\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    "dataController.loadAlbumsStep1();"
                ]
            },
            "designerId": "6adf16fa-6ad6-47ab-a498-51c052a49d73"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "closeTmpPanels",
                "implHandler": [
                    "var tmpPanels=Ext.ComponentQuery.query('tmpPanel');\r",
                    "for (var i=0;i<tmpPanels.length;i++)\r",
                    "{\r",
                    "    tmpPanels[i].destroy();\r",
                    "}"
                ]
            },
            "designerId": "e9ca856e-4b17-4ca3-b185-2b03b871978d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "[iconCls=viewDocument]",
                "designer|targetType": "Ext.Button",
                "fn": "onActionButtonTap",
                "implHandler": [
                    "var url=button.config.url;\r",
                    "var ext=button.config.ext;\r",
                    "if(url&&ext)\r",
                    "{\r",
                    "    console.log(url)\r",
                    "    VKM.app.showDocument(url,ext);\r",
                    "}"
                ],
                "name": "tap"
            },
            "designerId": "5da06c6f-f8bc-4c2b-a2a1-bdb898b825ee"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record"
                ],
                "fn": "changePhoto",
                "implHandler": [
                    "VKM.app.globals.chat.currentUserId"
                ]
            },
            "designerId": "0b7eac48-d127-4112-a314-1e4673a23a37"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "gmap",
                "implHandler": [
                    "var initialLocation;\r",
                    "var siberia = new google.maps.LatLng(60, 105);\r",
                    "var newyork = new google.maps.LatLng(40.69847032728747, -73.9514422416687);\r",
                    "var browserSupportFlag =  new Boolean();\r",
                    "\r",
                    "function initialize() {\r",
                    "  var myOptions = {\r",
                    "    zoom: 6,\r",
                    "    mapTypeId: google.maps.MapTypeId.ROADMAP\r",
                    "  };\r",
                    "  var map = new google.maps.Map(document.getElementById(\"map-canvas\"), myOptions);\r",
                    "\r",
                    "  // Try W3C Geolocation (Preferred)\r",
                    "  if(navigator.geolocation) {\r",
                    "    browserSupportFlag = true;\r",
                    "    navigator.geolocation.getCurrentPosition(function(position) {\r",
                    "      initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);\r",
                    "      map.setCenter(initialLocation);\r",
                    "    }, function() {\r",
                    "      handleNoGeolocation(browserSupportFlag);\r",
                    "    });\r",
                    "  }\r",
                    "  // Browser doesn't support Geolocation\r",
                    "  else {\r",
                    "    browserSupportFlag = false;\r",
                    "    handleNoGeolocation(browserSupportFlag);\r",
                    "  }\r",
                    "\r",
                    "  function handleNoGeolocation(errorFlag) {\r",
                    "    if (errorFlag == true) {\r",
                    "      alert(\"Geolocation service failed.\");\r",
                    "      initialLocation = newyork;\r",
                    "    } else {\r",
                    "      alert(\"Your browser doesn't support geolocation. We've placed you in Siberia.\");\r",
                    "      initialLocation = siberia;\r",
                    "    }\r",
                    "    map.setCenter(initialLocation);\r",
                    "  }\r",
                    "}"
                ]
            },
            "designerId": "0c98e926-f4bd-4aeb-bbe9-1a29a2d04ad6"
        }
    ]
}