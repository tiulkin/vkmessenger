{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "Dialogues",
        "views": [
            "PhotoItem"
        ]
    },
    "designerId": "4e20fff8-af67-44f0-b4c8-c9c8380931f3",
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dialoguesList",
                "selector": "dataview#dialoguesList"
            },
            "designerId": "8c3d3ff4-e6c1-4e54-bfa5-d46763488676"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "[itemId=dialoguesList]",
                "designer|targetType": "Ext.dataview.DataView",
                "fn": "onDialoguesListItemTap",
                "implHandler": [
                    "var controller=VKM.app.getController('InitDataLoader');\r",
                    "var dataController=VKM.app.getController('DataLoader');\r",
                    "var dialoguesController=VKM.app.getController('Dialogues');\r",
                    "var panel=Ext.ComponentQuery.query('#messagesTabPanel')[0];\r",
                    "// this.getMessagesPanel().getLayout().setAnimation(null);\r",
                    "// this.getDialoguesPanel().setHideAnimation({type:\"slideOut\",direction:\"up\"});\r",
                    "\r",
                    "this.currentDialogue=record.getData();\r",
                    "Ext.getStore('Chat').removeAll();\r",
                    "\r",
                    "//console.log(Ext.getStore('Chat'));\r",
                    "//Ext.getStore('Chat').currentPage=0;\r",
                    "Ext.getStore('Chat').currentPage=1;\r",
                    "VKM.app.globals.chat=\r",
                    "    {\r",
                    "    currentUserId:record.get('user_id'),\r",
                    "    currentChatId:record.get('chat_id'),\r",
                    "    messageIds:''\r",
                    "    \r",
                    "};\r",
                    "\r",
                    "panel.setActiveItem(3);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if (record.get('chat_id'))\r",
                    "{\r",
                    "    this.loadChatHeaderData(record.get('user_id'),record);\r",
                    "    controller.loadChatMessagesStep1(record.get('user_id'),record.get('chat_id'));\r",
                    "    \r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    this.loadChatHeaderData(record.get('user_id'));\r",
                    "    controller.loadChatMessagesStep1(record.get('user_id'));\r",
                    "}\r",
                    "\r",
                    "// }\r",
                    "// else\r",
                    "// {\r",
                    "//     var loadMore=Ext.getStore('AllMessages').getById(0);\r",
                    "//     Ext.getStore('AllMessages').remove(loadMore);\r",
                    "//     var offset=Ext.getStore('AllMessages').getCount()+1;\r",
                    "//     var controller=VKM.app.getController('InitDataLoader');\r",
                    "//     if(offset)\r",
                    "//     {\r",
                    "//         //VKM.app.globals['scrollToRecord']=index;\r",
                    "//         var activeItem = Ext.ComponentQuery.query(\"#dialoguesList\");\r",
                    "//         VKM.app.globals['scrollTo'] = activeItem[0].getScrollable().getScroller().getMaxPosition();\r",
                    "//         controller.loadMessagesStep1(offset,true);\r",
                    "//     }\r",
                    "\r",
                    "// }"
                ],
                "name": "itemtap"
            },
            "designerId": "22c5ab1c-5f1c-4c95-bcab-311723f0b08e"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "chatList",
                "selector": "dataview#chatList",
                "xtype": "messageslist"
            },
            "designerId": "918e217d-5692-4f8e-9261-a33b795aee0d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "[itemId=chatList]",
                "designer|targetType": "MessagesList",
                "fn": "onChatListItemTap",
                "implHandler": [
                    ""
                ],
                "name": "itemtap"
            },
            "designerId": "83de7868-14ff-4407-9de5-b4bf585ce974"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "chatControlPanel",
                "selector": "container#chatControlPanel"
            },
            "designerId": "8a6592af-8d91-41c4-b113-1f06dd040bc9"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "newMessageContainer",
                "selector": "container#newMessageContainer"
            },
            "designerId": "0cb24179-1f39-463a-9072-555075e2e5e2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#chatControlBackButton",
                "designer|targetType": "Ext.Button",
                "fn": "onBackButtonTap",
                "implHandler": [
                    "// this.getChatControlPanel().setHidden(true);\r",
                    "// this.getNewMessageContainer().setHidden(false);\r",
                    "\r",
                    "// var dataview=this.getChatList();\r",
                    "// dataview.inSelection=false;\r",
                    "\r",
                    "this.getChatControlPanel().setHidden(true);\r",
                    "this.getNewMessageContainer().setHidden(false);\r",
                    "this.getChatList().deselectAll();\r",
                    "VKM.app.globals['doNotScrollChat']=false;\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "4b7838c7-6563-469a-9520-b6a5a8163686"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "messagesPanel",
                "selector": "tabpanel#messagesTabPanel"
            },
            "designerId": "c6cfb62e-79c9-4ecf-b361-eed206f3319d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#backFromChatToListButton",
                "designer|targetType": "Ext.Button",
                "fn": "onBackToDialoguesButtonTap",
                "implHandler": [
                    "VKM.app.globals.chat=null;\r",
                    "this.getMessagesPanel().setActiveItem(0);\r",
                    "//this.getMessagesPanel().getLayout().setAnimation('slide');\r",
                    "//this.getDialoguesPanel().setHideAnimation(null);\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "02729eb0-1240-4481-9201-16cbca4dce31"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#chat",
                "designer|targetType": "Ext.Container",
                "fn": "onChatActivate",
                "implHandler": [
                    "this.getMessagesTabBar().hide();"
                ],
                "name": "activate"
            },
            "designerId": "fa4a6cdb-6072-40b0-b352-d9bfdba41bb5"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "messagesTabBar",
                "selector": "tabbar#messagesTabBar"
            },
            "designerId": "9b5c57a9-653e-4335-8f17-8e80ab51a0fb"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#dialogues",
                "designer|targetType": "Ext.Container",
                "fn": "onDialoguesActivate",
                "implHandler": [
                    "this.getMessagesTabBar().setHidden(false);"
                ],
                "name": "activate"
            },
            "designerId": "ab229556-f21c-4aee-91bc-94bad5b94b9f"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "myCheckbox",
                "selector": "checkboxfield#isSelected"
            },
            "designerId": "8956378b-3fd0-4480-b3a8-29355d032e08"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "chatControlReplyButton",
                "selector": "button#chatControlReplyButton"
            },
            "designerId": "135965e0-b854-47d3-9fa7-25f4686c8c90"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "chatControlDeleteButton",
                "selector": "button#chatControlDeleteButton"
            },
            "designerId": "9391fff0-3a4a-4e44-90b2-c33a8bfc3d78"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "userId",
                    "message"
                ],
                "fn": "loadChatHeaderData",
                "implHandler": [
                    "var user=Ext.getStore('Users').getById(userId);\r",
                    "if(!message)\r",
                    "{\r",
                    "    message=Ext.getStore('AllMessages').getById(userId);\r",
                    "}\r",
                    "\r",
                    "var title=Ext.String.ellipsis(user.get('first_name')+' '+user.get('last_name'),23);\r",
                    "var photo=user.get('photo_50');\r",
                    "\r",
                    "var isOnlineCls=\"\";\r",
                    "if (user.get('online'))\r",
                    "{\r",
                    "    isOnlineCls='class=\"userOnline\"';\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    isOnlineCls='class=\"userOffline\"';\r",
                    "}\r",
                    "\r",
                    "var chatHeader=this.getChatHeader();\r",
                    "\r",
                    "\r",
                    "\r",
                    "if (message&&message.get('chat_id'))\r",
                    "{\r",
                    "    chatHeader.down('#chatControlEditButton').setHidden(false);\r",
                    "    chatHeader.down('#chatControlEditButton').chatRecord=message;\r",
                    "    chatHeader.down('#deleteChatButton').setHidden(true);\r",
                    "\r",
                    "\r",
                    "    if(message.get('title'))\r",
                    "    {\r",
                    "        title=message.get('title');\r",
                    "    };\r",
                    "    if(message.get('photo_50'))\r",
                    "    {\r",
                    "        photo=message.get('photo_50');\r",
                    "    };\r",
                    "    isOnlineCls='class=\"userOffline\"';\r",
                    "    chatHeader.down('#name1').setHidden(true);\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    chatHeader.down('#chatControlEditButton').setHidden(true);\r",
                    "    chatHeader.down('#deleteChatButton').setHidden(false);\r",
                    "    chatHeader.down('#deleteChatButton').chatRecord=message;\r",
                    "//     if(user.get('status'))\r",
                    "//     {\r",
                    "//         chatHeader.down('#name1').setHtml('<i '+user.get('status')+'</i>'); \r",
                    "//     }\r",
                    "    if (user.get('last_seen'))\r",
                    "    {\r",
                    "        var last_seen=new Date(parseInt(user.get('last_seen').time)*1000);\r",
                    "        chatHeader.down('#name1').setHidden(false);\r",
                    "        chatHeader.down('#name1').setHtml(ux.locale.Manager.get('labels.lastvisit')+' '+moment(last_seen).fromNow());\r",
                    "        if(user.get('online'))\r",
                    "        {\r",
                    "            chatHeader.down('#name1').setHtml(ux.locale.Manager.get('labels.Online'));\r",
                    "        }\r",
                    "    }\r",
                    "    else\r",
                    "    {\r",
                    "        chatHeader.down('#name1').setHidden(false);\r",
                    "        chatHeader.down('#name1').setHtml(ux.locale.Manager.get('labels.Online'));\r",
                    "        if(user.get('online'))\r",
                    "        {\r",
                    "            chatHeader.down('#name1').setHtml(ux.locale.Manager.get('labels.Online'));            \r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "    \r",
                    "\r",
                    "    \r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "chatHeader.down('#avatar').setSrc(photo);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "chatHeader.down('#name').setHtml('<span '+isOnlineCls+'>'+title+'</span>'); //+isOnline);\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "f12c1556-aedf-4b34-b165-1846bc25771e"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "chatHeader",
                "selector": "container#chatHeader"
            },
            "designerId": "ce13ab9b-87ed-4a8a-9bb5-b3bb7f597bf9"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "newMessageText",
                "selector": "textareafield#newMessageText"
            },
            "designerId": "7050dc4c-fe93-402e-9734-7e4702ab4ddd"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#newMessageSendButton",
                "designer|targetType": "Ext.Button",
                "fn": "onSendMessageButtonTap",
                "implHandler": [
                    "var attachmentsStore=Ext.getStore('Attachments');\r",
                    "var attachmentsArray='';\r",
                    "var forwardArray='';\r",
                    "var text=document.getElementById('newMessageText')\r",
                    "var params={\r",
                    "    message:this.cleanMessageText(text),\r",
                    "    v:'5.3',\r",
                    "    access_token:VKM.app.globals.authData['access_token']\r",
                    "};\r",
                    "\r",
                    "if(this.currentDialogue.chat_id)\r",
                    "{\r",
                    "    params.chat_id=this.currentDialogue.chat_id;\r",
                    "    params.type=1;\r",
                    "    \r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    params.user_id=this.currentDialogue.user_id;\r",
                    "}\r",
                    "var lat='';\r",
                    "var lingitude='';\r",
                    "\r",
                    "if (attachmentsStore.getCount()>0)\r",
                    "{\r",
                    "    for (var i=0;i<attachmentsStore.getCount();i++)\r",
                    "    {\r",
                    "        if (attachmentsStore.getData().items[i].get('type')!='message')\r",
                    "        {\r",
                    "            \r",
                    "            if (attachmentsStore.getData().items[i].get('type')=='geo')\r",
                    "            {\r",
                    "                lat=attachmentsStore.getData().items[i].get('lat');\r",
                    "                lingitude=attachmentsStore.getData().items[i].get('long');\r",
                    "            }\r",
                    "            else\r",
                    "            {\r",
                    "                if (attachmentsArray!='')\r",
                    "                {\r",
                    "                    attachmentsArray+=',';\r",
                    "                };\r",
                    "                \r",
                    "                attachmentsArray+=attachmentsStore.getData().items[i].get('id');\r",
                    "            }\r",
                    "        }\r",
                    "        else\r",
                    "        {\r",
                    "            if (forwardArray!='')\r",
                    "            {\r",
                    "                forwardArray+=',';\r",
                    "            };\r",
                    "            \r",
                    "            forwardArray+=attachmentsStore.getData().items[i].get('id');\r",
                    "        }\r",
                    "        ;\r",
                    "    }\r",
                    "    params.attachment=attachmentsArray;\r",
                    "    params.forward_messages=forwardArray;\r",
                    "    if(lat!=''&&lingitude!='')\r",
                    "    {\r",
                    "        params.lat=lat;\r",
                    "        params['long']=lingitude;\r",
                    "    }\r",
                    "    \r",
                    "}\r",
                    "var url='https://api.vk.com/method/messages.send';\r",
                    "var dataController=VKM.app.getController('DataLoader');\r",
                    "if (attachmentsArray!=''||params.message!=''||forwardArray!=''||(lat!=''&&lingitude!=''))\r",
                    "{\r",
                    "    dataController.go(url,params);\r",
                    "    \r",
                    "    Ext.getStore('Attachments').removeAll();\r",
                    "    text.innerHTML=\"\";\r",
                    "    this.getAttachments().setHidden(true);\r",
                    "}"
                ],
                "name": "tap"
            },
            "designerId": "9ec92f7e-9734-40a1-ad83-a70e0afb6e9e"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainTabBar",
                "selector": "tabbar#mainTabBar"
            },
            "designerId": "a294b1d7-e0f4-4653-a015-58aaefe5c83d"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#newMessageText",
                "designer|params": [
                    "panel"
                ],
                "designer|targetType": "MyPanel",
                "fn": "onNewMessageTextFocus",
                "implHandler": [
                    "var controller=VKM.app.getController('InitDataLoader');\r",
                    "var dataController=VKM.app.getController('DataLoader');\r",
                    "\r",
                    "\r",
                    "var url='https://api.vk.com/method/account.setOnline';\r",
                    "//var url='https://api.vk.com/method/users.getFollowers';\r",
                    "//console.log(VKM.app.globals.authData.user_id);\r",
                    "var params=\r",
                    "    {\r",
                    "        v:'5.4',\r",
                    "        access_token:VKM.app.globals.authData['access_token']\r",
                    "    };\r",
                    "dataController.go(url,params);\r",
                    "\r",
                    "\r",
                    "var url='https://api.vk.com/method/messages.setActivity';\r",
                    "var params=\r",
                    "    {\r",
                    "        v:'5.4',\r",
                    "        uid:VKM.app.globals.chat.currentUserId,\r",
                    "        chat_id:VKM.app.globals.chat.currentChatId,\r",
                    "        access_token:VKM.app.globals.authData['access_token'],\r",
                    "        type:\"typing\"\r",
                    "    };\r",
                    "dataController.go(url,params);"
                ],
                "name": "focus"
            },
            "designerId": "af829c6d-642e-4510-8c23-d14ab4e100f9"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "checkMessagesInDialogueButton",
                "selector": "button#checkMessagesInDialogueButton"
            },
            "designerId": "9ce340b6-b0c5-4504-9d25-84175103139a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "textareafield#newMessageText",
                "designer|targetType": "Ext.field.TextArea",
                "fn": "onNewMessageTextBlur",
                "implHandler": [
                    "// textfield.setHeight(textfield.oldHeight);\r",
                    "// this.getCheckMessagesInDialogueButton().setHidden(false);\r",
                    "// this.getNewMessageSendButton().setHidden(true);\r",
                    "// this.getNewMessageAttachButton().setHidden(true);\r",
                    ""
                ],
                "name": "blur"
            },
            "designerId": "5db8665a-2568-4a0c-9e79-906cde8763ac"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "newMessageSendButton",
                "selector": "button#newMessageSendButton"
            },
            "designerId": "2131062c-d733-4799-bc50-9a01e91798b2"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "newMessageAttachButton",
                "selector": "button#newMessageAttachButton"
            },
            "designerId": "52ea94be-d161-4a61-9767-464e4214dbb5"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "newMessageCancelButton",
                "selector": "button#newMessageCancelButton"
            },
            "designerId": "860823c2-7003-467f-9ff5-84bfbfc5ab2e"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#newMessageAttachButton",
                "designer|targetType": "Ext.Button",
                "fn": "onNewMessageAttachButtonTap",
                "implHandler": [
                    "var controller=this;\r",
                    "var photo=ux.locale.Manager.get('labels.Photo');\r",
                    "var video=ux.locale.Manager.get('labels.Video');\r",
                    "var audio=ux.locale.Manager.get('labels.Audio');\r",
                    "var document=ux.locale.Manager.get('labels.Document');\r",
                    "var location=ux.locale.Manager.get('labels.Map');\r",
                    "var cancel=ux.locale.Manager.get('labels.Cancel');\r",
                    "\r",
                    "button.actions= Ext.create('Ext.ActionSheet', {\r",
                    "    items: [\r",
                    "        {\r",
                    "\r",
                    "            text: photo,\r",
                    "            ui: 'action',\r",
                    "            scope: button,\r",
                    "            iconCls:'photo',\r",
                    "            handler: function() {\r",
                    "                this.actions.hide();\r",
                    "                button.actions= Ext.create('Ext.ActionSheet', {\r",
                    "                    items: [\r",
                    "                        {\r",
                    "                            text: ux.locale.Manager.get('labels.chooseexistingphoto'),\r",
                    "                            ui: 'action',\r",
                    "                            scope: button,\r",
                    "                            //iconCls:'photo',\r",
                    "                            handler: function() {\r",
                    "                            this.actions.hide();\r",
                    "                            controller.chooseAlbumDialogue(controller);\r",
                    "\r",
                    "                            }\r",
                    "                        },\r",
                    "                        {\r",
                    "                            text: ux.locale.Manager.get('labels.takephoto'),\r",
                    "                            ui: 'action',\r",
                    "                            scope: button,\r",
                    "                            //iconCls:'photo',\r",
                    "                            handler: function() {\r",
                    "                                this.actions.hide();\r",
                    "                                controller.takePhoto(controller);\r",
                    "                            }\r",
                    "                        },\r",
                    "                        {\r",
                    "                            text: ux.locale.Manager.get('labels.uploadphoto'),\r",
                    "                            ui: 'action',\r",
                    "                            scope: button,\r",
                    "                            //iconCls:'photo',\r",
                    "                            handler: function() {\r",
                    "                                this.actions.hide();\r",
                    "                                controller.uploadPhoto(controller);\r",
                    "                            }\r",
                    "                        },\r",
                    "                        {\r",
                    "                            xtype: 'button',\r",
                    "                            text: cancel,\r",
                    "                            ui:'action',\r",
                    "                            iconCls:'delete',\r",
                    "                            scope: button,\r",
                    "                            handler: function() {\r",
                    "                                this.actions.hide();\r",
                    "                            }\r",
                    "                        }\r",
                    "                    ]\r",
                    "                });\r",
                    "                Ext.Viewport.add(button.actions);\r",
                    "                button.actions.show();\r",
                    "            }\r",
                    "        },\r",
                    "        {\r",
                    "            text: video,\r",
                    "            scope: button,\r",
                    "            ui:'action',\r",
                    "            iconCls:'video',\r",
                    "            handler: function() {\r",
                    "                this.actions.hide();\r",
                    "                controller.chooseVideoAlbumDialogue(controller);\r",
                    "            }\r",
                    "        },\r",
                    "        {\r",
                    "            text: audio,\r",
                    "            scope: button,\r",
                    "            ui:'action',\r",
                    "            iconCls:'music',\r",
                    "            handler: function() {\r",
                    "                this.actions.hide();\r",
                    "                button.actions= Ext.create('Ext.ActionSheet', {\r",
                    "                    items: [\r",
                    "                        {\r",
                    "                            text: ux.locale.Manager.get('labels.chooseexistingsound'),\r",
                    "                            ui: 'action',\r",
                    "                            scope: button,\r",
                    "                            //iconCls:'photo',\r",
                    "                            handler: function() {\r",
                    "                                this.actions.hide();\r",
                    "                                controller.chooseAudioDialogue(controller);\r",
                    "\r",
                    "                            }\r",
                    "                        },\r",
                    "//                         {\r",
                    "//                             text: ux.locale.Manager.get('labels.takesound'),\r",
                    "//                             ui: 'action',\r",
                    "//                             scope: button,\r",
                    "//                             //iconCls:'photo',\r",
                    "//                             handler: function() {\r",
                    "//                                 this.actions.hide();\r",
                    "//                                 controller.takeSound(controller);\r",
                    "//                             }\r",
                    "//                         },\r",
                    "                        {\r",
                    "                            text: ux.locale.Manager.get('labels.uploadsound'),\r",
                    "                            ui: 'action',\r",
                    "                            scope: button,\r",
                    "                            //iconCls:'photo',\r",
                    "                            handler: function() {\r",
                    "                                this.actions.hide();\r",
                    "                                controller.uploadSound(controller);\r",
                    "                            }\r",
                    "                        },\r",
                    "                        {\r",
                    "                            xtype: 'button',\r",
                    "                            text: cancel,\r",
                    "                            ui:'action',\r",
                    "                            iconCls:'delete',\r",
                    "                            scope: button,\r",
                    "                            handler: function() {\r",
                    "                                this.actions.hide();\r",
                    "                            }\r",
                    "                        }\r",
                    "                    ]\r",
                    "                });\r",
                    "                Ext.Viewport.add(button.actions);\r",
                    "                button.actions.show();\r",
                    "            }\r",
                    "        },\r",
                    "        {\r",
                    "            text: document,\r",
                    "            scope: button,\r",
                    "            ui:'action',\r",
                    "            iconCls:'document',\r",
                    "            handler: function() {\r",
                    "                this.actions.hide();\r",
                    "                button.actions= Ext.create('Ext.ActionSheet', {\r",
                    "                    items: [\r",
                    "                        {\r",
                    "                            text: ux.locale.Manager.get('labels.chooseexistingdoc'),\r",
                    "                            ui: 'action',\r",
                    "                            scope: button,\r",
                    "                            //iconCls:'photo',\r",
                    "                            handler: function() {\r",
                    "                                this.actions.hide();\r",
                    "                                controller.chooseDocumentsDialogue(controller);\r",
                    "\r",
                    "                            }\r",
                    "                        },\r",
                    "                        //                         {\r",
                    "                        //                             text: ux.locale.Manager.get('labels.takesound'),\r",
                    "                        //                             ui: 'action',\r",
                    "                        //                             scope: button,\r",
                    "                        //                             //iconCls:'photo',\r",
                    "                        //                             handler: function() {\r",
                    "                        //                                 this.actions.hide();\r",
                    "                        //                                 controller.takeSound(controller);\r",
                    "                        //                             }\r",
                    "                        //                         },\r",
                    "                        {\r",
                    "                            text: ux.locale.Manager.get('labels.uploaddoc'),\r",
                    "                            ui: 'action',\r",
                    "                            scope: button,\r",
                    "                            //iconCls:'photo',\r",
                    "                            handler: function() {\r",
                    "                                this.actions.hide();\r",
                    "                                controller.uploadDoc(controller);\r",
                    "                            }\r",
                    "                        },\r",
                    "                        {\r",
                    "                            xtype: 'button',\r",
                    "                            text: cancel,\r",
                    "                            ui:'action',\r",
                    "                            iconCls:'delete',\r",
                    "                            scope: button,\r",
                    "                            handler: function() {\r",
                    "                                this.actions.hide();\r",
                    "                            }\r",
                    "                        }\r",
                    "                    ]\r",
                    "                });\r",
                    "                Ext.Viewport.add(button.actions);\r",
                    "                button.actions.show();\r",
                    "            }\r",
                    "        },\r",
                    "        {\r",
                    "            text: location,\r",
                    "            scope: button,\r",
                    "            ui:'action',\r",
                    "            iconCls:'location',\r",
                    "            handler: function() {\r",
                    "                console.log(1234);\r",
                    "                //VKM.app.getCurrentLocation();\r",
                    "                controller.chooseMapDialogue(controller);\r",
                    "                \r",
                    "\r",
                    "                this.actions.hide();\r",
                    "            }\r",
                    "        },\r",
                    "        {\r",
                    "            xtype: 'button',\r",
                    "            text: cancel,\r",
                    "            ui:'action',\r",
                    "            iconCls:'delete',\r",
                    "            scope: button,\r",
                    "            handler: function() {\r",
                    "                this.actions.hide();\r",
                    "            }\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "    ]\r",
                    "});\r",
                    "Ext.Viewport.add(button.actions);\r",
                    "button.actions.show();\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "e2a2c236-4d70-4618-aff4-26735b76570c"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "attachments",
                "selector": "dataview#attachments"
            },
            "designerId": "dfac140b-ec6c-4b79-81be-4c90168bec6a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "takePhoto",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "controller.uploadOverlay=controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    centered:false,\r",
                    "    modal:false,\r",
                    "    width: '10px',\r",
                    "    height:'10px',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '10px',\r",
                    "            docked: 'bottom',\r",
                    "            itemId:'tmpPhoto',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            }\r",
                    "        }]\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "var a=Ext.ComponentQuery.query('#tmpPhoto')[0];\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.aaa=function(){\r",
                    "\r",
                    "    VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getMessagesUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadFileStep2,{});\r",
                    "}\r",
                    "a.setHtml('<form name =\"subscribe\" id=\"demo-form\" action=\"#\"> <input type = \"file\" capture=\"camera\" onchange = \"VKM.app.globals.aaa()\" id = \"photoToUpload1\" name = \"photo\" accept= \"image\" / ></form>');\r",
                    "document.getElementById(\"photoToUpload1\").click();\r",
                    "\r",
                    "\r",
                    "//a.setHidden(true);\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "19b424d4-60dd-472f-8c19-813e3b947f4c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "MyFunction135",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "controller.uploadOverlay=controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    centered:false,\r",
                    "    modal:false,\r",
                    "    width: '10px',\r",
                    "    height:'10px',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '10px',\r",
                    "            docked: 'bottom',\r",
                    "            itemId:'tmpPhoto',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            }\r",
                    "        }]\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "var a=Ext.ComponentQuery.query('#tmpPhoto')[0];\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.aaa=function(){\r",
                    "\r",
                    "    VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getMessagesUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadFileStep2,{});\r",
                    "}\r",
                    "a.setHtml('<form name =\"subscribe\" id=\"demo-form\" action=\"#\"> <input type = \"file\" capture=\"camera\" onchange = \"VKM.app.globals.aaa()\" id = \"photoToUpload1\" name = \"photo\" accept= \"image\" / ></form>');\r",
                    "document.getElementById(\"photoToUpload1\").click();\r",
                    "\r",
                    "\r",
                    "//a.setHidden(true);\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "f7727795-87e8-40fa-8bdd-d7dc63bda3e6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "takeSound",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "controller.uploadOverlay=controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    centered:false,\r",
                    "    modal:false,\r",
                    "    width: '10px',\r",
                    "    height:'10px',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '10px',\r",
                    "            docked: 'bottom',\r",
                    "            itemId:'tmpPhoto',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            }\r",
                    "        }]\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "var a=Ext.ComponentQuery.query('#tmpPhoto')[0];\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.aaa=function(){\r",
                    "\r",
                    "    VKM.app.getController('DataLoader').go('https://api.vk.com/method/audio.getUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadAuidoStep2,{});\r",
                    "}\r",
                    "a.setHtml('<form name =\"subscribe\" id=\"demo-form\" action=\"#\"> <input type = \"file\" capture=\"microphone\" onchange = \"VKM.app.globals.aaa()\" id = \"audioToUpload1\" name = \"file\" accept= \"audio/*;capture=microphone\" / ></form>');\r",
                    "document.getElementById(\"audioToUpload1\").click();\r",
                    "\r",
                    "\r",
                    "//a.setHidden(true);\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "e85be877-b6ec-4286-8ad6-cb093cb66b76"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "uploadPhoto",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "controller.uploadOverlay=controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    centered:false,\r",
                    "    modal:false,\r",
                    "    width: '10px',\r",
                    "    height:'10px',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '10px',\r",
                    "            docked: 'bottom',\r",
                    "            itemId:'tmpPhoto',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            }\r",
                    "        }]\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "var a=Ext.ComponentQuery.query('#tmpPhoto')[0];\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.aaa=function(){\r",
                    "\r",
                    "    VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getMessagesUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadFileStep2,{});\r",
                    "}\r",
                    "a.setHtml('<form name =\"subscribe\" id=\"demo-form\" action=\"#\"> <input onchange=\"javascript:alert(123);\" type=\"text\" name=\"name\" id=\"txt_name\" /> <input type = \"file\" onchange = \"VKM.app.globals.aaa()\" id = \"photoToUpload1\" name = \"photo\" accept= \"image\" / ></form>');\r",
                    "document.getElementById(\"photoToUpload1\").click();\r",
                    "//a.setHidden(true);"
                ]
            },
            "designerId": "a005cc8d-ce64-4569-a0a4-c3ca282ca599"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "uploadDoc",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "controller.uploadOverlay=controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    centered:false,\r",
                    "    modal:false,\r",
                    "    width: '10px',\r",
                    "    height:'10px',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '10px',\r",
                    "            docked: 'bottom',\r",
                    "            itemId:'tmpPhoto',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            }\r",
                    "        }]\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "var a=Ext.ComponentQuery.query('#tmpPhoto')[0];\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.aaa=function(){\r",
                    "\r",
                    "    VKM.app.getController('DataLoader').go('https://api.vk.com/method/docs.getUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadDocStep2,{});\r",
                    "}\r",
                    "a.setHtml('<form name =\"subscribe\" id=\"demo-form\" action=\"#\"> <input onchange=\"javascript:alert(123);\" type=\"text\" name=\"name\" id=\"txt_name\" /> <input type = \"file\" onchange = \"VKM.app.globals.aaa()\" id = \"docToUpload1\" name = \"file\"/ ></form>');\r",
                    "document.getElementById(\"docToUpload1\").click();\r",
                    "//a.setHidden(true);"
                ]
            },
            "designerId": "a4871861-7127-42d9-81db-14d42f4c12a9"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "uploadSound",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "controller.uploadOverlay=controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    centered:false,\r",
                    "    modal:false,\r",
                    "    width: '10px',\r",
                    "    height:'10px',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '10px',\r",
                    "            docked: 'bottom',\r",
                    "            itemId:'tmpPhoto',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            }\r",
                    "        }]\r",
                    "});\r",
                    "\r",
                    "\r",
                    "\r",
                    "var a=Ext.ComponentQuery.query('#tmpPhoto')[0];\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.aaa=function(){\r",
                    "\r",
                    "    VKM.app.getController('DataLoader').go('https://api.vk.com/method/audio.getUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadAuidoStep2,{});\r",
                    "}\r",
                    "a.setHtml('<form name =\"subscribe\" id=\"demo-form\" action=\"#\"> <input type = \"file\" onchange = \"VKM.app.globals.aaa()\" id = \"audioToUpload1\" name = \"file\" accept= \"audio\" / ></form>');\r",
                    "document.getElementById(\"audioToUpload1\").click();\r",
                    "\r",
                    "//a.setHidden(true);"
                ]
            },
            "designerId": "d97c539e-2319-4a10-9e72-c21146923cce"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "chooseAlbumDialogue",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "\r",
                    "controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    src:'Dialogues',\r",
                    "    items:[\r",
                    "        {xtype:'albumlist',controller:controller},\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '100%',\r",
                    "            docked: 'bottom',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatAttachConfirmButton',\r",
                    "                    handler: function(){\r",
                    "                        var imagesStore=Ext.getStore('Images');\r",
                    "                        var attachmentStore=Ext.getStore('Attachments');\r",
                    "                        var selection=controller.overlay.down(\"#photosList\").getSelection();\r",
                    "                        for (var i=0;i<selection.length;i++)\r",
                    "                        {\r",
                    "                            var attachment={\r",
                    "                                picture:selection[i].get('photo_130'),\r",
                    "                                name:'',\r",
                    "                                id:'photo'+selection[i].get('owner_id')+'_'+selection[i].get('id')\r",
                    "                            };\r",
                    "                            attachmentStore.add(attachment);\r",
                    "                        }\r",
                    "                        controller.overlay.destroy()\r",
                    "                    },\r",
                    "                    ui: 'action',\r",
                    "                    hidden:true,\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'checkMark'\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatAttachCancelButton',\r",
                    "                    handler: function(){controller.overlay.destroy()},\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'delete'\r",
                    "                }\r",
                    "            ]\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    "dataController.loadAlbumsStep1();"
                ]
            },
            "designerId": "7dd712ae-f4eb-408f-9c33-88c20b27284f"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "dataview#albumList",
                "designer|targetType": "Ext.dataview.DataView",
                "fn": "onAlbumListItemTap",
                "implHandler": [
                    "var controller=dataview.config.controller;\r",
                    "//\r",
                    "\r",
                    "var store=Ext.getStore('Images');\r",
                    "var url='https://api.vk.com/method/photos.get';\r",
                    "\r",
                    "var params=\r",
                    "    {\r",
                    "        v:'5.3',\r",
                    "        access_token:VKM.app.globals.authData['access_token'],\r",
                    "        album_id:record.get('id')\r",
                    "    };\r",
                    "store.getProxy().setUrl(url);\r",
                    "store.getProxy().setExtraParams(params);\r",
                    "store.removeAll();\r",
                    "store.currentPage=0;\r",
                    "store.load({\r",
                    "    callback:function(){\r",
                    "        var imageList=controller.overlay.add( {\r",
                    "            xtype: 'dataview',\r",
                    "            defaultType:'photoitem',\r",
                    "            //docked: 'top',\r",
                    "            height: \"100%\",\r",
                    "            hidden: false,\r",
                    "            itemId: 'photosList',\r",
                    "            width: '100%',\r",
                    "            //scrollable: 'vertical',\r",
                    "            selectedCls: 'selectedMask',\r",
                    "            deferEmptyText: false,\r",
                    "            emptyText: 'Вложений нет',\r",
                    "            useComponents:true,\r",
                    "            inline: { wrap: true },\r",
                    "            store: 'Images',\r",
                    "            plugins: [\r",
                    "                {\r",
                    "                    xclass: 'Ext.plugin.DataViewPaging',\r",
                    "                    autoPaging: true\r",
                    "                }\r",
                    "            ]\r",
                    "\r",
                    "        });\r",
                    "\r",
                    "        if(controller.overlay.config.src=='Dialogues')\r",
                    "        {\r",
                    "            controller.overlay.query('#chatAttachConfirmButton')[0].setHidden(false);\r",
                    "            imageList.setMode('MULTI');\r",
                    "            imageList.controller=controller;\r",
                    "\r",
                    "        }\r",
                    "        else\r",
                    "        {\r",
                    "            imageList.fireItemTap=true;\r",
                    "            imageList.controller=controller;\r",
                    "            controller.overlay.query('#chatAttachConfirmButton')[0].setHidden(true);\r",
                    "            imageList.setMode('SINGLE');            \r",
                    "        }\r",
                    "\r",
                    "    }\r",
                    "})\r",
                    "\r",
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "dataview.destroy();\r",
                    ""
                ],
                "name": "itemtap"
            },
            "designerId": "61834342-6f1f-415e-988a-041a2c168426"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "chooseVideoAlbumDialogue",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "\r",
                    "controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype:'list',\r",
                    "            store: 'Videos',\r",
                    "            mode: 'MULTI',\r",
                    "            itemId:'videoAttachmentsList',\r",
                    "            itemTpl:['<div class=\"img1\" style=\"vertival-align:bottom;background-image: url({photo_320});\">{title}</div>']\r",
                    "        },\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '100%',\r",
                    "            docked: 'bottom',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'confirmVideoAttachButton',\r",
                    "                    handler: function(){\r",
                    "                        var attachmentsList=Ext.ComponentQuery.query('#videoAttachmentsList')[0];\r",
                    "                        var attachments=attachmentsList.getSelection();\r",
                    "                        var attachmentStore=Ext.getStore('Attachments');\r",
                    "\r",
                    "                        for (var i=0;i<attachments.length;i++)\r",
                    "                        {\r",
                    "                            var attachment={\r",
                    "                                picture:attachments[i].get('photo_130'),\r",
                    "                                name:attachments[i].get('title'),\r",
                    "                                id:'video'+attachments[i].get('owner_id')+'_'+attachments[i].get('id')\r",
                    "                            };\r",
                    "                            attachmentStore.add(attachment);\r",
                    "                        }\r",
                    "                        controller.overlay.destroy()\r",
                    "                    },\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'checkMark'\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    handler: function(){controller.overlay.destroy()},\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'delete'\r",
                    "                }\r",
                    "            ]\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    "console.log(\"messagesStore\");\r",
                    "dataController.loadVideosStep1();"
                ]
            },
            "designerId": "b14501ee-7a4f-4df8-b39a-6bc61854ce40"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "chooseMapDialogue",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "\r",
                    "controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'mapchooser',\r",
                    "    itemId:'tmpPanel'\r",
                    "})\r",
                    "//     ,\r",
                    "//     items:[\r",
                    "//         {\r",
                    "//             xtype: 'component',\r",
                    "//             html:''\r",
                    "//         },\r",
                    "//         {\r",
                    "//             xtype: 'container',\r",
                    "//             width: '100%',\r",
                    "//             docked: 'bottom',\r",
                    "//             style: {\r",
                    "//                 'font-size': '1.2em'\r",
                    "//             },\r",
                    "//             ui: 'plain',\r",
                    "//             layout: {\r",
                    "//                 align: 'stretch',\r",
                    "//                 pack: 'center',\r",
                    "//                 type: 'hbox'\r",
                    "//             },\r",
                    "//             items: [\r",
                    "//                 {\r",
                    "//                     xtype: 'button',\r",
                    "//                     width: '30%',\r",
                    "//                     itemId: 'confirmVideoAttachButton',\r",
                    "//                     handler: function(){\r",
                    "//                         var attachmentsList=Ext.ComponentQuery.query('#videoAttachmentsList')[0];\r",
                    "//                         var attachments=attachmentsList.getSelection();\r",
                    "//                         var attachmentStore=Ext.getStore('Attachments');\r",
                    "\r",
                    "//                         for (var i=0;i<attachments.length;i++)\r",
                    "//                         {\r",
                    "//                             var attachment={\r",
                    "//                                 picture:attachments[i].get('photo_130'),\r",
                    "//                                 name:attachments[i].get('title'),\r",
                    "//                                 id:'video'+attachments[i].get('owner_id')+'_'+attachments[i].get('id')\r",
                    "//                             };\r",
                    "//                             attachmentStore.add(attachment);\r",
                    "//                         }\r",
                    "//                         controller.overlay.destroy()\r",
                    "//                     },\r",
                    "//                     ui: 'action',\r",
                    "//                     iconAlign: 'center',\r",
                    "//                     iconCls: 'checkMark'\r",
                    "//                 },\r",
                    "//                 {\r",
                    "//                     xtype: 'button',\r",
                    "//                     width: '30%',\r",
                    "//                     handler: function(){controller.overlay.destroy()},\r",
                    "//                     ui: 'action',\r",
                    "//                     iconAlign: 'center',\r",
                    "//                     iconCls: 'delete'\r",
                    "//                 }\r",
                    "//             ]\r",
                    "//         }\r",
                    "//     ]\r",
                    "// });\r",
                    ""
                ]
            },
            "designerId": "a7643b8e-98fb-4c3a-86fd-3600d4beada4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "chooseAudioDialogue",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "\r",
                    "controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    items:[\r",
                    "            {\r",
                    "                xtype: 'container',\r",
                    "                docked: 'top',\r",
                    "                layout: {\r",
                    "                    type: 'hbox'\r",
                    "                },\r",
                    "                items: [\r",
                    "                    {\r",
                    "                        xtype: 'searchfield',\r",
                    "                        boundStore: 'Audios',\r",
                    "                        doFilter: 'true',\r",
                    "                        fields: [\r",
                    "                            'title',\r",
                    "                            'artist'\r",
                    "                        ],\r",
                    "                        flex: 1,\r",
                    "                        itemId: 'searchAudios',\r",
                    "                        listeners: [\r",
                    "                            {\r",
                    "                                fn: function(element, eOpts) {\r",
                    "                                    this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));\r",
                    "                                },\r",
                    "                                event: 'painted'\r",
                    "                            }\r",
                    "                        ]\r",
                    "                    }\r",
                    "//                     {\r",
                    "//                         xtype: 'button',\r",
                    "//                         itemId: 'sortAsc',\r",
                    "//                         ui: 'action',\r",
                    "//                         iconCls: 'add'\r",
                    "//                     },\r",
                    "//                     {\r",
                    "//                         xtype: 'button',\r",
                    "//                         itemId: 'sortDesc',\r",
                    "//                         handler: function(button, e) {\r",
                    "//                         }\r",
                    "\r",
                    "//                     }\r",
                    "                ]\r",
                    "            },\r",
                    "        {\r",
                    "            xtype:'list',\r",
                    "            store: 'Audios',\r",
                    "            itemId:'audioAttachmentsList',\r",
                    "            mode: 'MULTI',\r",
                    "            pressedCls: 'x-item-selected',\r",
                    "            pressedDelay: 0,\r",
                    "            plugins: [\r",
                    "                {\r",
                    "                    autoPaging: true,\r",
                    "                    loadMoreText: ' ',\r",
                    "                    noMoreRecordsText: ' ',\r",
                    "                    type: 'listpaging'\r",
                    "                },\r",
                    "                {\r",
                    "                    scrollerAutoRefresh: true,\r",
                    "                    type: 'pullrefresh'\r",
                    "                }\r",
                    "            ],\r",
                    "\r",
                    "\r",
                    "            //})\r",
                    "            itemTpl:['<div class=\"i\" style=\"\">{artist},{title}</div>']\r",
                    "        },\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '100%',\r",
                    "            docked: 'bottom',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'confirmAudioAttachButton',\r",
                    "                    handler: function(){\r",
                    "                        var attachmentsList=Ext.ComponentQuery.query('#audioAttachmentsList')[0];\r",
                    "                        var attachments=attachmentsList.getSelection();\r",
                    "                        var attachmentStore=Ext.getStore('Attachments');\r",
                    "\r",
                    "                        for (var i=0;i<attachments.length;i++)\r",
                    "                        {\r",
                    "                            var attachment={\r",
                    "                                type:'audio',\r",
                    "                                name:attachments[i].get('artist')+','+attachments[i].get('title'),\r",
                    "                                id:'audio'+attachments[i].get('owner_id')+'_'+attachments[i].get('id')\r",
                    "                            };\r",
                    "                            attachmentStore.add(attachment);\r",
                    "                        }\r",
                    "                        controller.overlay.destroy()\r",
                    "                    },\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'checkMark'\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    handler: function(){controller.overlay.destroy()},\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'delete'\r",
                    "                }\r",
                    "            ]\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    "dataController.loadAudioStep1();"
                ]
            },
            "designerId": "3a517d16-7f68-480a-afce-d07a60b6d1fc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "chooseDocumentsDialogue",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "\r",
                    "controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            docked: 'top',\r",
                    "            layout: {\r",
                    "                type: 'hbox'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'searchfield',\r",
                    "                    boundStore: 'Docs',\r",
                    "                    doFilter: 'true',\r",
                    "                    fields: [\r",
                    "                        'title'\r",
                    "                    ],\r",
                    "                    flex: 1,\r",
                    "                    itemId: 'searchAudios',\r",
                    "                    listeners: [\r",
                    "                        {\r",
                    "                            fn: function(element, eOpts) {\r",
                    "                                this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));\r",
                    "                            },\r",
                    "                            event: 'painted'\r",
                    "                        }\r",
                    "                    ]\r",
                    "                }\r",
                    "                //                     {\r",
                    "                //                         xtype: 'button',\r",
                    "                //                         itemId: 'sortAsc',\r",
                    "                //                         ui: 'action',\r",
                    "                //                         iconCls: 'add'\r",
                    "                //                     },\r",
                    "                //                     {\r",
                    "                //                         xtype: 'button',\r",
                    "                //                         itemId: 'sortDesc',\r",
                    "                //                         handler: function(button, e) {                            \r",
                    "                //                         }\r",
                    "                \r",
                    "                //                     }\r",
                    "            ]\r",
                    "        },\r",
                    "        {\r",
                    "            xtype:'list',\r",
                    "            store: 'Docs',\r",
                    "            id:'docAttachmentsList',\r",
                    "            mode: 'MULTI',\r",
                    "            itemTpl:['<div class=\"i\" style=\"\">{title}({size})</div>'],\r",
                    "            pressedCls: 'x-item-selected',\r",
                    "            pressedDelay: 0,            \r",
                    "            plugins: [\r",
                    "                {\r",
                    "                    autoPaging: true,\r",
                    "                    loadMoreText: ' ',\r",
                    "                    noMoreRecordsText: ' ',\r",
                    "                    type: 'listpaging'\r",
                    "                },\r",
                    "                {\r",
                    "                    scrollerAutoRefresh: true,\r",
                    "                    type: 'pullrefresh'\r",
                    "                }\r",
                    "            ]\r",
                    "        },\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '100%',\r",
                    "            docked: 'bottom',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'confirmDocsAttachButton',\r",
                    "                    handler: function(){\r",
                    "                        var attachmentsList=Ext.ComponentQuery.query('#docAttachmentsList')[0];\r",
                    "                        var attachments=attachmentsList.getSelection();\r",
                    "                        var attachmentStore=Ext.getStore('Attachments');\r",
                    "\r",
                    "                        for (var i=0;i<attachments.length;i++)\r",
                    "                        {\r",
                    "                            var icon=\"resources/images/ext/128/\"+attachments[i].get('ext').toUpperCase()+'.jpg';\r",
                    "                            if (!VKM.app.globals.docIcons[attachments[i].get('ext').toUpperCase()])\r",
                    "                            {\r",
                    "                                icon=\"resources/images/ext/128/Default.jpg\";\r",
                    "                            }\r",
                    "                            \r",
                    "                            var attachment={\r",
                    "                                type:'doc',\r",
                    "                                name:attachments[i].get('title')+' ('+attachments[i].get('size')+')',\r",
                    "                                id:'doc'+attachments[i].get('owner_id')+'_'+attachments[i].get('id'),\r",
                    "                                icon:icon};\r",
                    "                            console.log(attachment);\r",
                    "                            attachmentStore.add(attachment);\r",
                    "                        }\r",
                    "                        controller.overlay.destroy()\r",
                    "\r",
                    "                    },\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'checkMark'\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    handler: function(){controller.overlay.destroy()},\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'delete'\r",
                    "                }\r",
                    "            ]\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    "dataController.loadDocsStep1();"
                ]
            },
            "designerId": "2ac6c66e-f216-420d-bfc1-c8d161fcbc19"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#newMessageCancelButton",
                "designer|targetType": "Ext.Button",
                "fn": "onNewMessageCancelButtonTap",
                "implHandler": [
                    "var text=document.getElementById('newMessageText')\r",
                    "Ext.getStore('Attachments').removeAll();\r",
                    "this.getAttachments().setHidden(true);\r",
                    "text.innerHTML=\"\";\r",
                    "\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "dfe32ba5-b759-49fc-ae7a-a30f88752064"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "controller"
                ],
                "fn": "chooseSmileDialogue",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "\r",
                    "controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    items:[\r",
                    "        {xtype:'emojiset'},\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '100%',\r",
                    "            docked: 'bottom',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatAttachConfirmButton',\r",
                    "                    handler: function(){\r",
                    "                        var imagesStore=Ext.getStore('Images');\r",
                    "                        var attachmentStore=Ext.getStore('Attachments');\r",
                    "\r",
                    "                        for (var i=0;i<imagesStore.getCount();i++)\r",
                    "                        {\r",
                    "                            if(imagesStore.getData().items[i].get('selected'))\r",
                    "                            {\r",
                    "                                var attachment={\r",
                    "                                    picture:imagesStore.getData().items[i].get('photo_130'),\r",
                    "                                    name:'',\r",
                    "                                    id:'photo'+imagesStore.getData().items[i].get('owner_id')+'_'+imagesStore.getData().items[i].get('id')\r",
                    "                                };\r",
                    "                                attachmentStore.add(attachment);\r",
                    "                            }\r",
                    "                        }\r",
                    "                        controller.overlay.destroy()\r",
                    "                    },\r",
                    "                    ui: 'action',\r",
                    "                    hidden:true,\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'checkMark'\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatAttachCancelButton',\r",
                    "                    handler: function(){controller.overlay.destroy()},\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'delete'\r",
                    "                }\r",
                    "            ]\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    "dataController.loadAlbumsStep1();"
                ]
            },
            "designerId": "342c5a85-d128-42a4-b0fb-0696421bd3e3"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "newMessageButtons",
                "selector": "container#newMessageButtons"
            },
            "designerId": "7ca23fe8-98f7-4dd8-bfc5-71016e987eec"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "chatControlStarButton",
                "selector": "button#chatControlStarButton"
            },
            "designerId": "152fb96f-3bb9-4e24-970f-1b93725aa4a7"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#chatControlDeleteButton",
                "designer|targetType": "Ext.Button",
                "fn": "onChatControlDeleteButtonTap",
                "implHandler": [
                    "var controller=VKM.app.getController('InitDataLoader');\r",
                    "var dataController=VKM.app.getController('DataLoader');\r",
                    "var url='https://api.vk.com/method/messages.delete';\r",
                    "var dialoguesController=this;\r",
                    "\r",
                    "var message_ids='';\r",
                    "\r",
                    "\r",
                    "var dataview=controller.getChatList();\r",
                    "var messageStore=Ext.getStore('Chat');\r",
                    "var messageStore1=Ext.getStore('InboxMessages');\r",
                    "\r",
                    "\r",
                    "var MB = Ext.MessageBox;\r",
                    "Ext.apply(MB, {\r",
                    "    YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },\r",
                    "    NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }\r",
                    "});\r",
                    "Ext.apply(MB, {\r",
                    "    YESNO: [MB.NO, MB.YES]\r",
                    "});\r",
                    "\r",
                    "Ext.Msg.confirm(ux.locale.Manager.get('labels.DeleteConfirm'), \"\", function(e){\r",
                    "    if(e == 'yes'){\r",
                    "        if(dataview.getSelection().length>0)\r",
                    "        {\r",
                    "            var selected=dataview.getSelection();\r",
                    "            for (var i=0;i<selected.length;i++)\r",
                    "            {\r",
                    "                var record=messageStore.getById(selected[i].get('id'));\r",
                    "                if (message_ids!='')\r",
                    "                {\r",
                    "                    message_ids+=',';\r",
                    "                };\r",
                    "                message_ids+=selected[i].get('id');            \r",
                    "                messageStore.remove(record);\r",
                    "                messageStore1.remove(record);\r",
                    "            };\r",
                    "            \r",
                    "            \r",
                    "            console.log(message_ids);\r",
                    "            if (message_ids!='')\r",
                    "            {\r",
                    "                var params=\r",
                    "                    {\r",
                    "                        v:'5.4',\r",
                    "                        access_token:VKM.app.globals.authData['access_token'],\r",
                    "                        message_ids:message_ids\r",
                    "                    };\r",
                    "                dataController.go(url,params);\r",
                    "            };\r",
                    "        }\r",
                    "        dataview.deselectAll();\r",
                    "        dialoguesController.checkedChatMessages=0;\r",
                    "        dialoguesController.getChatControlReplyButton().setBadgeText('');\r",
                    "        dialoguesController.getChatControlDeleteButton().setBadgeText('');\r",
                    "        dialoguesController.getChatControlReplyButton().setBadgeText(0);\r",
                    "        dialoguesController.getChatControlDeleteButton().setBadgeText(0);\r",
                    "        dialoguesController.getChatControlStarButton().setBadgeText(0);\r",
                    "\r",
                    "        dialoguesController.getChatControlPanel().setHidden(true);\r",
                    "        dialoguesController.getNewMessageContainer().setHidden(false);\r",
                    "    }\r",
                    "    \r",
                    "\r",
                    "});\r",
                    "\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "f577251c-eab4-45fe-b8f2-09ba96b163d5"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#chatControlReplyButton",
                "designer|targetType": "Ext.Button",
                "fn": "onChatControlReplyButtonTap",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "var controller=this;\r",
                    "controller.overlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            itemId: 'contactsForward',\r",
                    "            layout: {\r",
                    "                type: 'fit'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'searchfield',\r",
                    "                    boundStore: 'Friends',\r",
                    "                    doFilter: 'true',\r",
                    "                    fields: [\r",
                    "                        'first_name',\r",
                    "                        'last_name'\r",
                    "                    ],\r",
                    "                    docked: 'top',\r",
                    "                    itemId: 'searchAllContacts',\r",
                    "                    listeners: [\r",
                    "                        {\r",
                    "                            fn: function(element, eOpts) {\r",
                    "                                this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));\r",
                    "                            },\r",
                    "                            event: 'painted'\r",
                    "                        }\r",
                    "                    ]\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'list',\r",
                    "                    itemId: 'contactsForwardFriendsList',\r",
                    "                    defaultType: 'contactItem',\r",
                    "                    store: 'Friends',\r",
                    "                    mode:'MULTI',\r",
                    "                    grouped: true,\r",
                    "                    useSimpleItems: false,\r",
                    "                    indexBar: {\r",
                    "                        itemId: 'friendsIndex',\r",
                    "                        style: {\r",
                    "                            'font-size': '1.2em'\r",
                    "                        }\r",
                    "                    },\r",
                    "\r",
                    "                    plugins: [\r",
                    "                        {\r",
                    "                            autoPaging: true,\r",
                    "                            loadMoreText: ' ',\r",
                    "                            noMoreRecordsText: ' ',\r",
                    "                            type: 'listpaging'\r",
                    "                        },\r",
                    "                        {\r",
                    "                            type: 'pullrefresh'\r",
                    "                        }\r",
                    "                    ],\r",
                    "                    listeners: [\r",
                    "                        {\r",
                    "                            fn: function(element, eOpts) {\r",
                    "                                var store=Ext.getStore('Friends');\r",
                    "                                if(store.getCount()==0)\r",
                    "                                {\r",
                    "                                    var controller=VKM.app.getController('InitDataLoader');\r",
                    "                                    var dataController=VKM.app.getController('DataLoader');\r",
                    "                                    var url='https://api.vk.com/method/execute.friends';\r",
                    "\r",
                    "                                    var params=\r",
                    "                                        {\r",
                    "                                            v:'5.3',\r",
                    "                                            access_token:VKM.app.globals.authData['access_token'],\r",
                    "                                            rev:0\r",
                    "                                        };\r",
                    "\r",
                    "\r",
                    "                                    store.getProxy().setUrl(url);\r",
                    "                                    store.getProxy().setExtraParams(params);\r",
                    "                                    store.getProxy().setReader(\r",
                    "                                        Ext.create(\"ux.Friends\",\r",
                    "                                                   {\r",
                    "                                                       rootProperty: 'response.friends.items',\r",
                    "                                                       totalProperty: 'response.friends.count'\r",
                    "                                                   }\r",
                    "                                                  )\r",
                    "                                    )\r",
                    "                                    store.load({callback:function(request,success,response){\r",
                    "                                        VKM.app.globals.needRefresh['allFriendsList']=false;\r",
                    "                                    }});\r",
                    "\r",
                    "                                }\r",
                    "                            },\r",
                    "                            event: 'painted'\r",
                    "                        }\r",
                    "                    ]\r",
                    "                }\r",
                    "            ]\r",
                    "        },\r",
                    "\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '100%',\r",
                    "            docked: 'bottom',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatForwardConfirmButton',\r",
                    "                    handler: function(){\r",
                    "                        var message_ids='';\r",
                    "                        var attachments=[];\r",
                    "                        var dataview=controller.getChatList();\r",
                    "                        var messageStore=Ext.getStore('Chat');\r",
                    "                        for (var i=0;i<dataview.getSelection().length;i++)\r",
                    "                        {\r",
                    "                            var record=messageStore.getById(dataview.getSelection()[i].get('id'));\r",
                    "                            attachments.push({type:'message',id:record.get('id'),name:record.get('body')})\r",
                    "                        };\r",
                    "                        chatSelectors=Ext.ComponentQuery.query(\"#contactsForwardFriendsList\")[0].getSelection();\r",
                    "\r",
                    "                        var message_ids='';\r",
                    "                        if(chatSelectors.length==1)\r",
                    "                        {\r",
                    "                            controller.createMessage(chatSelectors[0].getData(),attachments);\r",
                    "                            controller.getChatControlPanel().setHidden(true);\r",
                    "                            controller.getNewMessageContainer().setHidden(false);\r",
                    "                            controller.overlay.destroy();\r",
                    "                        }\r",
                    "                        else\r",
                    "                        {\r",
                    "                            for (var i=0;i<chatSelectors.length;i++)\r",
                    "                            {\r",
                    "                                if (message_ids!='')\r",
                    "                                {\r",
                    "                                    message_ids+=',';\r",
                    "                                };\r",
                    "                                message_ids+=chatSelectors[i].getData()['id'];\r",
                    "                            };\r",
                    "                            var dataController=VKM.app.getController('DataLoader');\r",
                    "                            var url='https://api.vk.com/method/messages.createChat';\r",
                    "                            //var url='https://api.vk.com/method/users.getFollowers';\r",
                    "                            //console.log(VKM.app.globals.authData.user_id);\r",
                    "                            var params=\r",
                    "                                {\r",
                    "                                    v:'5.4',\r",
                    "                                    uids:message_ids,\r",
                    "                                    user_ids:message_ids,\r",
                    "                                    access_token:VKM.app.globals.authData['access_token']\r",
                    "                                };\r",
                    "                            controller.getChatControlPanel().setHidden(true);\r",
                    "                            controller.getNewMessageContainer().setHidden(false);\r",
                    "                            //VKM.app.globals['doNotScrollChat']=false;\r",
                    "                            if(attachments)\r",
                    "                            {\r",
                    "                                Ext.getStore('Attachments').add(attachments);\r",
                    "                            }\r",
                    "                            dataController.go(url,params,controller.openNewChatStep1,attachments);\r",
                    "                            controller.overlay.destroy();\r",
                    "                        }\r",
                    "                        dataview.deselectAll();\r",
                    "\r",
                    "                    },\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'checkMark'\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatForwardCancelButton',\r",
                    "                    handler: function(){controller.overlay.destroy()},\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'delete'\r",
                    "                }\r",
                    "            ]\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "f7b88ebf-3186-49b7-b0ae-24284963d679"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#online",
                "designer|targetType": "Ext.Container",
                "fn": "onOnlineActivate",
                "implHandler": [
                    "// this.getSearchAllContacts().setValue('');\r",
                    "// this.getSearchOnlineContacts().setValue('');\r",
                    "// Ext.getStore('Friends').clearFilter();\r",
                    "// Ext.getStore('Friends').filter('online',1);"
                ],
                "name": "activate"
            },
            "designerId": "8f462c06-f624-406c-9b3b-dfeada019a88"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "searchAllContacts",
                "selector": "searchfield#searchAllContacts"
            },
            "designerId": "367ac051-c13b-4c0a-9eb3-61fe24704926"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "searchOnlineContacts",
                "selector": "searchfield#searchOnlineContacts"
            },
            "designerId": "2b0e9aff-dc6a-4c34-bcb3-3c82ba687132"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "container#online",
                "designer|targetType": "Ext.Container",
                "fn": "onOnlineDeactivate",
                "implHandler": [
                    "// this.getSearchAllContacts().setValue('');\r",
                    "// this.getSearchOnlineContacts().setValue('');\r",
                    "// Ext.getStore('Friends').clearFilter();"
                ],
                "name": "deactivate"
            },
            "designerId": "75fd2a72-1cde-4d03-8199-06ab138fc308"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "user",
                    "forwardedMessages"
                ],
                "fn": "createMessage",
                "implHandler": [
                    "var controller=VKM.app.getController('InitDataLoader');\r",
                    "var dataController=VKM.app.getController('DataLoader');\r",
                    "var dialoguesController=VKM.app.getController('Dialogues');\r",
                    "var panel=Ext.ComponentQuery.query('#messagesTabPanel')[0];\r",
                    "var panel1=Ext.ComponentQuery.query('#mainTabBar')[0];\r",
                    "Ext.getStore('Chat').removeAll();\r",
                    "var user_id=user.id;\r",
                    "if(!Ext.getStore('Users').getById(user.id))\r",
                    "{\r",
                    "    Ext.getStore('Users').add(user);\r",
                    "\r",
                    "}\r",
                    "\r",
                    "VKM.app.globals.chat=\r",
                    "    {\r",
                    "    currentUserId:user_id,\r",
                    "    currentChatId:null\r",
                    "};\r",
                    "dialoguesController.currentDialogue={\r",
                    "    user_id:user_id,\r",
                    "    chat_id:null\r",
                    "};\r",
                    "\r",
                    "this.loadChatHeaderData(user_id);\r",
                    "setTimeout(panel1.items.items[0].fireEvent('tap',panel1.items.items[0]),1);\r",
                    "panel.setActiveItem(3);\r",
                    "if(forwardedMessages)\r",
                    "{\r",
                    "    Ext.getStore('Attachments').add(forwardedMessages);\r",
                    "}\r",
                    "controller.loadChatMessagesStep1(user_id);\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "fd9e11cd-7137-457b-abb1-62e37d80cec3"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#newChatButton",
                "designer|targetType": "Ext.Button",
                "fn": "onNewChatButtonTap",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "var controller=this;\r",
                    "controller.contactChooser=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    items:[\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            itemId: 'contactsNewChat',\r",
                    "            layout: {\r",
                    "                type: 'fit'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'searchfield',\r",
                    "                    boundStore: 'Friends',\r",
                    "                    doFilter: 'true',\r",
                    "                    fields: [\r",
                    "                        'first_name',\r",
                    "                        'last_name'\r",
                    "                    ],\r",
                    "                    docked: 'top',\r",
                    "                    itemId: 'searchAllContacts',\r",
                    "                    listeners: [\r",
                    "                        {\r",
                    "                            fn: function(element, eOpts) {\r",
                    "                                this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));\r",
                    "                            },\r",
                    "                            event: 'painted'\r",
                    "                        }\r",
                    "                    ]\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'list',\r",
                    "                    itemId: 'contactsToSendList',\r",
                    "                    defaultType: 'contactItem',\r",
                    "                    store: 'Friends',\r",
                    "                    mode:'MULTI',\r",
                    "                    grouped: true,\r",
                    "                    useSimpleItems: false,\r",
                    "                    indexBar: {\r",
                    "                        itemId: 'friendsIndex',\r",
                    "                        style: {\r",
                    "                            'font-size': '1.2em'\r",
                    "                        }\r",
                    "                    },                    \r",
                    "                    plugins: [\r",
                    "                        {\r",
                    "                            autoPaging: true,\r",
                    "                            loadMoreText: ' ',\r",
                    "                            noMoreRecordsText: ' ',\r",
                    "                            type: 'listpaging'\r",
                    "                        },\r",
                    "                        {\r",
                    "                            type: 'pullrefresh'\r",
                    "                        }\r",
                    "                    ],\r",
                    "                    listeners: [\r",
                    "                        {\r",
                    "                            fn: function(element, eOpts) {\r",
                    "                                var store=Ext.getStore('Friends');                                \r",
                    "                                if(store.getCount()==0)\r",
                    "                                {\r",
                    "                                    var controller=VKM.app.getController('InitDataLoader');\r",
                    "                                    var dataController=VKM.app.getController('DataLoader');\r",
                    "                                    var url='https://api.vk.com/method/execute.friends';\r",
                    "                                    \r",
                    "                                    var params=\r",
                    "                                        {\r",
                    "                                            v:'5.3',\r",
                    "                                            access_token:VKM.app.globals.authData['access_token'],\r",
                    "                                            rev:0\r",
                    "                                        };\r",
                    "                                    \r",
                    "                                    \r",
                    "                                    store.getProxy().setUrl(url);\r",
                    "                                    store.getProxy().setExtraParams(params);\r",
                    "                                    store.getProxy().setReader(\r",
                    "                                        Ext.create(\"ux.Friends\",\r",
                    "                                                   {\r",
                    "                                                       rootProperty: 'response.friends.items',\r",
                    "                                                       totalProperty: 'response.friends.count'\r",
                    "                                                   }\r",
                    "                                                  )\r",
                    "                                    )\r",
                    "                                    store.load({callback:function(request,success,response){\r",
                    "                                        VKM.app.globals.needRefresh['allFriendsList']=false;\r",
                    "                                    }});\r",
                    "                                    \r",
                    "                                }\r",
                    "                            },\r",
                    "                            event: 'painted'\r",
                    "                        }\r",
                    "                    ]                \r",
                    "                }\r",
                    "            ]\r",
                    "        },\r",
                    "\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '100%',\r",
                    "            docked: 'bottom',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatForwardConfirmButton',\r",
                    "                    handler: function(){\r",
                    "\r",
                    "                        chatSelectors=Ext.ComponentQuery.query(\"#contactsToSendList\")[0].getSelection();\r",
                    "\r",
                    "                        if(chatSelectors.length==1)\r",
                    "                        {\r",
                    "                            controller.createMessage(chatSelectors[0].getData());\r",
                    "                            controller.contactChooser.destroy();\r",
                    "                        }\r",
                    "                        else\r",
                    "                        {\r",
                    "                            var message_ids='';\r",
                    "                            for (var i=0;i<chatSelectors.length;i++)\r",
                    "                            {\r",
                    "                                if (message_ids!='')\r",
                    "                                {\r",
                    "                                    message_ids+=',';\r",
                    "                                };\r",
                    "                                message_ids+=chatSelectors[i].getData()['id'];\r",
                    "                            };\r",
                    "                            var dataController=VKM.app.getController('DataLoader');\r",
                    "                            var url='https://api.vk.com/method/messages.createChat';\r",
                    "                            //var url='https://api.vk.com/method/users.getFollowers';\r",
                    "                            //console.log(VKM.app.globals.authData.user_id);\r",
                    "                            var params=\r",
                    "                                {\r",
                    "                                    v:'5.4',\r",
                    "                                    uids:message_ids,\r",
                    "                                    user_ids:message_ids,\r",
                    "                                    access_token:VKM.app.globals.authData['access_token']\r",
                    "                                };\r",
                    "                            dataController.go(url,params,controller.openNewChatStep1);\r",
                    "                            controller.contactChooser.destroy();\r",
                    "                        }\r",
                    "\r",
                    "                    },\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'checkMark'\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatForwardCancelButton',\r",
                    "                    handler: function(){controller.contactChooser.destroy()},\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'delete'\r",
                    "                }\r",
                    "            ]\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "c0b8b542-81aa-42da-a92d-57e107570b80"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "response",
                    "message"
                ],
                "fn": "openNewChatStep1",
                "implHandler": [
                    "var controller=VKM.app.getController('Dialogues');\r",
                    "if(message.response)\r",
                    "{\r",
                    "    var dataController=VKM.app.getController('DataLoader');\r",
                    "    var url='https://api.vk.com/method/messages.getChat';\r",
                    "    var params=\r",
                    "        {\r",
                    "            v:'5.4',\r",
                    "            chat_id:message.response,\r",
                    "            access_token:VKM.app.globals.authData['access_token']\r",
                    "        };\r",
                    "    dataController.go(url,params,controller.openNewChatStep2);\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "7786b604-f092-4667-a7d5-181913e1c70d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "response",
                    "message"
                ],
                "fn": "openNewChatStep2",
                "implHandler": [
                    "var controller=VKM.app.getController('Dialogues');\r",
                    "if(message.response)\r",
                    "{\r",
                    "    var newMessage={\r",
                    "        did:message.response.id,\r",
                    "        chat_id:message.response.id,\r",
                    "        chat_active:[message.response.admin_id],\r",
                    "        title:message.response.title,\r",
                    "        body:'',\r",
                    "        user_id:message.response.admin_id,\r",
                    "        attachments:null,\r",
                    "        out:0,\r",
                    "        date:Ext.DateExtras.now()/1000\r",
                    "    }\r",
                    "    var newRecord=new VKM.model.Dialogues(newMessage);\r",
                    "    Ext.getStore('AllMessages').add(newRecord);\r",
                    "    Ext.getStore('Chat').removeAll();\r",
                    "    VKM.app.globals.chat=\r",
                    "        {\r",
                    "        currentUserId:null,\r",
                    "        currentChatId:message.response.id\r",
                    "    };\r",
                    "    controller.currentDialogue={\r",
                    "        user_id:null,\r",
                    "        chat_id:message.response.id\r",
                    "    };\r",
                    "    controller.loadChatHeaderData(message.response.admin_id,newRecord);\r",
                    "    var panel=Ext.ComponentQuery.query('#messagesTabPanel')[0];\r",
                    "    panel.setActiveItem(3);\r",
                    "}"
                ]
            },
            "designerId": "1c570527-625c-43c5-8140-a1fd247129c8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "response",
                    "message"
                ],
                "fn": "deleteMessages",
                "implHandler": [
                    "console.log(response);\r",
                    "Ext.getStore('Chat').removeAll();\r",
                    "\r",
                    "\r",
                    "// var controller=VKM.app.getController('Dialogues');\r",
                    "// if(message.response)\r",
                    "// {\r",
                    "//     var newMessage={\r",
                    "//         did:message.response.id,\r",
                    "//         chat_id:message.response.id,\r",
                    "//         chat_active:[message.response.admin_id],\r",
                    "//         title:message.response.title,\r",
                    "//         body:'',\r",
                    "//         user_id:message.response.admin_id,\r",
                    "//         attachments:null,\r",
                    "//         out:0,\r",
                    "//         date:Ext.DateExtras.now()\r",
                    "//     }\r",
                    "//     var newRecord=new VKM.model.Dialogues(newMessage);\r",
                    "//     Ext.getStore('AllMessages').add(newRecord);\r",
                    "//     Ext.getStore('Chat').removeAll();\r",
                    "//     VKM.app.globals.chat=\r",
                    "//         {\r",
                    "//         currentUserId:null,\r",
                    "//         currentChatId:message.response.id\r",
                    "//     };\r",
                    "//     controller.currentDialogue={\r",
                    "//         user_id:null,\r",
                    "//         chat_id:message.response.id\r",
                    "//     };\r",
                    "//     controller.loadChatHeaderData(message.response.admin_id,newRecord);\r",
                    "//     var panel=Ext.ComponentQuery.query('#messagesTabPanel')[0];\r",
                    "//     panel.setActiveItem(3);\r",
                    "// }"
                ]
            },
            "designerId": "59ce8122-46af-41f2-a130-7ff23cd50c00"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "response",
                    "message"
                ],
                "fn": "editChatStep1",
                "implHandler": [
                    "var controller=VKM.app.getController('Dialogues');\r",
                    "if(message.response)\r",
                    "{\r",
                    "\r",
                    "    var dataController=VKM.app.getController('InitDataLoader');\r",
                    "    var controller=VKM.app.getController('Dialogues');\r",
                    "    var chatId=message.response.id;\r",
                    "    var adminId=message.response.admin_id;\r",
                    "    controller.chatProperties=Ext.Viewport.add({\r",
                    "        xtype: 'popup1',\r",
                    "        items:[\r",
                    "            {\r",
                    "                xtype:'chatproperties',\r",
                    "                id:'chatProperties'\r",
                    "            }\r",
                    "        ]\r",
                    "    });\r",
                    "\r",
                    "    // var settingsStore=Ext.getStore('settings');\r",
                    "\r",
                    "    // var chatMessageSoundRecord=settingsStore.getById(chatId+'_messageSound');\r",
                    "    // var chatMessageSound=null;\r",
                    "    // if(chatMessageSoundRecord)\r",
                    "    // {\r",
                    "    //     chatMessageSound=chatMessageSoundRecord.get('value');\r",
                    "    // }\r",
                    "    // var chatVibrateToggleRecord=settingsStore.getById(chatId+'_messageVibrate');\r",
                    "    // var chatVibrateToggle=null;\r",
                    "    // if(chatVibrateToggleRecord)\r",
                    "    // {\r",
                    "    //     chatVibrateToggle=chatVibrateToggleRecord.get('value');\r",
                    "    // }\r",
                    "    // var chatNotificationBannerRecord=settingsStore.getById(chatId+'_messageVibrate');\r",
                    "    // var chatVibrateToggle=null;\r",
                    "    // if(chatVibrateToggleRecord)\r",
                    "    // {\r",
                    "    //     chatVibrateToggle=chatVibrateToggleRecord.get('value');\r",
                    "    // }\r",
                    "\r",
                    "\r",
                    "    var photo='resources/images/no_photo_group.png';\r",
                    "\r",
                    "    if(message.response.photo_200)\r",
                    "    {\r",
                    "        photo=message.response.photo_200;\r",
                    "    }\r",
                    "\r",
                    "\r",
                    "    var chatProperties=controller.chatProperties.down('#chatProperties');\r",
                    "\r",
                    "\r",
                    "    chatProperties.down('#chatProfilePhoto').setHtml('<img src=\"'+photo+'\"></img>');\r",
                    "    chatProperties.down('#nameSet').setTitle(ux.locale.Manager.get('labels.name'));\r",
                    "    chatProperties.down('#chatName').setValue(message.response.title);\r",
                    "    chatProperties.down('#chatName').oldValue=message.response.title;\r",
                    "    chatProperties.down('#chatName').chatId=chatId;\r",
                    "    // chatProperties.down('#newMessageSet').setTitle(ux.locale.Manager.get('labels.newMessage'));\r",
                    "    // chatProperties.down('#soundToggle').setLabel(ux.locale.Manager.get('labels.sound'));\r",
                    "    // chatProperties.down('#soundToggle').setValue(VKM.app.globals.settings.newMessageSound);\r",
                    "\r",
                    "    // chatProperties.down('#vibrateToggle').setLabel(ux.locale.Manager.get('labels.vibrate'));\r",
                    "    // chatProperties.down('#vibrateToggle').setValue(VKM.app.globals.settings.newMessageVibrate);\r",
                    "    // chatProperties.down('#noticeSelect').setLabel(ux.locale.Manager.get('labels.notification'));\r",
                    "\r",
                    "    chatProperties.down('#chatMembers').setTitle(ux.locale.Manager.get('labels.members'));\r",
                    "    console.log(VKM.app.globals.authData['user_id']);\r",
                    "    var membersSet=chatProperties.down('#chatMembers');\r",
                    "\r",
                    "    for (var i=0;i<message.response.users.length;i++)\r",
                    "    {\r",
                    "        var memberRecord=Ext.getStore('Users').getById(message.response.users[i]);\r",
                    "        var member=membersSet.add({xtype:'chatmembercontainer'});\r",
                    "\r",
                    "        if(VKM.app.globals.authData['user_id']==message.response.admin_id)\r",
                    "        {\r",
                    "            member.down('#deleteFromChatButton').setHidden(false);\r",
                    "        }\r",
                    "        else\r",
                    "        {\r",
                    "            member.down('#deleteFromChatButton').setHidden(true);\r",
                    "        }\r",
                    "\r",
                    "        member.down('#deleteFromChatButton').deleteData={\r",
                    "            chat_id:chatId,\r",
                    "            user_id:message.response.users[i],\r",
                    "            membersSet:membersSet,\r",
                    "            member:member\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "        if(message.response.users[i]==adminId)\r",
                    "        {\r",
                    "            member.down('#deleteFromChatButton').setHidden(true);\r",
                    "        }\r",
                    "\r",
                    "        member.down('#chatUserImage').setSrc(memberRecord.get('photo_50'));\r",
                    "        member.down('#chatUserName').setHtml(memberRecord.get('first_name')+' '+memberRecord.get('last_name'));\r",
                    "\r",
                    "\r",
                    "    }\r",
                    "\r",
                    "    var member=membersSet.add({xtype:'chatmembercontainer'});\r",
                    "//     member.down('#chatUserImage').setSrc('resources/images/group_list_icon_add_normal.png');\r",
                    "//     member.down('#chatUserName').setHtml(ux.locale.Manager.get('labels.addmember'));\r",
                    "//     member.down('#deleteFromChatButton').setHidden(true);\r",
                    "//     member.down('#chatUserImage').setStyle({width: '45px',height: '45px',border:'none','border-radius': ''});\r",
                    "\r",
                    "    member.down('#chatUserImage').setHidden(true);\r",
                    "    member.down('#chatUserName').setHidden(true);\r",
                    "    member.down('#deleteFromChatButton').setHidden(true);\r",
                    "    member.down('#newUserButton').setHidden(false);\r",
                    "    member.down('#newUserButton').setText(ux.locale.Manager.get('labels.addChatUser'));\r",
                    "    member.down('#newUserButton').chatId=chatId;\r",
                    "    member.down('#newUserButton').membersSet=membersSet;\r",
                    "    member.down('#newUserButton').member=member;\r",
                    "    member.down('#newUserButton').adminId=adminId;\r",
                    "    member.down('#newUserButton').users=message.response.users;\r",
                    "\r",
                    "\r",
                    "    controller.chatProperties.show();\r",
                    "\r",
                    "\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "4b603a41-72a0-4091-acc7-031e7b7eb1a0"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "dialoguesPanel",
                "selector": "container#dialogues"
            },
            "designerId": "c538868a-f2b3-4514-8501-e88a50efa6a2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#newMessageSmilesButton",
                "designer|targetType": "Ext.Button",
                "fn": "onAddSmileButtonTap",
                "implHandler": [
                    "var dataController=VKM.app.getController('InitDataLoader');\r",
                    "var controller=this;\r",
                    "controller.smilesOverlay=Ext.Viewport.add({\r",
                    "    xtype: 'popupchooser',\r",
                    "    hideAnimation: null,\r",
                    "    showAnimation:null,\r",
                    "    items:[\r",
                    "        {xtype:'emojiset'},\r",
                    "        {\r",
                    "            xtype: 'container',\r",
                    "            width: '100%',\r",
                    "            docked: 'bottom',\r",
                    "            style: {\r",
                    "                'font-size': '1.2em'\r",
                    "            },\r",
                    "            ui: 'plain',\r",
                    "            layout: {\r",
                    "                align: 'stretch',\r",
                    "                pack: 'center',\r",
                    "                type: 'hbox'\r",
                    "            },\r",
                    "            items: [\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatAddSmileButton',\r",
                    "                    handler: function(){\r",
                    "//                         var imagesStore=Ext.getStore('Images');\r",
                    "//                         var attachmentStore=Ext.getStore('Attachments');\r",
                    "\r",
                    "//                         for (var i=0;i<imagesStore.getCount();i++)\r",
                    "//                         {\r",
                    "//                             if(imagesStore.getData().items[i].get('selected'))\r",
                    "//                             {\r",
                    "//                                 var attachment={\r",
                    "//                                     picture:imagesStore.getData().items[i].get('photo_130'),\r",
                    "//                                     name:'',\r",
                    "//                                     id:'photo'+imagesStore.getData().items[i].get('owner_id')+'_'+imagesStore.getData().items[i].get('id')\r",
                    "//                                 };\r",
                    "//                                 attachmentStore.add(attachment);\r",
                    "//                             }\r",
                    "//                         }\r",
                    "                        controller.smilesOverlay.hide();\r",
                    "                    },\r",
                    "                    ui: 'action',\r",
                    "                    hidden:true,\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'checkMark'\r",
                    "                },\r",
                    "                {\r",
                    "                    xtype: 'button',\r",
                    "                    width: '30%',\r",
                    "                    itemId: 'chatAttachCancelButton',\r",
                    "                    handler: function(){controller.smilesOverlay.hide()},\r",
                    "                    ui: 'action',\r",
                    "                    iconAlign: 'center',\r",
                    "                    iconCls: 'delete'\r",
                    "                }\r",
                    "            ]\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    "\r",
                    "controller.smilesOverlay.show();"
                ],
                "name": "tap"
            },
            "designerId": "f2e77196-8dc9-4af4-9c29-81a4780e6202"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "dataview#mydataview5",
                "designer|targetType": "Ext.dataview.DataView",
                "fn": "onSmilesItemTap",
                "implHandler": [
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "//messageElement.innerHTML = messageElement.innerHTML + ;\r",
                    "//messageElement.insertImage()\r",
                    "\r",
                    "//\r",
                    "\r",
                    "setTimeout(\r",
                    "    function ()\r",
                    "    {\r",
                    "        VKM.app.restoreSelection();\r",
                    "        document.getElementById('newMessageText').focus();\r",
                    "        document.execCommand('insertHTML', false,'<image style=\"margin:0px 3px 0px 3px\" src=\"'+record.get('path16')+'\"\\>');\r",
                    "\r",
                    "    },1);\r",
                    "\r",
                    "//VKM.app.restoreSelection();\r",
                    "\r",
                    "this.smilesOverlay.hide();\r",
                    "\r",
                    "\r",
                    "//VKM.app.restoreCaretPos();\r",
                    ""
                ],
                "name": "itemtap"
            },
            "designerId": "3ffc2e9e-9fd9-406f-81fa-03765e9d3497"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "cont",
                    "opts"
                ],
                "fn": "cleanMessageText",
                "implHandler": [
                    "var trim=function(str){return str.replace(/^\\s+|\\s+$/g, '');};\r",
                    "\r",
                    "var controller=VKM.app.getController('Dialogues');\r",
                    "if (!cont) return '';\r",
                    "if (cont.tagName == 'TEXTAREA') return val(cont);\r",
                    "var el = cont.firstChild;\r",
                    "var v = '';\r",
                    "var contTag = new RegExp('^(DIV|P|LI|OL|TR|TD|BLOCKQUOTE)$');\r",
                    "while (el) {\r",
                    "    switch (el.nodeType) {\r",
                    "        case 3:\r",
                    "            var str = el.data.replace(/^\\n|\\n$/g, ' ').replace(/[\\n\\xa0]/g, ' ').replace(/[ ]+/g, ' ');\r",
                    "            v += str;\r",
                    "            break;\r",
                    "        case 1:\r",
                    "            var str = controller.cleanMessageText(el);\r",
                    "            if (el.tagName && el.tagName.match(contTag) && str) {\r",
                    "                if (str.substr(-1) != '\\n') {\r",
                    "                    str += '\\n';\r",
                    "                }\r",
                    "                \r",
                    "                var prev = el.previousSibling;\r",
                    "                while(prev && prev.nodeType == 3 && trim(prev.nodeValue) == '') {\r",
                    "                    prev = prev.previousSibling;\r",
                    "                }\r",
                    "                if (prev && !(prev.tagName && prev.tagName.match(contTag))) {\r",
                    "                    str = '\\n' + str;\r",
                    "                }\r",
                    "                \r",
                    "            } else if (el.tagName == 'IMG') {\r",
                    "                var code = controller.getCode(el);\r",
                    "                if (code) {                \r",
                    "                    str += controller.codeToChr(code);                    \r",
                    "                }\r",
                    "            } else if (el.tagName == 'BR') {\r",
                    "                str += '\\n';\r",
                    "            }\r",
                    "            v += str;\r",
                    "            break;\r",
                    "    }\r",
                    "    el = el.nextSibling;\r",
                    "}\r",
                    "return v;\r",
                    ""
                ]
            },
            "designerId": "b049b462-a169-4638-9203-d25762a5e0d5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "cont",
                    "opts"
                ],
                "fn": "editableVal",
                "implHandler": [
                    "var controller=VKM.app.getController('Dialogues');\r",
                    "if (!cont) return '';\r",
                    "if (cont.tagName == 'TEXTAREA') return val(cont);\r",
                    "var el = cont.firstChild;\r",
                    "var v = '';\r",
                    "var contTag = new RegExp('^(DIV|P|LI|OL|TR|TD|BLOCKQUOTE)$');\r",
                    "while (el) {\r",
                    "    switch (el.nodeType) {\r",
                    "        case 3:\r",
                    "            var str = el.data.replace(/^\\n|\\n$/g, ' ').replace(/[\\n\\xa0]/g, ' ').replace(/[ ]+/g, ' ');\r",
                    "            v += str;\r",
                    "            break;\r",
                    "        case 1:\r",
                    "            var str = controller.editableVal(el);\r",
                    "            if (el.tagName && el.tagName.match(contTag) && str) {\r",
                    "                if (str.substr(-1) != '\\n') {\r",
                    "                    str += '\\n';\r",
                    "                }\r",
                    "                \r",
                    "                var prev = el.previousSibling;\r",
                    "                while(prev && prev.nodeType == 3 && trim(prev.nodeValue) == '') {\r",
                    "                    prev = prev.previousSibling;\r",
                    "                }\r",
                    "                if (prev && !(prev.tagName && prev.tagName.match(contTag))) {\r",
                    "                    str = '\\n' + str;\r",
                    "                }\r",
                    "                \r",
                    "            } else if (el.tagName == 'IMG') {\r",
                    "                var code = controller.getCode(el);\r",
                    "                if (code) {                    \r",
                    "                    str += Emoji.codeToChr(code);                    \r",
                    "                }\r",
                    "            } else if (el.tagName == 'BR') {\r",
                    "                str += '\\n';\r",
                    "            }\r",
                    "            v += str;\r",
                    "            break;\r",
                    "    }\r",
                    "    el = el.nextSibling;\r",
                    "}\r",
                    "return v;"
                ]
            },
            "designerId": "1784d3e9-0f3f-4604-80ea-b0cba0f5c8cd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "code"
                ],
                "fn": "codeToChr",
                "implHandler": [
                    "var len = code.length / 4;\r",
                    "var chr = '';\r",
                    "var i = 0;\r",
                    "while(len--) {\r",
                    "    chr += String.fromCharCode(parseInt(code.substr(i, 4), 16))\r",
                    "    i += 4;\r",
                    "}\r",
                    "return chr;"
                ]
            },
            "designerId": "bcf738a6-b731-4aeb-9f95-32c8dbc4dbc0"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "obj"
                ],
                "fn": "getCode",
                "implHandler": [
                    "var code = false;\r",
                    "\r",
                    "var m = obj.src.match(/\\/([a-zA-Z0-9]+).png/);\r",
                    "if (m) {\r",
                    "    var code = m[1];\r",
                    "}\r",
                    "\r",
                    "return code;\r",
                    ""
                ]
            },
            "designerId": "84d4d7d3-ea84-4a30-a017-bfc20f48047c"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "list#chatList",
                "designer|targetType": "Ext.dataview.List",
                "fn": "onChatSelectionChange",
                "implHandler": [
                    "console.log(111);\r",
                    "var selection=selectable.getSelection();\r",
                    "var checked=selection.length;\r",
                    "this.getChatControlReplyButton().setBadgeText(checked);\r",
                    "this.getChatControlDeleteButton().setBadgeText(checked);\r",
                    "this.getChatControlStarButton().setBadgeText(checked);\r",
                    "if(checked>0)\r",
                    "{\r",
                    "    this.getChatControlPanel().setHidden(false);\r",
                    "    this.getNewMessageContainer().setHidden(true);\r",
                    "    VKM.app.globals['doNotScrollChat']=true;\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    //var dataview=this.getChatList();\r",
                    "    //dataview.inSelection=false;\r",
                    "    this.getChatControlPanel().setHidden(true);\r",
                    "    this.getNewMessageContainer().setHidden(false);\r",
                    "    VKM.app.globals['doNotScrollChat']=false;\r",
                    "}\r",
                    ";"
                ],
                "name": "selectionchange"
            },
            "designerId": "cea14ab7-fe37-4f43-b696-8a1433cf6777"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "readFilter",
                "selector": "button#unreadFilter"
            },
            "designerId": "f6d16a80-174c-4b03-95b4-9abfcdcd4043"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "segmentedbutton#sentFilter",
                "designer|targetType": "Ext.SegmentedButton",
                "fn": "onMysegmentedbutton1Toggle",
                "implHandler": [
                    "if (isPressed==true)\r",
                    "{\r",
                    "    var store=Ext.getStore('InboxMessages');\r",
                    "    var params=store.getProxy().getExtraParams();\r",
                    "    params[\"out\"]=button.config.out;\r",
                    "    if(button.config.out==1)\r",
                    "    {\r",
                    "        this.getReadFilter().setHidden(true);\r",
                    "    }\r",
                    "    else\r",
                    "    {\r",
                    "        this.getReadFilter().setHidden(false);\r",
                    "    }\r",
                    "    store.getProxy().setExtraParams(params);\r",
                    "    store.currentPage=1;\r",
                    "    store.load();\r",
                    "}"
                ],
                "name": "toggle"
            },
            "designerId": "97372933-680c-4c77-80cd-3f43bf005701"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "dataview[itemId=photosList]",
                "designer|targetType": "Ext.dataview.DataView",
                "fn": "onDataviewItemTap",
                "implHandler": [
                    "console.log(1);\r",
                    "if(dataview.fireItemTap)\r",
                    "{\r",
                    "    dataview.controller.changePhoto(record);\r",
                    "}"
                ],
                "name": "itemtap"
            },
            "designerId": "a3711935-5feb-4d9f-9b32-36968b7c6d3a"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "button#goToChat",
                "designer|targetType": "Ext.Button",
                "fn": "onGoToChatTap",
                "implHandler": [
                    "button.up('#oneMessage').destroy();\r",
                    "var controller=VKM.app.getController('InitDataLoader');\r",
                    "var dataController=VKM.app.getController('DataLoader');\r",
                    "var dialoguesController=VKM.app.getController('Dialogues');\r",
                    "var panel=Ext.ComponentQuery.query('#messagesTabPanel')[0];\r",
                    "var record=button.record;\r",
                    "this.currentDialogue=record.getData();\r",
                    "Ext.getStore('Chat').removeAll();\r",
                    "\r",
                    "//console.log(Ext.getStore('Chat'));\r",
                    "//Ext.getStore('Chat').currentPage=0;\r",
                    "Ext.getStore('Chat').currentPage=1;\r",
                    "VKM.app.globals.chat=\r",
                    "    {\r",
                    "    currentUserId:record.get('user_id'),\r",
                    "    currentChatId:record.get('chat_id'),\r",
                    "    messageIds:''\r",
                    "    \r",
                    "};\r",
                    "\r",
                    "panel.setActiveItem(3);\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "if (record.get('chat_id'))\r",
                    "{\r",
                    "    this.loadChatHeaderData(record.get('user_id'),record);\r",
                    "    controller.loadChatMessagesStep1(record.get('user_id'),record.get('chat_id'));\r",
                    "    \r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    this.loadChatHeaderData(record.get('user_id'));\r",
                    "    controller.loadChatMessagesStep1(record.get('user_id'));\r",
                    "}\r",
                    ""
                ],
                "name": "tap"
            },
            "designerId": "ae3daa6e-365a-4079-bbab-6111067346f5"
        }
    ]
}