{
    "type": "Ext.app.Application",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "controllers": [
            "Navigation",
            "Login",
            "InitDataLoader",
            "Utils",
            "DataLoader",
            "Dialogues",
            "Contacts",
            "Search"
        ],
        "models": [
            "User",
            "Message",
            "localConfig",
            "Dialogues",
            "UnreadMessage",
            "Albums",
            "Images",
            "Chat",
            "FilteredDialogues",
            "userSettings",
            "PhoneContact"
        ],
        "name": "VKM",
        "requires": [
            "ux.locale.Manager",
            "ux.locale.override.st.Button",
            "Ext.field.Search",
            "Ext.dataview.DataView",
            "Ext.DateExtras",
            "Ext.Img",
            "Ext.Audio",
            "Ext.Video",
            "Ext.field.TextArea",
            "ux.AudioPlayer",
            "Ext.Map",
            "Ext.util.Geolocation",
            "Ext.plugin.DataViewPaging",
            "Ext.slider.Slider",
            "Ext.dataview.List",
            "Ext.util.DelayedTask",
            "Ext.ActionSheet",
            "ux.touch.ImageGridList.view.List",
            "ux.touch.ImageGridList.view.ImageOuter",
            "ux.touch.ImageGridList.view.Image",
            "ux.touch.ImageGridList.view.Panel",
            "Ext.MessageBox",
            "Ext.form.FieldSet",
            "Ext.field.Toggle",
            "Ext.field.Select",
            "Ext.device.Camera",
            "Ext.field.File",
            "ux.Dialogues",
            "Ext.plugin.ListPagingReverse",
            "Ext.plugin.PullRefresh",
            "Ext.plugin.ListPaging",
            "ux.DialoguesSearch",
            "ux.FriendRequests",
            "ux.Friends",
            "ux.FriendsSuggestions"
        ],
        "stores": [
            "Config",
            "AllMessages",
            "Users",
            "Chat",
            "Friends",
            "MessagesSearchResult",
            "DialoguesSearchResult",
            "settings",
            "Albums",
            "Images",
            "Videos",
            "Audios",
            "Docs",
            "Attachments",
            "GlobalSearchFriends",
            "InboxMessages",
            "SentMessages",
            "UnreadMessages",
            "Emoji",
            "FriendRequests",
            "FriendSuggestions",
            "Cities",
            "Countries",
            "FilteredDialogues",
            "FriendsInCommon",
            "userSettings",
            "PhoneContacts"
        ],
        "views": [
            "MainView",
            "HtmlPanel",
            "FirstScreen",
            "ContactPanel",
            "NavMenu",
            "MainTabPanel",
            "MyPanel",
            "MessagesList",
            "MessageItem",
            "ChatItem",
            "ContactItem",
            "ContactsList",
            "PopUpChooser",
            "AlbumList",
            "AlbumItem",
            "VideoAttachmentsList",
            "ChatList",
            "ChatProperties",
            "PopUp1",
            "chatMemberContainer",
            "DialogueItem",
            "EmojiSet",
            "OneMessage",
            "Ext.ux.panel.PDF",
            "FriendItem",
            "PhotoItem",
            "FriendsInCommonItem",
            "ContactInfo",
            "PhoneContactItem",
            "MapChooser"
        ]
    },
    "designerId": "application",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "url"
                ],
                "fn": "getJsonFromUrl",
                "implHandler": [
                    "var query = url.substr(1);\r",
                    "var data = query.split(\"&\");\r",
                    "var result = {};\r",
                    "for(var i=0; i<data.length; i++) {\r",
                    "    var item = data[i].split(\"=\");\r",
                    "    result[item[0]] = item[1];\r",
                    "}\r",
                    "return result;\r",
                    ""
                ]
            },
            "designerId": "8632fab1-b6ff-4e82-a928-b14d35bd834a"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "launch",
                "implHandler": [
                    "Ext.Logger={};\r",
                    "Ext.Logger.error=function(a)\r",
                    "{\r",
                    "    console.log(a);\r",
                    "};\r",
                    "Ext.Logger.warn=function(a)\r",
                    "{\r",
                    "    console.log(a);\r",
                    "};\r",
                    "if(typeof tizen == \"undefined\")\r",
                    "{\r",
                    "    tizen=null;\r",
                    "}\r",
                    ";\r",
                    "Ext.fly('appLoadingIndicator').destroy();\r",
                    "Ext.getBody().removeCls('loading');\r",
                    "\r",
                    "\r",
                    "\r",
                    "document.addEventListener('tizenhwkey', function(e) {\r",
                    "\r",
                    "    if(e.keyName == \"back\"){\r",
                    "        var tmpPanels=Ext.ComponentQuery.query('#tmpPanel');\r",
                    "        if(tmpPanels.length>0)\r",
                    "        {\r",
                    "            for (var i=0;i<tmpPanels.length;i++)\r",
                    "            {\r",
                    "                tmpPanels[i].destroy();\r",
                    "            }\r",
                    "            return\r",
                    "        }\r",
                    "        if(VKM.app.globals.loginWindow&&VKM.app.globals.loginWindow!=undefined)\r",
                    "        {\r",
                    "            //VKM.app.globals.loginWindow.close();\r",
                    "            VKM.app.globals.loginWindow.close();\r",
                    "            VKM.app.globals.loginWindow=null;\r",
                    "        }\r",
                    "        else\r",
                    "        {\r",
                    "\r",
                    "\r",
                    "            var MB = Ext.MessageBox;\r",
                    "            Ext.apply(MB, {\r",
                    "                YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },\r",
                    "                NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }\r",
                    "            });\r",
                    "            Ext.apply(MB, {\r",
                    "                YESNO: [MB.NO, MB.YES]\r",
                    "            });\r",
                    "\r",
                    "            Ext.Msg.confirm(ux.locale.Manager.get('labels.exit'), \"\", function(e){\r",
                    "                if(e == 'yes'){\r",
                    "\r",
                    "                        tizen.application.getCurrentApplication().exit();\r",
                    "\r",
                    "                }\r",
                    "            })\r",
                    "\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "});\r",
                    "\r",
                    "this.globals={};\r",
                    "this.globals.staticWords={};\r",
                    "//this.emoji();\r",
                    "//var keys = Object.keys(VKM.app.globals.EMOJI_MAP);\r",
                    "// keys.sort(function (a, b) {\r",
                    "//     return b.length - a.length;\r",
                    "// });\r",
                    "//this.globals.emotionsRegexp = new RegExp('(' + keys.join('|') + ')', 'g');\r",
                    "this.globals.emotionsRegexp = /([\\uE000-\\uF8FF\\u270A-\\u2764\\u2122\\u25C0\\u25FB-\\u25FE\\u2615\\u263a\\u2648-\\u2653\\u2660-\\u2668\\u267B\\u267F\\u2693\\u261d\\u26A0-\\u26FA\\u2708]|\\uD83C[\\uDC00-\\uDFFF]|[\\u2600\\u26C4\\u26BE\\u23F3\\u2764]|\\uD83D[\\uDC00-\\uDFFF]|\\uD83C[\\uDDE8-\\uDDFA]\\uD83C[\\uDDEA-\\uDDFA]|[0-9]\\u20e3)/g,\r",
                    "//var pattern = String.fromCharCode(0xD83D,0xDE26) + '|' + String.fromCharCode(0xD83D,0xDE04) + '|' + String.fromCharCode(0x2600) + '|' + String.fromCharCode(0x2764) + '|' + String.fromCharCode(0x23F3) + '|' + String.fromCharCode(0x261D) + '|' + String.fromCharCode(0x26BD) + '|' + String.fromCharCode(0x26BE) + '|' + String.fromCharCode(0x26C4) + '|' + String.fromCharCode(0x26C5) + '|' + String.fromCharCode(0x270C) + '|' + String.fromCharCode(0xDF1F) + '|' + String.fromCharCode(0xD83C, 0xDF37) + '|' + String.fromCharCode(0xD83C, 0xDF38) + '|' + String.fromCharCode(0xD83C, 0xDF39) + '|' + String.fromCharCode(0xD83C, 0xDF3A) + '|' + String.fromCharCode(0xD83C, 0xDF3B) + '|' + String.fromCharCode(0xD83C, 0xDF3C) + '|' + String.fromCharCode(0xD83C, 0xDF3D) + '|' + String.fromCharCode(0xD83C, 0xDF45) + '|' + String.fromCharCode(0xD83C, 0xDF46) + '|' + String.fromCharCode(0xD83C, 0xDF49) + '|' + String.fromCharCode(0xD83C, 0xDF4A) + '|' + String.fromCharCode(0xD83C, 0xDF4B) + '|' + String.fromCharCode(0xD83C, 0xDF4C) + '|' + String.fromCharCode(0xD83C, 0xDF4D) + '|' + String.fromCharCode(0xD83C, 0xDF4E) + '|' + String.fromCharCode(0xD83C, 0xDF4F) + '|' + String.fromCharCode(0xD83C, 0xDF50) + '|' + String.fromCharCode(0xD83C, 0xDF51) + '|' + String.fromCharCode(0xD83C, 0xDF52) + '|' + String.fromCharCode(0xD83C, 0xDF53) + '|' + String.fromCharCode(0xD83C, 0xDF54) + '|' + String.fromCharCode(0xD83C, 0xDF55) + '|' + String.fromCharCode(0xD83C, 0xDF56) + '|' + String.fromCharCode(0xD83C, 0xDF57) + '|' + String.fromCharCode(0xD83C, 0xDF69) + '|' + String.fromCharCode(0xD83C, 0xDF6D) + '|' + String.fromCharCode(0xD83C, 0xDF7A) + '|' + String.fromCharCode(0xD83C, 0xDF7B) + '|' + String.fromCharCode(0xD83C, 0xDF81) + '|' + String.fromCharCode(0xD83C, 0xDF82) + '|' + String.fromCharCode(0xD83C, 0xDF83) + '|' + String.fromCharCode(0xD83C, 0xDF84) + '|' + String.fromCharCode(0xD83C, 0xDFAA) + '|' + String.fromCharCode(0xD83C, 0xDFB1) + '|' + String.fromCharCode(0xD83C, 0xDFB2) + '|' + String.fromCharCode(0xD83C, 0xDFB7) + '|' + String.fromCharCode(0xD83C, 0xDFB8) + '|' + String.fromCharCode(0xD83C, 0xDFBE) + '|' + String.fromCharCode(0xD83C, 0xDFC0) + '|' + String.fromCharCode(0xD83C, 0xDFC1) + '|' + String.fromCharCode(0xD83C, 0xDFC6) + '|' + String.fromCharCode(0xD83C, 0xDFE6) + '|' + String.fromCharCode(0xD83D, 0xDC00) + '|' + String.fromCharCode(0xD83D, 0xDC03) + '|' + String.fromCharCode(0xD83D, 0xDC05) + '|' + String.fromCharCode(0xD83D, 0xDC0C) + '|' + String.fromCharCode(0xD83D, 0xDC0E) + '|' + String.fromCharCode(0xD83D, 0xDC0F) + '|' + String.fromCharCode(0xD83D, 0xDC11) + '|' + String.fromCharCode(0xD83D, 0xDC13) + '|' + String.fromCharCode(0xD83D, 0xDC14) + '|' + String.fromCharCode(0xD83D, 0xDC18) + '|' + String.fromCharCode(0xD83D, 0xDC1B) + '|' + String.fromCharCode(0xD83D, 0xDC1C) + '|' + String.fromCharCode(0xD83D, 0xDC1D) + '|' + String.fromCharCode(0xD83D, 0xDC1F) + '|' + String.fromCharCode(0xD83D, 0xDC23) + '|' + String.fromCharCode(0xD83D, 0xDC24) + '|' + String.fromCharCode(0xD83D, 0xDC2A) + '|' + String.fromCharCode(0xD83D, 0xDC2B) + '|' + String.fromCharCode(0xD83D, 0xDC2C) + '|' + String.fromCharCode(0xD83D, 0xDC2D) + '|' + String.fromCharCode(0xD83D, 0xDC2E) + '|' + String.fromCharCode(0xD83D, 0xDC2F) + '|' + String.fromCharCode(0xD83D, 0xDC31) + '|' + String.fromCharCode(0xD83D, 0xDC36) + '|' + String.fromCharCode(0xD83D, 0xDC37) + '|' + String.fromCharCode(0xD83D, 0xDC3A) + '|' + String.fromCharCode(0xD83D, 0xDC3B) + '|' + String.fromCharCode(0xD83D, 0xDC3C) + '|' + String.fromCharCode(0xD83D, 0xDC3D) + '|' + String.fromCharCode(0xD83D, 0xDC40) + '|' + String.fromCharCode(0xD83D, 0xDC42) + '|' + String.fromCharCode(0xD83D, 0xDC43) + '|' + String.fromCharCode(0xD83D, 0xDC46) + '|' + String.fromCharCode(0xD83D, 0xDC47) + '|' + String.fromCharCode(0xD83D, 0xDC48) + '|' + String.fromCharCode(0xD83D, 0xDC4C) + '|' + String.fromCharCode(0xD83D, 0xDC4D) + '|' + String.fromCharCode(0xD83D, 0xDC4E) + '|' + String.fromCharCode(0xD83D, 0xDC51) + '|' + String.fromCharCode(0xD83D, 0xDC5C) + '|' + String.fromCharCode(0xD83D, 0xDC60) + '|' + String.fromCharCode(0xD83D, 0xDC7B) + '|' + String.fromCharCode(0xD83D, 0xDC94) + '|' + String.fromCharCode(0xD83D, 0xDCA1) + '|' + String.fromCharCode(0xD83D, 0xDCA3) + '|' + String.fromCharCode(0xD83D, 0xDCAA) + '|' + String.fromCharCode(0xD83D, 0xDCAC) + '|' + String.fromCharCode(0xD83D, 0xDCAD) + '|' + String.fromCharCode(0xD83D, 0xDD14) + '|' + String.fromCharCode(0xD83D, 0xDD25) + '|' + String.fromCharCode(0xD83D, 0xDE03) + '|' + String.fromCharCode(0xD83D, 0xDE06) + '|' + String.fromCharCode(0xD83D, 0xDE07) + '|' + String.fromCharCode(0xD83D, 0xDE08) + '|' + String.fromCharCode(0xD83D, 0xDE09) + '|' + String.fromCharCode(0xD83D, 0xDE0A) + '|' + String.fromCharCode(0xD83D, 0xDE0B) + '|' + String.fromCharCode(0xD83D, 0xDE0C) + '|' + String.fromCharCode(0xD83D, 0xDE0D) + '|' + String.fromCharCode(0xD83D, 0xDE0E) + '|' + String.fromCharCode(0xD83D, 0xDE0F) + '|' + String.fromCharCode(0xD83D, 0xDE10) + '|' + String.fromCharCode(0xD83D, 0xDE12) + '|' + String.fromCharCode(0xD83D, 0xDE14) + '|' + String.fromCharCode(0xD83D, 0xDE1A) + '|' + String.fromCharCode(0xD83D, 0xDE1C) + '|' + String.fromCharCode(0xD83D, 0xDE20) + '|' + String.fromCharCode(0xD83D, 0xDE21) + '|' + String.fromCharCode(0xD83D, 0xDE22) + '|' + String.fromCharCode(0xD83D, 0xDE28) + '|' + String.fromCharCode(0xD83D, 0xDE29) + '|' + String.fromCharCode(0xD83D, 0xDE2D) + '|' + String.fromCharCode(0xD83D, 0xDE30) + '|' + String.fromCharCode(0xD83D, 0xDE32) + '|' + String.fromCharCode(0xD83D, 0xDE33) + '|' + String.fromCharCode(0xD83D, 0xDE37);\r",
                    "//this.globals.emotionsRegexp = new RegExp(pattern,'g');\r",
                    "this.initLocales();\r",
                    "this.overrides();\r",
                    "\r",
                    "\r",
                    "var setingsStore=Ext.getStore('settings');\r",
                    "this.initParams();\r",
                    "this.globals.language=this.globals.settings.language;\r",
                    "if (!this.globals.language||this.globals.language=='autoDetect')\r",
                    "{\r",
                    "    this.globals.language=navigator.language ? navigator.language.split('-')[0] : navigator.userLanguage.split('-')[0];\r",
                    "};\r",
                    "//this.globals.language='en';\r",
                    "if(!this.globals.language||!(this.globals.language=='ru'||this.globals.language=='en'))\r",
                    "{\r",
                    "    this.globals.language='ru';\r",
                    "};\r",
                    "ux.locale.Manager.setConfig({\r",
                    "    ajaxConfig : {\r",
                    "        method : 'GET'\r",
                    "    },\r",
                    "    language   : VKM.app.globals.language,\r",
                    "    tpl        : 'locales/en.json',\r",
                    "    type       : 'ajax',\r",
                    "    localesArray      : VKM.app.globals.locales\r",
                    "});\r",
                    "ux.locale.Manager.init();\r",
                    "moment.lang(VKM.app.globals.language);\r",
                    "\r",
                    "VKM.app.globals.uploadFiles=[];\r",
                    "\r",
                    "this.globals.notificationAudio={};\r",
                    "for (var i=1;i<21;i++)\r",
                    "{\r",
                    "\r",
                    "    this.globals.notificationAudio[i] = Ext.create(\"Ext.Audio\",{\r",
                    "        xtype: 'audio',\r",
                    "        url  : 'resources/sounds/'+i+'.m4a',\r",
                    "        loop : false,\r",
                    "        enableControls: false\r",
                    "    });\r",
                    "}\r",
                    "\r",
                    "VKM.app.globals.lastTime=Ext.DateExtras.now();\r",
                    "this.initSelections();\r",
                    "Ext.getStore('Config').load();\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "4779e307-1009-4710-b98b-8a84aa0f5386"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "title",
                    "message",
                    "icon"
                ],
                "fn": "SimpleNotification",
                "implHandler": [
                    "console.log(title);\r",
                    "if(tizen)\r",
                    "try {\r",
                    "    console.log(message);\r",
                    "//     var appControl = new tizen.ApplicationService(\"http://tizen.org/appcontrol/operation/create_content\", null, \"image/jpg\", null);\r",
                    "//     this.notificationDict = {\r",
                    "//         content : message,\r",
                    "//         appControl : appControl\r",
                    "//     };\r",
                    "//     this.notification = new tizen.StatusNotification(\"SIMPLE\", title, this.notificationDict);\r",
                    "    var currentApp = tizen.application.getCurrentApplication();\r",
                    "    var iconPath=currentApp.appInfo.iconPath;\r",
                    "    console.log(iconPath);\r",
                    "\r",
                    "    var N = new tizen.StatusNotification(\"SIMPLE\", title,\r",
                    "                                         {\"content\": message,\"iconPath\":iconPath});\r",
                    "    tizen.notification.post(N);\r",
                    "    //setTimeout(function(){\r",
                    "        tizen.notification.remove(N.id)\r",
                    "    //},1000);\r",
                    "\r",
                    "} catch (err) {\r",
                    "    \r",
                    "     console.log(err.name + \": \" + err.message);\r",
                    "}"
                ]
            },
            "designerId": "7961deab-f5d7-4544-891b-a750f5bcb337"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "startApp",
                "implHandler": [
                    "VKM.app.SimpleNotification.prototype.displayNotification = function() {\r",
                    "\ttry {\r",
                    "\t\ttizen.notification.post(this.notification);\r",
                    "\t} catch (err) {\r",
                    "\t\ttizen.logger.error(err.name + \": \" + err.message);\r",
                    "\t};\r",
                    "};\r",
                    "\r",
                    "/**\r",
                    " * Updates the notification with a new message and displays it.\r",
                    " *\r",
                    " * @param message {String} notification will display this new message\r",
                    " */\r",
                    "VKM.app.SimpleNotification.prototype.updateNotificationMessage = function(message) {\r",
                    "\ttry {\r",
                    "\t\tthis.notification.content = message;\r",
                    "\t\ttizen.notification.update(this.notification);\r",
                    "\t} catch (err) {\r",
                    "\t\ttizen.logger.error(err.name + \": \" + err.message);\r",
                    "\t}\r",
                    "};\r",
                    "\r",
                    "\r",
                    "\r",
                    "var settingsStore=Ext.getStore('settings');\r",
                    "settingsStore.load();\r",
                    "VKM.app.overrides();\r",
                    "\r",
                    "VKM.app.globals.scrollToEndTask = Ext.create('Ext.util.DelayedTask',\r",
                    "     function() {\r",
                    "         activeItem=Ext.ComponentQuery.query(\"#chatList\")[0];\r",
                    "         if (!activeItem.doNotScroll)\r",
                    "         {\r",
                    "             var scroller = activeItem.getScrollable().getScroller();\r",
                    "             scroller.scrollToEnd();\r",
                    "         }\r",
                    "     }\r",
                    ");\r",
                    "\r",
                    "VKM.app.globals.setChatTyping = Ext.create('Ext.util.DelayedTask',\r",
                    "                                           function() {               \r",
                    "                                               var dataController=VKM.app.getController('DataLoader');\r",
                    "                                               var url='https://api.vk.com/method/messages.setActivity';\r",
                    "                                               if(VKM.app.globals.chat)\r",
                    "                                               {\r",
                    "                                                   var params=\r",
                    "                                                       {\r",
                    "                                                           v:'5.4',\r",
                    "                                                           uid:VKM.app.globals.chat.currentUserId,\r",
                    "                                                           chat_id:VKM.app.globals.chat.currentChatId,\r",
                    "                                                           access_token:VKM.app.globals.authData['access_token'],\r",
                    "                                                           type:\"typing\"\r",
                    "                                                       };\r",
                    "                                                   dataController.go(url,params);\r",
                    "                                               }\r",
                    "\r",
                    "     }\r",
                    ");\r",
                    "\r",
                    "if (!VKM.app.globals.authData)\r",
                    "{\r",
                    "    VKM.app.globals.authData={};\r",
                    "}\r",
                    "var value=settingsStore.getById('access_token');\r",
                    "if(value)\r",
                    "{\r",
                    "    VKM.app.globals.authData.access_token=value.get('value');\r",
                    "};\r",
                    "\r",
                    "value=settingsStore.getById('user_id');\r",
                    "if(value)\r",
                    "{\r",
                    "    VKM.app.globals.authData.user_id=value.get('value');\r",
                    "};\r",
                    "value=settingsStore.getById('expires_in');\r",
                    "if(value)\r",
                    "{\r",
                    "    VKM.app.globals.authData.expires_in=value.get('value');\r",
                    "};\r",
                    "value=settingsStore.getById('expiresTime');\r",
                    "if(value)\r",
                    "{\r",
                    "    VKM.app.globals.authData.expiresTime=value.get('value');\r",
                    "};\r",
                    "\r",
                    "// VKM.app.globals.authData={\r",
                    "// _id: \"authData\",\r",
                    "// access_token: \"c67a29c1650da9300a6a5fd735acb6c4d48768d04b1ca84800c1ef56b79d50702dec129b7efa498a9e8a8\",\r",
                    "// expiresTime: 1387448710671,\r",
                    "// expires_in: \"86400\",\r",
                    "// user_id: \"6831931\"\r",
                    "// }\r",
                    "\r",
                    "if (VKM.app.globals.authData.access_token&&VKM.app.globals.authData.expiresTime)\r",
                    "{\r",
                    "    var currTime=Ext.DateExtras.now();\r",
                    "    var expireTime=parseInt(VKM.app.globals.authData.expiresTime);\r",
                    "    if (currTime+100<expireTime)\r",
                    "    {\r",
                    "        VKM.app.getController('Login').go();\r",
                    "    }\r",
                    "    else\r",
                    "    {\r",
                    "        Ext.create('VKM.view.FirstScreen', {fullscreen: true});\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    Ext.create('VKM.view.FirstScreen', {fullscreen: true});\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "8eaf4e38-c1ff-492d-ba42-2207458bab34"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "messageBody",
                    "local"
                ],
                "fn": "smiles",
                "implHandler": [
                    "path='http://vk.com/images/emoji/';\r",
                    "if(local)\r",
                    "{\r",
                    "    path='resources/images/emoji16/';\r",
                    "}\r",
                    "//+(window.devicePixelRatio >= 2 ? '_2x' : '')+\r",
                    "var emojiRegEx= /([\\uE000-\\uF8FF\\u270A-\\u2764\\u2122\\u25C0\\u25FB-\\u25FE\\u2615\\u263a\\u2648-\\u2653\\u2660-\\u2668\\u267B\\u267F\\u2693\\u261d\\u26A0-\\u26FA\\u2708]|\\uD83C[\\uDC00-\\uDFFF]|[\\u2600\\u26C4\\u26BE\\u23F3\\u2764]|\\uD83D[\\uDC00-\\uDFFF]|\\uD83C[\\uDDE8-\\uDDFA]\\uD83C[\\uDDEA-\\uDDFA]|[0-9]\\u20e3)/g\r",
                    "var getEmojiHTML= function(code, symbol, enabled) {\r",
                    "      return '<img class=\"emoji\" '+(symbol ? 'alt=\"'+symbol+'\"' : symbol)+' src=\"'+path+code+'.png\" />';\r",
                    "\r",
                    "}\r",
                    "var emojiToHTML = function(str, replaceSymbols) {\r",
                    "\r",
                    "  str = str.replace(/&nbsp;/g, ' ').replace(/<br>/g, \"\\n\");\r",
                    "  var regs = {\r",
                    "    'D83DDE07': /(\\s|^)([0OО]:\\))([\\s\\.,]|$)/g,\r",
                    "    'D83DDE09': /(\\s|^)(;-\\)+)([\\s\\.,]|$)/g,\r",
                    "    'D83DDE06': /(\\s|^)([XХxх]-?D)([\\s\\.,]|$)/g,\r",
                    "    'D83DDE0E': /(\\s|^)(B-\\))([\\s\\.,]|$)/g,\r",
                    "    'D83DDE0C': /(\\s|^)(3-\\))([\\s\\.,]|$)/g,\r",
                    "    'D83DDE20': /(\\s|^)(&gt;\\()([\\s\\.,]|$)/g,\r",
                    "    'D83DDE30': /(\\s|^)(;[oоOО])([\\s\\.,]|$)/g,\r",
                    "    'D83DDE33': /(\\s|^)(8\\|)([\\s\\.,]|$)/g,\r",
                    "    'D83DDE32': /(\\s|^)(8-?[oоOО])([\\s\\.,]|$)/g,\r",
                    "    'D83DDE0D': /(\\s|^)(8-\\))([\\s\\.,]|$)/g,\r",
                    "    'D83DDE37': /(\\s|^)(:[XХ])([\\s\\.,]|$)/g,\r",
                    "    'D83DDE28': /(\\s|^)(:[oоOО])([\\s\\.,]|$)/g,\r",
                    "    '2764': /(\\s|^)(&lt;3)([\\s\\.,]|$)/g\r",
                    "  };\r",
                    "  for (var code in regs) {\r",
                    "    str = str.replace(regs[code], function(match, pre, smile, space) {\r",
                    "      return (pre || '') + getEmojiHTML(code)+(space || '');\r",
                    "    });\r",
                    "  }\r",
                    "  var regs = {\r",
                    "    'D83DDE0A': /(:-\\))([\\s\\.,]|$)/g,\r",
                    "    'D83DDE03': /(:-D)([\\s\\.,]|$)/g,\r",
                    "    'D83DDE1C': /(;-[PР])([\\s\\.,]|$)/g,\r",
                    "    'D83DDE0B': /(:-[pр])([\\s\\.,]|$)/g,\r",
                    "    'D83DDE12': /(:-\\()([\\s\\.,]|$)/g,\r",
                    "    'D83DDE0F': /(:-?\\])([\\s\\.,]|$)/g,\r",
                    "    'D83DDE14': /(3-?\\()([\\s\\.,]|$)/g,\r",
                    "    'D83DDE22': /(:&#039;\\()([\\s\\.,]|$)/g,\r",
                    "    'D83DDE2D': /(:_\\()([\\s\\.,]|$)/g,\r",
                    "    'D83DDE29': /(:\\(\\()([\\s\\.,]|$)/g,\r",
                    "    //'D83DDE15': /(:\\\\)([\\s\\.,]|$)/g,\r",
                    "    'D83DDE10': /(:\\|)([\\s\\.,]|$)/g,\r",
                    "    'D83DDE21': /(&gt;\\(\\()([\\s\\.,]|$)/g,\r",
                    "    'D83DDE1A': /(:-\\*)([\\s\\.,]|$)/g,\r",
                    "    'D83DDE08': /(\\}:\\))([\\s\\.,]|$)/g,\r",
                    "    'D83DDC4D': /(:like:)([\\s\\.,]|$)/g,\r",
                    "    'D83DDC4E': /(:dislike:)([\\s\\.,]|$)/g,\r",
                    "    '261D': /(:up:)([\\s\\.,]|$)/g,\r",
                    "    '270C': /(:v:)([\\s\\.,]|$)/g,\r",
                    "    'D83DDC4C': /(:ok:|:ок:)([\\s\\.,]|$)/g\r",
                    "  };\r",
                    "  for (var code in regs) {\r",
                    "    str = str.replace(regs[code], function(match, smile, space) {\r",
                    "      return getEmojiHTML(code)+(space || '');\r",
                    "    });\r",
                    "  }\r",
                    "\r",
                    "  str = str.replace(/\\n/g, '<br>');\r",
                    "  if (replaceSymbols) {\r",
                    "    str = str.replace(emojiRegEx, emojiReplace).replace(/\\uFE0F/g, '');\r",
                    "  }\r",
                    "\r",
                    "  return str;\r",
                    "}\r",
                    "var flagSymbol=null;\r",
                    "var emojiReplace= function(symbol) {\r",
                    "  var i = 0;\r",
                    "  var code = '', num;\r",
                    "  while(num = symbol.charCodeAt(i++)) {\r",
                    "    if (i == 2 && num == 8419) {\r",
                    "      code = '003'+symbol.charAt(0)+'20E3';\r",
                    "      break;\r",
                    "    }\r",
                    "    code += num.toString(16);\r",
                    "  }\r",
                    " if (symbol.match(/[\\uDDE7-\\uDDFA]/)) {\r",
                    "     if (flagSymbol)\r",
                    "     {\r",
                    "         code = flagSymbol + code;\r",
                    "         flagSymbol = false;\r",
                    "     }\r",
                    "     else\r",
                    "     {\r",
                    "         flagSymbol = code;\r",
                    "         return '';\r",
                    "     }\r",
                    " }\r",
                    "  code = code.toUpperCase();\r",
                    "  return getEmojiHTML(code, symbol, true);\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "var messageBody1=messageBody.replace(emojiRegEx, emojiReplace).replace(/\\uFE0F/g, '');\r",
                    "\r",
                    "//     var messageBody1=messageBody.replace(VKM.app.globals.emotionsRegexp,function(str)\r",
                    "//                                 {\r",
                    "//                                     var code=''\r",
                    "//                                     if (str.length==1)\r",
                    "//                                     {\r",
                    "//                                         code=str.charCodeAt(0).toString(16).toUpperCase();\r",
                    "//                                     }\r",
                    "//                                     else\r",
                    "//                                     {\r",
                    "//                                         code=str.charCodeAt(0).toString(16).toUpperCase()+str.charCodeAt(1).toString(16).toUpperCase();\r",
                    "//                                     }\r",
                    "//                                     return \"<img src='http://vk.com/images/emoji/\"+code+\".png'></img>\"\r",
                    "\r",
                    "//                                 }\r",
                    "//                                );\r",
                    "return messageBody1;\r",
                    ""
                ]
            },
            "designerId": "ca991ccf-b25f-4961-be48-47f29b6afd2d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initLocales",
                "implHandler": [
                    "VKM.app.globals.locales={};\r",
                    "VKM.app.globals.locales['ru']={\r",
                    "\t\"labels\":\r",
                    "\t{\r",
                    "        \"important\": \" Важные\",\r",
                    "\t\t\"notImportant\": \"\",\r",
                    "        \"lastvisit\":\"Последний визит\",\r",
                    "\t\t\"Login\": \"Войти через VK\",\r",
                    "        \"clearfilter\": \"Очистить фильтр?\",\r",
                    "\t\t\"Signup\": \"Зарегистрироваться\",\r",
                    "        \"uploaddoc\":\"Загрузить из телефона\",\r",
                    "        \"chooseexistingdoc\":\"Выбрать из библиотеки\",\r",
                    "        \"friendrecommended\":\"Возможные друзья\",\r",
                    "        \"friendrequests\":\" Заявки в друзья\",\r",
                    "\t\t\"youcanmessage\" : \"Вы сможете бесплатно обмениваться мгновенными сообщениями с друзьями\",\r",
                    "\t\t\"Messages\":\"Сообщения\",\r",
                    "\t\t\"Dialogues\":\"Диалоги\",\r",
                    "\t\t\"Inbox\":\"Входящие\",\r",
                    "\t\t\"Sent\":\"Отправленные\",\r",
                    "\t\t\"Search\":\"Поиск\",\r",
                    "\t\t\"Loadingmessages\":\"Сообщения загружаются..\",\r",
                    "\t\t\"Nomessagesyet\":\"Сообщений пока нет\",\r",
                    "\t\t\"Back\":\"Назад\",\r",
                    "\t\t\"Online\":\"Онлайн\",\r",
                    "\t\t\"writeamessage\":\"Написать сообщение\",\r",
                    "\t\t\"Send\":\"Отпр.\",\r",
                    "\t\t\"wasOn\":\"был в сети\",\r",
                    "\t\t\"ago\":\"назад\",\r",
                    "\t\t\"Uploading attachments\":\"Вложения загружаются..\",\r",
                    "\t\t\"Remove attachment\":\"Удалить вложение\",\r",
                    "\t\t\"Error uploading\":\"Ошибка загрузки\",\r",
                    "\t\t\"Message was not sent\":\"Сообщение не удалось отправить.\",\r",
                    "\t\t\"Try again\":\"Повторить попытку\",\r",
                    "\t\t\"Forward\":\"Переслать\",\r",
                    "\t\t\"Delete\":\"Удалить\",\r",
                    "        \"DeleteConfirm\":\"Подтверждение удаления\",\r",
                    "\t\t\"takephoto\":\"Сделать снимок с камеры\",\r",
                    "\t\t\"uploadphoto\":\"Загрузить из телефона\",\r",
                    "        \"chooseexistingphoto\":\"Выбрать фото из галереи\",\r",
                    "        \"takesound\":\"Записать с микрофона\",\r",
                    "\t\t\"uploadsound\":\"Загрузить из телефона\",\r",
                    "        \"chooseexistingsound\":\"Выбрать из библиотеки\",\r",
                    "        \"Loading\":\"Загрузка...\",\r",
                    "\t\t\"Share location\":\"Прикрепить местоположение\",\r",
                    "\t\t\"members\":\"Участники\",\r",
                    "        \"leavechat\":\"Покинуть беседу\",\r",
                    "\t\t\"Change chat\":\"Изменить название беседы\",\r",
                    "\t\t\"addChatUser\":\"Добавить собеседника\",\r",
                    "\t\t\"is typing...\":\"набирает сообщение...\",\r",
                    "\t\t\"Photo\":\"Фотография\",\r",
                    "\t\t\"Map\":\"Карта\",\r",
                    "\t\t\"Video\":\"Видеозапись\",\r",
                    "\t\t\"Audio\":\"Аудиозапись\",\r",
                    "\t\t\"Document\":\"Документ\",\r",
                    "\t\t\"Forwarded message\":\"Пересланное сообщение\",\r",
                    "\t\t\"Allfriends\":\"Друзья ВК\",\r",
                    "\t\t\"Online\":\"Онлайн\",\r",
                    "\t\t\"Contacts\":\"Контакты\",\r",
                    "\t\t\"Sync contacts\":\"Синхронизировать контакты\",\r",
                    "\t\t\"SyncWithFriends\":\"Вы можете синхронизировать список друзей VK с записной книжкой Вашего телефона\",\r",
                    "\t\t\"Call\":\"Позвонить на\",\r",
                    "\t\t\"Send a message\":\"Отправить сообщение\",\r",
                    "\t\t\"Send invitation\":\"Выслать приглашение\",\r",
                    "\t\t\"unregisteredYet\":\"Пользователь ещё не зарегистрирован. Вы можете отправить ему приглашение\",\r",
                    "\t\t\"Requests\":\"Заявки\",\r",
                    "\t\t\"Friend requests\":\"Заявки в друзья\",\r",
                    "\t\t\"People you may know\":\"Возможные друзья\",\r",
                    "\t\t\"SearchFriends\":\"Вы можете искать своих друзей и знакомых среди всех пользователей\",\r",
                    "\t\t\"Addfriend\":\"Добавить в друзья\",\r",
                    "\t\t\"Decline request\":\"Отклонить заявку\",\r",
                    "        \"Deleterequest\":\"Отклонить заявку\",\r",
                    "\t\t\"Deletefriend\":\"Удалить из друзей\",\r",
                    "\t\t\"Settings\":\"Настройки\",\r",
                    "\t\t\"Change photo\":\"Изменить фотографию\",\r",
                    "\t\t\"In-app notifications\":\"Оповещения в приложении\",\r",
                    "\t\t\"Vibrate\":\"Вибрация\",\r",
                    "\t\t\"Sound\":\"Звук\",\r",
                    "        \"Cancel\":\"Отмена\",\r",
                    "\t\t\"Banner\":\"Всплывающая строка\",\r",
                    "\t\t\"DisableSound\":\"Отключить звуковые уведомления на\",\r",
                    "        \"DeleteQ\":\"Удалить вложение?\",\r",
                    "        \"Yes\":\"Да\",\r",
                    "        \"No\":\"Нет\",\r",
                    "        \"compressInUpload\":\"Сжимать при загрузке\",\r",
                    "        \"photoUpload\":\"Обработка фотографий\",\r",
                    "        \"notshow\":\"Нет\",\r",
                    "        \"name\":\"Название\",\r",
                    "        \"logout\":\"Выход\",\r",
                    "        \"mutualFriends\":\"Общие друзья\",\r",
                    "        \"noMutualFriends\":\"Общих друзей нет\",\r",
                    "        'friendSubscribers':' Подписчики',\r",
                    "        \"loadmore\":\"загрузить ещё...\",\r",
                    "        \"needrestart\":\"Изменения вступят в силу при следующем запуске\",\r",
                    "        \"impossible\":\"К сожалению, текущая версия Tizen не можеть воспроизводить VK видео\",\r",
                    "        \"customProps\":\"Индивидуальные настройки\",\r",
                    "        \"newMessage\":'Новые сообщения',\r",
                    "        \"sound\":\"Звук\",\r",
                    "        \"banner\":\"Баннер\",\r",
                    "        \"vibrate\":\"Вибрация\",\r",
                    "        \"defaultLanguage\":\"Язык\",\r",
                    "        \"deletepersonalsettings\":\"Очистить персональные настройки\",\r",
                    "        \"pagesize\":\"Загружать за раз(строчек)\",\r",
                    "        \"dialogues_\":\"Диалоги\",\r",
                    "        \"chat_\":\"Чат\",\r",
                    "        \"messages_\":\"Сообщения\",\r",
                    "        \"friends_\":\"Друзья/запросы\",\r",
                    "        \"silenceMode\":\"Режим 'Не беспокоить'\",\r",
                    "        \"pdfViewer\":\"Просмотрщик PDF\",\r",
                    "        \"internal\":\"Встроенный\",\r",
                    "        \"none\":\"Нет\",\r",
                    "        \"google\":\"Google Docs Viewer\",\r",
                    "        \"diconnectVkId\":\"Удалить привязку\",\r",
                    "        \"connectVkId\":\"Связать с другом ВК\",\r",
                    "        \"friendsMode\":\"Режим показа друзей\",\r",
                    "        \"short\":\"Сжатый\",\r",
                    "        \"detailed\":\"Подробный\",\r",
                    "        \"chatselection\":\"Выделение в чате\",\r",
                    "        \"doubleClick\":\"Двойной щелчёк\",\r",
                    "        \"longClick\":\"Удержание\",\r",
                    "        \"clickMode\":\"Для выделения сообщений используется двойной тап. Это сообщение больше показано не будет.\",\r",
                    "        \"importContacts\":\"Синхронизировать контакты\",\r",
                    "        \"importContactsMessage\":\"Вы можете синхронизировать список друзей VK с записной книжкой Вашего телефона. Сделать это сейчас?\",\r",
                    "        \"notification\":\"Уведомление\",\r",
                    "        \"importContactsResult\":\"Список контактов отправлен. Результат будет виден при на вкладке 'Поиск друзей'\",\r",
                    "        \"done\":\"готово\",\r",
                    "        \"exit\":\"Выйти из программы?\",\r",
                    "        \"sendSMS\":\"Отправить СМС на \",\r",
                    "\t\t\"sendinvitation\":\"Выслать приглашение\",\r",
                    "        \"invitationText\":\" приглашает Вас присоединиться к социальной сети 'Вконтакте' на http://vk.com .\",\r",
                    "        \"invitationSubject\": \"Приглашение на vk.com\",\r",
                    "        'pullText':'Потяните для обновления...',\r",
                    "        'loadingText':'Загрузка...',\r",
                    "        'loadedText':'Loaded',\r",
                    "        'lastUpdatedText':'Последнее обновление:&nbsp;',\r",
                    "        'releaseText':'Отпустите для обновления...',\r",
                    "\r",
                    "        'messagelooks':'Вот как это выглядит',\r",
                    "\t\t\"unregisteredYet\":\"Пользователь ещё не зарегистрирован. Вы можете отправить ему приглашение.\",\r",
                    "        \"DeleteSettingsConfirm\":\"Индивидуальные настройки уведомлений для друзей и диалогов будут удалены и заменены на настройки по-умолчанию\",\r",
                    "        \"DeleteMessagesConfirm\":\"Вы действительно хотите очистить историю сообщений? Отменить это действие будет невозможно\"\r",
                    "\r",
                    "\r",
                    "\t},\r",
                    "    \"languages\":{\r",
                    "        \"russian\":\"Русский\",\r",
                    "        \"english\":\"English\",\r",
                    "        \"autoDetect\":\"Автоопределение\"\r",
                    "    },\r",
                    "    \"months\" : {\r",
                    "        \"1\"  : \"Январь\",\r",
                    "        \"2\"  : \"Февраль\",\r",
                    "        \"3\"  : \"March\",\r",
                    "        \"4\"  : \"April\",\r",
                    "        \"5\"  : \"May\",\r",
                    "        \"6\"  : \"June\",\r",
                    "        \"7\"  : \"July\",\r",
                    "        \"8\"  : \"August\",\r",
                    "        \"9\"  : \"September\",\r",
                    "        \"10\" : \"October\",\r",
                    "        \"11\" : \"November\",\r",
                    "        \"12\" : \"December\"\r",
                    "    },\r",
                    "\t\"time\":{\r",
                    "\t\tago: 'назад',\r",
                    "\t\tfrom: '',\r",
                    "\t\tnow: 'Только что',\r",
                    "\t\tminute: 'Минута',\r",
                    "\t\tminutes: 'Минут',\r",
                    "\t\thour: 'Час',\r",
                    "\t\thours: 'Часов',\r",
                    "\t\tday: 'День',\r",
                    "\t\tdays: 'Дней',\r",
                    "\t\tweek: 'Неделя',\r",
                    "\t\tweeks: 'Недель',\r",
                    "\t\tmonth: 'Месяц',\r",
                    "\t\tmonths: 'Месяцев',\r",
                    "\t\tyear: 'Год',\r",
                    "\t\tyears: 'Лет'\r",
                    "\t}\r",
                    "};\r",
                    "VKM.app.globals.locales['en']={\r",
                    "\t\"labels\":\r",
                    "\t{\r",
                    "\t\t\"Login\":\"Login\",\r",
                    "        \"name\":\"Name\",\r",
                    "        \"lastvisit\":\"Last visit\",\r",
                    "        \"important\": \" Important\",\r",
                    "\t\t\"notImportant\": \"\",\r",
                    "        \"friendrecommended\":\"People you may know\",\r",
                    "        \"friendrequests\":\"Friend requests\",\r",
                    "        \"clearfilter\": \"Delete the filter?\",\r",
                    "\t\t\"Signup\":\"Signup\",\r",
                    "\t\t\"youcanmessage\" : \"For fast, free and convenient messaging with friends and contacts\" ,\r",
                    "\t\t\"Messages\":\"Messages\",\r",
                    "\t\t\"Inbox\":\"Inbox\",\r",
                    "\t\t\"Sent\":\"Sent\",\r",
                    "        'pullText':'Pull down to refresh...',\r",
                    "        'loadingText':'Loading...',\r",
                    "        'loadedText':'Loaded',\r",
                    "        'lastUpdatedText':'Last Updated:&nbsp;',\r",
                    "        'releaseText':'Release to refresh...',\r",
                    "        \"Cancel\":\"Cancel\",\r",
                    "        \"DeleteConfirm\":\"Delete confirmation\",\r",
                    "\t\t\"Dialogues\":\"Dialogues\",\r",
                    "\t\t\"Search\":\"Search\",\r",
                    "        \"Loading\":\"Loading...\",\r",
                    "\t\t\"Loadingmessages\":\"Loading messages..\",\r",
                    "\t\t\"Nomessagesyet\":\"No messages yet\",\r",
                    "\t\t\"Back\":\"Back\",\r",
                    "\t\t\"Online\":\"Online\",\r",
                    "\t\t\"writeamessage\":\"Write a message\",\r",
                    "\t\t\"Send\":\"Send\",\r",
                    "\t\t\"wasOn\":\"wasOn\",\r",
                    "\t\t\"ago\":\"ago\",\r",
                    "\t\t\"Uploading attachments\":\"Uploading attachments..\",\r",
                    "\t\t\"Remove attachment\":\"Remove attachment\",\r",
                    "\t\t\"Error uploading\":\"Error uploading\",\r",
                    "\t\t\"Message was not sent\":\"Message was not sent\",\r",
                    "\t\t\"Try again\":\"Try again\",\r",
                    "\t\t\"Forward\":\"Forward\",\r",
                    "\t\t\"Delete\":\"Delete\",\r",
                    "\t\t\"Take photo\":\"Take photo\",\r",
                    "\t\t\"Choose existing photo\":\"Choose existing photo\",\r",
                    "\t\t\"Share location\":\"Share location\",\r",
                    "\t\t\"members\":\"members\",\r",
                    "\t\t\"Change chat\":\"Change chat\",\r",
                    "\t\t\"addChatUser\":\"Add person\",\r",
                    "\t\t\"is typing...\":\"is typing...\",\r",
                    "\t\t\"Photo\":\"Photo\",\r",
                    "\t\t\"Map\":\"Map\",\r",
                    "\t\t\"Video\":\"Video\",\r",
                    "\t\t\"Audio\":\"Audio\",\r",
                    "\t\t\"Document\":\"Document\",\r",
                    "\t\t\"Forwarded message\":\"Forwarded message\",\r",
                    "\t\t\"Allfriends\":\"VK friends\",\r",
                    "\t\t\"Online\":\"Online\",\r",
                    "\t\t\"Contacts\":\"Contacts\",\r",
                    "\t\t\"Sync contacts\":\"Sync contacts\",\r",
                    "\t\t\"SyncWithFriends\": \"Sync your phone contacts with your VK friends list\",\r",
                    "\t\t\"Call\":\"Call\",\r",
                    "\t\t\"Requests\":\"Requests\",\r",
                    "\t\t\"Friend requests\":\"Friend requests\",\r",
                    "\t\t\"People you may know\":\"People you may know\",\r",
                    "\t\t\"SearchFriends\":\"Search for your friends and contacts among all registered users\",\r",
                    "\t\t\"Addfriend\":\"Add friend\",\r",
                    "\t\t\"Decline request\":\"Decline request\",\r",
                    "        \"Deleterequest\":\"Decline request\",\r",
                    "\t\t\"Deletefriend\":\"Delete friend\",\r",
                    "\t\t\"Settings\":\"Settings\",\r",
                    "\t\t\"Change photo\":\"Change photo\",\r",
                    "\t\t\"In-app notifications\":\"In-app notifications\",\r",
                    "        \"DeleteQ\":\"Remove the attachment?\",\r",
                    "        \"Yes\":\"Yes\",\r",
                    "        \"No\":\"No\",\r",
                    "        \"defaultLanguage\":\"Language\",\r",
                    "        \"compressInUpload\":\"Compress\",\r",
                    "        \"photoUpload\":\"Photos\",\r",
                    "        \"notshow\":\"None\",\r",
                    "        \"logout\":\"Logout and exit\",\r",
                    "        'friendSubscribers':' Subscribers',\r",
                    "        \"members\":\"Members\",\r",
                    "        \"leavechat\":\"Leave the chat\",\r",
                    "        \"takephoto\":\"Take a photo\",\r",
                    "\t\t\"uploadphoto\":\"Upload from the phone\",\r",
                    "        \"chooseexistingphoto\":\"Choose existing photo\",\r",
                    "        \"takesound\":\"Record via microphone\",\r",
                    "\t\t\"uploadsound\":\"Upload from the phone\",\r",
                    "        \"chooseexistingsound\":\"Choose existing media\",\r",
                    "\t\t\"uploaddoc\":\"Upload from the phone\",\r",
                    "        \"chooseexistingdoc\":\"Choose existing document\",\r",
                    "        \"loadmore\":\"load more...\",\r",
                    "        \"mutualFriends\":\"Mutual friends\",\r",
                    "        \"noMutualFriends\":\"No mutual friends\",\r",
                    "        \"needrestart\":\"Language will be changed after restart.\",\r",
                    "        \"impossible\":\"Unfortunatly, current version of Tizen can not play VK video\",\r",
                    "\r",
                    "        \"newMessage\":'New messages',\r",
                    "        \"customProps\":\"Custom settings\",\r",
                    "        \"Vibrate\":\"Vibrate\",\r",
                    "        \"Sound\":\"Sound\",\r",
                    "        \"Banner\":\"Banner\",\r",
                    "        \"vibrate\":\"Вибрация\",\r",
                    "\t\t\"sound\":\"Звук\",\r",
                    "        \"banner\":\"Banner\",\r",
                    "        \"DisableSound\":\"DisableSound\",\r",
                    "        \"notification\":\"Notifications\",\r",
                    "        \"deletepersonalsettings\":\"Delete custom friends's settings\",\r",
                    "        \"pagesize\":\"Page size\",\r",
                    "        \"dialogues_\":\"Dialogues\",\r",
                    "        \"chat_\":\"Chat\",\r",
                    "        \"messages_\":\"Messages\",\r",
                    "        \"friends_\":\"Friends/Requests\",\r",
                    "        \"done\":\"Done\",\r",
                    "        \"silenceMode\":\"Do not disturb\",\r",
                    "        \"pdfViewer\":\"PDF viewer\",\r",
                    "        \"internal\":\"Embedded\",\r",
                    "        \"google\":\"Google Docs Viewer\",\r",
                    "        \"friendsMode\":\"Friends view mode\",\r",
                    "        \"short\":\"Short\",\r",
                    "        \"detailed\":\"Full\",\r",
                    "        \"chatselection\":\"Chat selection\",\r",
                    "        \"doubleClick\":\"Double Tap\",\r",
                    "        \"longClick\":\"Long Tap\",\r",
                    "        \"clickMode\":\"Для выделения сообщений используется двойной тап. Это сообщение больше показано не будет.\",\r",
                    "        \"importContacts\":\"Sync contacts\",\r",
                    "        \"importContactsMessage\":\"You can sync your phone contacts with your VK friends list. Do it now?\",\r",
                    "        \"importContactsResult\":\"Список контактов отправлен. Результат будет виден при на вкладке 'Поиск друзей'\",\r",
                    "        \"sendSMS\":\"Text to\",\r",
                    "        \"diconnectVkId\":\"Delete connection\",\r",
                    "        \"connectVkId\":\"Connect to VK friend\",\r",
                    "        \"invitationSubject\": \"Invitation to vk.com\",\r",
                    "        \"none\":\"None\",\r",
                    "\t\t\"sendinvitation\":\"Send invitation\",\r",
                    "        \"exit\":\"Exit?\",\r",
                    "\t\t\"unregisteredYet\":\"User is not registred yet. You can send an invitation.\",\r",
                    "        'messagelooks':'This is how it looks',\r",
                    "        \"invitationText\":\" invites you to join to social network 'Vkontakte' at http://vk.com .\",\r",
                    "        \"DeleteSettingsConfirm\":\"Custom notification settings for friends and chats will be deleted and default settings will be restored\",\r",
                    "        \"DeleteMessagesConfirm\":\"You are going to delete all messages in this chat. This operation can't be undone.\"\r",
                    "\t},\r",
                    "    \"languages\":{\r",
                    "        \"russian\":\"Русский\",\r",
                    "        \"english\":\"English\",\r",
                    "        \"autoDetect\":\"Autodetect\"\r",
                    "\t},\r",
                    "\r",
                    "    \"months\" : {\r",
                    "        \"1\"  : \"Январь\",\r",
                    "        \"2\"  : \"Февраль\",\r",
                    "        \"3\"  : \"March\",\r",
                    "        \"4\"  : \"April\",\r",
                    "        \"5\"  : \"May\",\r",
                    "        \"6\"  : \"June\",\r",
                    "        \"7\"  : \"July\",\r",
                    "        \"8\"  : \"August\",\r",
                    "        \"9\"  : \"September\",\r",
                    "        \"10\" : \"October\",\r",
                    "        \"11\" : \"November\",\r",
                    "        \"12\" : \"December\"\r",
                    "    },\r",
                    "\t\"time\":{\r",
                    "\t\tago: 'Ago',\r",
                    "\t\tfrom: '',\r",
                    "\t\tnow: 'Just Now',\r",
                    "\t\tminute: 'Minute',\r",
                    "\t\tminutes: 'Minutes',\r",
                    "\t\thour: 'Hour',\r",
                    "\t\thours: 'Hours',\r",
                    "\t\tday: 'Day',\r",
                    "\t\tdays: 'Days',\r",
                    "\t\tweek: 'Week',\r",
                    "\t\tweeks: 'Weeks',\r",
                    "\t\tmonth: 'Month',\r",
                    "\t\tmonths: 'Months',\r",
                    "\t\tyear: 'Year',\r",
                    "\t\tyears: 'Years'\r",
                    "\t}\r",
                    "};\r",
                    "\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.docIcons={'AC3':true,\r",
                    "'ACE':true,\r",
                    "'ADE':true,\r",
                    "'ADP':true,\r",
                    "'AI':true,\r",
                    "'AIFF':true,\r",
                    "'AU':true,\r",
                    "'AVI':true,\r",
                    "'BAT':true,\r",
                    "'BIN':true,\r",
                    "'BMP':true,\r",
                    "'BUP':true,\r",
                    "'CAB':true,\r",
                    "'CAT':true,\r",
                    "'CHM':true,\r",
                    "'CSS':true,\r",
                    "'CUE':true,\r",
                    "'DAT':true,\r",
                    "'DCR':true,\r",
                    "'Default':true,\r",
                    "'DER':true,\r",
                    "'DIC':true,\r",
                    "'DIVX':true,\r",
                    "'DIZ':true,\r",
                    "'DLL':true,\r",
                    "'DOC':true,\r",
                    "'DOCX':true,\r",
                    "'DOS':true,\r",
                    "'DVD':true,\r",
                    "'DWG':true,\r",
                    "'DWT':true,\r",
                    "'EMF':true,\r",
                    "'EXC':true,\r",
                    "'FON':true,\r",
                    "'GIF':true,\r",
                    "'HLP':true,\r",
                    "'HTML':true,\r",
                    "'IFO':true,\r",
                    "'INF':true,\r",
                    "'INI':true,\r",
                    "'INS':true,\r",
                    "'IP':true,\r",
                    "'ISO':true,\r",
                    "'ISP':true,\r",
                    "'JAVA':true,\r",
                    "'JFIF':true,\r",
                    "'JPEG':true,\r",
                    "'JPG':true,\r",
                    "'LOG':true,\r",
                    "'M4A':true,\r",
                    "'MID':true,\r",
                    "'MMF':true,\r",
                    "'MMM':true,\r",
                    "'MOV':true,\r",
                    "'MOVIE':true,\r",
                    "'MP2':true,\r",
                    "'MP2V':true,\r",
                    "'MP3':true,\r",
                    "'MP4':true,\r",
                    "'MPE':true,\r",
                    "'MPEG':true,\r",
                    "'MPG':true,\r",
                    "'MPV2':true,\r",
                    "'NFO':true,\r",
                    "'PDD':true,\r",
                    "'PDF':true,\r",
                    "'PHP':true,\r",
                    "'PNG':true,\r",
                    "'PPT':true,\r",
                    "'PPTX':true,\r",
                    "'preview':true,\r",
                    "'PSD':true,\r",
                    "'RAR':true,\r",
                    "'REG':true,\r",
                    "'RTF':true,\r",
                    "'SCP':true,\r",
                    "'THEME':true,\r",
                    "'TIF':true,\r",
                    "'TIFF':true,\r",
                    "'TLB':true,\r",
                    "'TTF':true,\r",
                    "'TXT':true,\r",
                    "'UIS':true,\r",
                    "'URL':true,\r",
                    "'VBS':true,\r",
                    "'VCR':true,\r",
                    "'VOB':true,\r",
                    "'WAV':true,\r",
                    "'WBA':true,\r",
                    "'WMA':true,\r",
                    "'WMV':true,\r",
                    "'WPL':true,\r",
                    "'WRI':true,\r",
                    "'WTX':true,\r",
                    "'xls':true,\r",
                    "'XLSX':true,\r",
                    "'XML':true,\r",
                    "'XSL':true,\r",
                    "'ZAP':true,\r",
                    "'ZIP':true\r",
                    "};\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "e810ed5e-9851-4103-ab23-27281cab2fc2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "s4",
                "implHandler": [
                    "return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);"
                ]
            },
            "designerId": "3e4a044d-d5bb-406a-8e3c-2025b4e6374f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "uuid",
                "implHandler": [
                    "return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' +\r",
                    "    this.s4() + '-' + this.s4() + this.s4() + this.s4();\r",
                    ""
                ]
            },
            "designerId": "55d4f4da-7dc1-427f-abbb-0798775ff6ae"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initParams",
                "implHandler": [
                    "VKM.app.globals.needRefresh={};\r",
                    "VKM.app.globals.messageIds=[];\r",
                    "var settingsStore=Ext.getStore('settings');\r",
                    "var newMessageSoundRecord=settingsStore.getById('newMessageSound');\r",
                    "if(!newMessageSoundRecord)\r",
                    "{\r",
                    "        newMessageSoundRecord=new VKM.model.localConfig({id:'newMessageSound',value:1});\r",
                    "        settingsStore.add(newMessageSoundRecord);\r",
                    "        newMessageSoundRecord.save();\r",
                    "};\r",
                    "var newMessageVibrateRecord=settingsStore.getById('newMessageVibrate');\r",
                    "if(!newMessageVibrateRecord)\r",
                    "{\r",
                    "        newMessageVibrateRecord=new VKM.model.localConfig({id:'newMessageVibrate',value:1});\r",
                    "        settingsStore.add(newMessageVibrateRecord);\r",
                    "        newMessageVibrateRecord.save();\r",
                    "};\r",
                    "var newMessageNotificationRecord=settingsStore.getById('newMessageNotification');\r",
                    "if(!newMessageNotificationRecord)\r",
                    "{\r",
                    "        newMessageNotificationRecord=new VKM.model.localConfig({id:'newMessageNotification',value:1});\r",
                    "        settingsStore.add(newMessageNotificationRecord);\r",
                    "        newMessageNotificationRecord.save();\r",
                    "};\r",
                    "var globalSilenceMode=settingsStore.getById('globalSilenceMode');\r",
                    "if(!globalSilenceMode)\r",
                    "{\r",
                    "        globalSilenceMode=new VKM.model.localConfig({id:'globalSilenceMode',value:0});\r",
                    "        settingsStore.add(globalSilenceMode);\r",
                    "        globalSilenceMode.save();\r",
                    "};\r",
                    "var languageRecord=settingsStore.getById('language');\r",
                    "if(!languageRecord)\r",
                    "{\r",
                    "        languageRecord=new VKM.model.localConfig({id:'language',value:'autoDetect'});\r",
                    "        settingsStore.add(languageRecord);\r",
                    "        languageRecord.save();\r",
                    "};\r",
                    "\r",
                    "\r",
                    "\r",
                    "var dialoguesPageSize=settingsStore.getById('dialoguesPageSize');\r",
                    "if(!dialoguesPageSize)\r",
                    "{\r",
                    "        var dialoguesPageSize=new VKM.model.localConfig({id:'dialoguesPageSize',value:20});\r",
                    "        settingsStore.add(dialoguesPageSize);\r",
                    "        dialoguesPageSize.save();\r",
                    "};\r",
                    "\r",
                    "var chatPageSize=settingsStore.getById('chatPageSize');\r",
                    "if(!chatPageSize)\r",
                    "{\r",
                    "        var chatPageSize=new VKM.model.localConfig({id:'chatPageSize',value:20});\r",
                    "        settingsStore.add(chatPageSize);\r",
                    "        chatPageSize.save();\r",
                    "};\r",
                    "\r",
                    "var messagesPageSize=settingsStore.getById('messagesPageSize');\r",
                    "if(!messagesPageSize)\r",
                    "{\r",
                    "        var messagesPageSize=new VKM.model.localConfig({id:'messagesPageSize',value:20});\r",
                    "        settingsStore.add(messagesPageSize);\r",
                    "        messagesPageSize.save();\r",
                    "};\r",
                    "\r",
                    "var friendsPageSize=settingsStore.getById('friendsPageSize');\r",
                    "if(!friendsPageSize)\r",
                    "{\r",
                    "        var friendsPageSize=new VKM.model.localConfig({id:'friendsPageSize',value:30});\r",
                    "        settingsStore.add(friendsPageSize);\r",
                    "        friendsPageSize.save();\r",
                    "};\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.settings={\r",
                    "    newMessageSound:newMessageSoundRecord.get('value'),\r",
                    "    newMessageVibrate:newMessageVibrateRecord.get('value'),\r",
                    "    newMessageNotification:newMessageNotificationRecord.get('value'),\r",
                    "    dialoguesPageSize:dialoguesPageSize.get('value'),\r",
                    "    chatPageSize:chatPageSize.get('value'),\r",
                    "    messagesPageSize:messagesPageSize.get('value'),\r",
                    "    friendsPageSize:friendsPageSize.get('value'),\r",
                    "\r",
                    "    language:languageRecord.get('value'),\r",
                    "    globalSilenceMode:globalSilenceMode.get('value')\r",
                    "};\r",
                    "\r",
                    "var value=settingsStore.getById('friendsMode');\r",
                    "if(value)\r",
                    "{\r",
                    "    VKM.app.globals.settings.friendsMode=value.get('value');\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    VKM.app.globals.settings.friendsMode='detailed';\r",
                    "}\r",
                    ";\r",
                    "var value=settingsStore.getById('chatSelection');\r",
                    "if(value)\r",
                    "{\r",
                    "    VKM.app.globals.settings.chatSelection=value.get('value');\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "        VKM.app.globals.settings.chatSelection='doubleclick';\r",
                    "};\r",
                    "\r",
                    "var value=settingsStore.getById('pdfViewerMode');\r",
                    "if(value)\r",
                    "{\r",
                    "    VKM.app.globals.settings.pdfViewerMode=value.get('value');\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    VKM.app.globals.settings.pdfViewerMode='internal';\r",
                    "}\r",
                    "    ;\r",
                    "\r",
                    "var value=settingsStore.getById('isPhoneSynched');\r",
                    "\r",
                    "if(!value)\r",
                    "{\r",
                    "    VKM.app.globals.settings.isPhoneSynched=false;\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "    VKM.app.globals.settings.isPhoneSynched=1;\r",
                    "\r",
                    "};\r",
                    "\r",
                    "var store=Ext.getStore('AllMessages');\r",
                    "store.setPageSize(VKM.app.globals.settings.dialoguesPageSize);\r",
                    "store=Ext.getStore('InboxMessages');\r",
                    "store.setPageSize(VKM.app.globals.settings.messagesPageSize);\r",
                    "store=Ext.getStore('Chat');\r",
                    "store.setPageSize(VKM.app.globals.settings.chatPageSize);\r",
                    "store=Ext.getStore('Friends');\r",
                    "store.setPageSize(VKM.app.globals.settings.friendsPageSize);\r",
                    "var store2=Ext.getStore('FriendRequests');\r",
                    "var store3=Ext.getStore('FriendSuggestions');\r",
                    "store2.setPageSize(VKM.app.globals.settings.friendsPageSize);\r",
                    "store3.setPageSize(VKM.app.globals.settings.friendsPageSize);"
                ]
            },
            "designerId": "c556847b-f53d-4d76-89a8-61ec2c97e6fb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "overrides",
                "implHandler": [
                    ""
                ]
            },
            "designerId": "0e7ca879-302c-43d3-ab0f-ce800c727ae3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadProfilePhoto",
                "implHandler": [
                    "var controller=VKM.app.getController('Contacts');\r",
                    "var actions= Ext.create('Ext.ActionSheet', {\r",
                    "    items: [\r",
                    "//         {\r",
                    "//             text: ux.locale.Manager.get('labels.chooseexistingphoto'),\r",
                    "//             ui: 'action',\r",
                    "//             //scope: button,\r",
                    "//             //iconCls:'photo',\r",
                    "//             handler: function() {\r",
                    "//                 actions.hide();\r",
                    "//                 controller.chooseAlbumDialogue(controller);\r",
                    "\r",
                    "//             }\r",
                    "//         },\r",
                    "        {\r",
                    "            text: ux.locale.Manager.get('labels.takephoto'),\r",
                    "            ui: 'action',\r",
                    "            //scope: button,\r",
                    "            //iconCls:'photo',\r",
                    "            handler: function() {\r",
                    "                actions.hide();\r",
                    "                controller.takePhoto(controller);\r",
                    "            }\r",
                    "        },\r",
                    "        {\r",
                    "            text: ux.locale.Manager.get('labels.uploadphoto'),\r",
                    "            ui: 'action',\r",
                    "           // scope: button,\r",
                    "            //iconCls:'photo',\r",
                    "            handler: function() {\r",
                    "                actions.hide();\r",
                    "                controller.uploadPhoto(controller);\r",
                    "            }\r",
                    "        },\r",
                    "        {\r",
                    "            xtype: 'button',\r",
                    "            text: ux.locale.Manager.get('labels.Cancel'),\r",
                    "            ui:'action',\r",
                    "            iconCls:'delete',\r",
                    "            //scope: button,\r",
                    "            handler: function() {\r",
                    "                actions.hide();\r",
                    "            }\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    "Ext.Viewport.add(actions);\r",
                    "actions.show();"
                ]
            },
            "designerId": "d0e5f57f-a41d-43d4-a437-93f5b5c69445"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "loadChatPhoto",
                "implHandler": [
                    "var controller=VKM.app.getController('Utils');\r",
                    "var actions= Ext.create('Ext.ActionSheet', {\r",
                    "    items: [\r",
                    "//         {\r",
                    "//             text: ux.locale.Manager.get('labels.chooseexistingphoto'),\r",
                    "//             ui: 'action',\r",
                    "//             //scope: button,\r",
                    "//             //iconCls:'photo',\r",
                    "//             handler: function() {\r",
                    "//                 actions.hide();\r",
                    "//                 controller.chooseAlbumDialogue(controller);\r",
                    "\r",
                    "//             }\r",
                    "//         },\r",
                    "        {\r",
                    "            text: ux.locale.Manager.get('labels.takephoto'),\r",
                    "            ui: 'action',\r",
                    "            //scope: button,\r",
                    "            //iconCls:'photo',\r",
                    "            handler: function() {\r",
                    "                actions.hide();\r",
                    "                controller.takePhoto(controller);\r",
                    "            }\r",
                    "        },\r",
                    "        {\r",
                    "            text: ux.locale.Manager.get('labels.uploadphoto'),\r",
                    "            ui: 'action',\r",
                    "           // scope: button,\r",
                    "            //iconCls:'photo',\r",
                    "            handler: function() {\r",
                    "                actions.hide();\r",
                    "                controller.uploadPhoto(controller);\r",
                    "            }\r",
                    "        },\r",
                    "        {\r",
                    "            xtype: 'button',\r",
                    "            text: ux.locale.Manager.get('labels.Cancel'),\r",
                    "            ui:'action',\r",
                    "            iconCls:'delete',\r",
                    "            //scope: button,\r",
                    "            handler: function() {\r",
                    "                actions.hide();\r",
                    "            }\r",
                    "        }\r",
                    "    ]\r",
                    "});\r",
                    "Ext.Viewport.add(actions);\r",
                    "actions.show();"
                ]
            },
            "designerId": "11b5ecea-c01b-4d8b-993a-c8179b1d350b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "emoji",
                "implHandler": [
                    "var Emoji = {\r",
                    "\r",
                    "opts: {},\r",
                    "last: 0,\r",
                    "shownId: false,\r",
                    "\r",
                    "    init: function(txt, opts) {\r",
                    "        var optId = Emoji.last;\r",
                    "        opts.txt = txt;\r",
                    "        if (opts.forceTxt) {\r",
                    "            opts.editable = 0;\r",
                    "            placeholderSetup(txt);\r",
                    "        } else {\r",
                    "            opts.editable = 1;\r",
                    "            setTimeout(function() {\r",
                    "                placeholderSetup(txt, {editable: 1, editableFocus: Emoji.editableFocus});\r",
                    "                if (opts.shouldFocus) {\r",
                    "                    Emoji.editableFocus(txt, false, true);\r",
                    "                }\r",
                    "            }, 0);\r",
                    "            if (browser.mozilla) {\r",
                    "                document.execCommand(\"enableObjectResizing\", false, false);\r",
                    "                cur.destroy.push(function() {\r",
                    "                    document.execCommand(\"enableObjectResizing\", false, true);\r",
                    "                })\r",
                    "            }\r",
                    "            addEvent(txt, browser.opera ? 'click' : 'mousedown', function(e) {\r",
                    "                if (e.target && e.target.tagName == 'IMG') {\r",
                    "                    if (Emoji.getCode(e.target)) {\r",
                    "                        Emoji.editableFocus(txt, e.target, e.offsetX > 8);\r",
                    "                        return cancelEvent(e);\r",
                    "                    }\r",
                    "                }\r",
                    "                opts.emojiFocused = false;\r",
                    "            });\r",
                    "\r",
                    "            addEvent(txt, 'keypress keydown keyup paste', function(e) {\r",
                    "                if (e.type == 'keydown') {\r",
                    "                    if (e.ctrlKey && e.keyCode == KEY.RETURN) {\r",
                    "                        var val = this.value;\r",
                    "                        if (opts.editable) {\r",
                    "                            Emoji.insertHTML('<div><br/></div>');\r",
                    "                        }\r",
                    "                        return false;\r",
                    "                    }\r",
                    "\r",
                    "                }\r",
                    "                return true;\r",
                    "            });\r",
                    "        }\r",
                    "\r",
                    "\r",
                    "        Emoji.opts[Emoji.last] = opts;\r",
                    "        return Emoji.last++;\r",
                    "    },\r",
                    "\r",
                    "    onEditablePaste: function(txt, opts, optId) {\r",
                    "        var range = (browser.chrome || browser.safari || (browser.msie && browser.version > 10)) ? Emoji.getRange() : false;\r",
                    "        if (range) {\r",
                    "            var textarea = ce('TEXTAREA', {className: 'emoji_tmp_textarea'});\r",
                    "            txt.parentNode.appendChild(textarea);\r",
                    "            textarea.focus();\r",
                    "        }\r",
                    "        setTimeout(function(){\r",
                    "            if (range) {\r",
                    "                Emoji.setRange(range);\r",
                    "                var text = val(textarea);\r",
                    "                re(textarea);\r",
                    "                if (text) {\r",
                    "                    Emoji.insertHTML(clean(text).replace(/\\n/g, '<br/>'));\r",
                    "                }\r",
                    "            }\r",
                    "            Emoji.cleanCont(txt);\r",
                    "        }, 0);\r",
                    "    },\r",
                    "\r",
                    "    cleanCont: function(cont) {\r",
                    "        var el = cont.firstChild;\r",
                    "        while (el) {\r",
                    "            var next = el.nextSibling;\r",
                    "            switch (el.nodeType) {\r",
                    "                case 1:\r",
                    "                    if (el.id == 'tmp_paste_cont') break;\r",
                    "                    if (el.tagName == 'DIV' || el.tagName == 'P' || el.tagName == 'SPAN') {\r",
                    "                        el.setAttribute('style', '');\r",
                    "                        el.className = '';\r",
                    "                        el.id = '';\r",
                    "                        Emoji.cleanCont(el);\r",
                    "                    } else if (el.tagName == 'IMG') {\r",
                    "                        if (!Emoji.getCode(el)) {\r",
                    "                            re(el);\r",
                    "                        }\r",
                    "                    } else if (el.tagName != 'BR' ){\r",
                    "                        var text = Emoji.editableVal(el, {saveEmoji: true});\r",
                    "                        var f = cf(clean(text).replace(/\\n/g, '<br/>'));\r",
                    "                        var last = f.lastChild;\r",
                    "                        el.parentNode.replaceChild(f, el);\r",
                    "                        //if (last) {\r",
                    "                        //  Emoji.editableFocus(cont, last, true);\r",
                    "                        //}\r",
                    "                    }\r",
                    "                    break;\r",
                    "            }\r",
                    "            el = next;\r",
                    "        }\r",
                    "    },\r",
                    "\r",
                    "    editableFocus: function(editable, obj, after) {\r",
                    "        if (!editable) {\r",
                    "            return false;\r",
                    "        }\r",
                    "        editable.focus();\r",
                    "        if (editable.phonfocus) {\r",
                    "            editable.phonfocus();\r",
                    "        }\r",
                    "        if (typeof window.getSelection != 'undefined' && typeof document.createRange != 'undefined') {\r",
                    "            var sel = window.getSelection();\r",
                    "            if (browser.opera && !after) {\r",
                    "                sel.collapse(obj || editable, 0);\r",
                    "            } else {\r",
                    "                var range = document.createRange();\r",
                    "                if (obj) {\r",
                    "                    range.selectNode(obj);\r",
                    "                } else {\r",
                    "                    range.selectNodeContents(editable);\r",
                    "                }\r",
                    "                range.collapse(after ? false : true);\r",
                    "                var sel = window.getSelection();\r",
                    "                sel.removeAllRanges();\r",
                    "                sel.addRange(range);\r",
                    "            }\r",
                    "        } else if (typeof document.body.createTextRange != 'undefined') {\r",
                    "            var textRange = document.body.createTextRange();\r",
                    "            textRange.moveToElementText(obj || editable);\r",
                    "            textRange.collapse(after ? false : true);\r",
                    "            textRange.select();\r",
                    "        }\r",
                    "    },\r",
                    "\r",
                    "    getRange: function() {\r",
                    "        if (window.getSelection) {\r",
                    "            sel = window.getSelection();\r",
                    "            if (sel.getRangeAt && sel.rangeCount) {\r",
                    "                return sel.getRangeAt(0);\r",
                    "            }\r",
                    "        } else if (document.selection && document.selection.createRange) {\r",
                    "            return document.selection.createRange();\r",
                    "        }\r",
                    "        return null;\r",
                    "    },\r",
                    "\r",
                    "    setRange: function(range) {\r",
                    "        if (window.getSelection) {\r",
                    "            sel = window.getSelection();\r",
                    "            sel.removeAllRanges();\r",
                    "            sel.addRange(range);\r",
                    "        } else if (document.selection && range.select) {\r",
                    "            range.select();\r",
                    "        }\r",
                    "    },\r",
                    "\r",
                    "    editableVal: function(cont, opts) {\r",
                    "        if (!cont) return '';\r",
                    "        if (cont.tagName == 'TEXTAREA') return val(cont);\r",
                    "        var el = cont.firstChild;\r",
                    "        var v = '';\r",
                    "        var contTag = new RegExp('^(DIV|P|LI|OL|TR|TD|BLOCKQUOTE)$');\r",
                    "        while (el) {\r",
                    "            switch (el.nodeType) {\r",
                    "                case 3:\r",
                    "                    var str = el.data.replace(/^\\n|\\n$/g, ' ').replace(/[\\n\\xa0]/g, ' ').replace(/[ ]+/g, ' ');\r",
                    "                    v += str;\r",
                    "                    break;\r",
                    "                case 1:\r",
                    "                    var str = Emoji.editableVal(el);\r",
                    "                    if (el.tagName && el.tagName.match(contTag) && str) {\r",
                    "                        if (str.substr(-1) != '\\n') {\r",
                    "                            str += '\\n';\r",
                    "                        }\r",
                    "\r",
                    "                        var prev = el.previousSibling;\r",
                    "                        while(prev && prev.nodeType == 3 && trim(prev.nodeValue) == '') {\r",
                    "                            prev = prev.previousSibling;\r",
                    "                        }\r",
                    "                        if (prev && !(prev.tagName && prev.tagName.match(contTag))) {\r",
                    "                            str = '\\n' + str;\r",
                    "                        }\r",
                    "\r",
                    "                    } else if (el.tagName == 'IMG') {\r",
                    "                        var code = Emoji.getCode(el);\r",
                    "                        if (code) {\r",
                    "                            if (opts && opts.saveEmoji) {\r",
                    "                                str += Emoji.getEmojiHTML(code);\r",
                    "                            } else {\r",
                    "                                str += Emoji.codeToChr(code);\r",
                    "                            }\r",
                    "                        }\r",
                    "                    } else if (el.tagName == 'BR') {\r",
                    "                        str += '\\n';\r",
                    "                    }\r",
                    "                    v += str;\r",
                    "                    break;\r",
                    "            }\r",
                    "            el = el.nextSibling;\r",
                    "        }\r",
                    "        return v;\r",
                    "    },\r",
                    "\r",
                    "\r",
                    "    codeToChr: function(code) {\r",
                    "        var len = code.length / 4;\r",
                    "        var chr = '';\r",
                    "        var i = 0;\r",
                    "        while(len--) {\r",
                    "            chr += String.fromCharCode(parseInt(code.substr(i, 4), 16))\r",
                    "            i += 4;\r",
                    "        }\r",
                    "        return chr;\r",
                    "    },\r",
                    "\r",
                    "    checkEditable: function(optId, obj, options) {\r",
                    "        var scH = obj.scrollHeight;\r",
                    "        var opts = Emoji.opts[optId];\r",
                    "        if (!opts) {\r",
                    "            return false;\r",
                    "        }\r",
                    "        var bl = opts.tt;\r",
                    "        if (scH > options.height + 10) {\r",
                    "            if (!opts.isSized) {\r",
                    "                setStyle(obj, {height: options.height+'px', overflowY: 'auto'});\r",
                    "                var sm = geByClass1('emoji_smile', opts.controlsCont);\r",
                    "                var ph = ge('im_upload');\r",
                    "                var diff = sbWidth();\r",
                    "                setStyle(sm, vk.rtl ? {left: 1 + diff} : {right: 1 + diff});\r",
                    "                if (ph) {\r",
                    "                    setStyle(ph.parentNode, vk.rtl ? {left: 1 + diff} : {right: 1 + diff});\r",
                    "                }\r",
                    "                if (bl) setStyle(bl, vk.rtl ? {left: (opts.ttDiff || 31) + diff} : {right: (opts.ttDiff || 31) + diff})\r",
                    "                opts.isSized = true;\r",
                    "            }\r",
                    "        } else if (opts.isSized) {\r",
                    "            setStyle(obj, {height: 'auto', overflowY: 'hidden'});\r",
                    "            var sm = geByClass1('emoji_smile', opts.controlsCont);\r",
                    "            var ph = ge('im_upload');\r",
                    "            setStyle(sm, vk.rtl ? {left: 1} : {right: 1});\r",
                    "            if (ph) {\r",
                    "                setStyle(ph.parentNode, vk.rtl ? {left: 1}: {right: 1});\r",
                    "            }\r",
                    "            if (bl) setStyle(bl, vk.rtl ? {left: (opts.ttDiff || 31)} : {right: (opts.ttDiff || 31)})\r",
                    "            opts.isSized = false;\r",
                    "        }\r",
                    "    },\r",
                    "\r",
                    "    emojiEnter: function(optId, e) {\r",
                    "        var opts = Emoji.opts[optId]\r",
                    "        if (opts.emojiFocused && opts.emojiOvered) {\r",
                    "            var img = geByTag1('img', opts.emojiOvered);\r",
                    "            Emoji.addEmoji(optId, Emoji.getCode(img), opts.emojiOvered);\r",
                    "            opts.emojiFocused = true;\r",
                    "            Emoji.ttClick(optId, ge((cur.peer == -3) ? 'imw_smile' : 'im_smile'), true);\r",
                    "            debugLog('canceling');\r",
                    "            return cancelEvent(e);\r",
                    "        }\r",
                    "        return true;\r",
                    "    },\r",
                    "\r",
                    "    insertHTML: function(html) {\r",
                    "        if (browser.msie/* && browser.version < 10*/) {\r",
                    "            var r = document.selection.createRange();\r",
                    "            if (r.pasteHTML) {\r",
                    "                r.pasteHTML(html);\r",
                    "            }\r",
                    "        } else {\r",
                    "            document.execCommand('insertHTML', false, html);\r",
                    "        }\r",
                    "    },\r",
                    "\r",
                    "    addEmoji: function(optId, code, obj) {\r",
                    "        if (optId === false) {\r",
                    "            return false;\r",
                    "        }\r",
                    "        var opts = Emoji.opts[optId];\r",
                    "        opts.emojiFocused = false;\r",
                    "        if (opts.editable) {\r",
                    "            var img = ' '+Emoji.getEmojiHTML(code)+'&nbsp;';\r",
                    "            var editable = opts.txt;\r",
                    "            var sel = window.getSelection ? window.getSelection() : false;\r",
                    "            if (sel && sel.rangeCount) {\r",
                    "                r = sel.getRangeAt(0);\r",
                    "                if (r.commonAncestorContainer) {\r",
                    "                    var rCont = r.commonAncestorContainer;\r",
                    "                } else {\r",
                    "                    var rCont = r.parentElement ? r.parentElement() : r.item(0);\r",
                    "                }\r",
                    "            } else {\r",
                    "                var rCont = false;\r",
                    "            }\r",
                    "            el = rCont;\r",
                    "            while(el && el != editable) {\r",
                    "                el = el.parentNode;\r",
                    "            }\r",
                    "            var edLast = (editable.lastChild || {});\r",
                    "            if (browser.mozilla && edLast.tagName == 'BR' && !edLast.previousSibling) {\r",
                    "                re(editable.lastChild);\r",
                    "            }\r",
                    "            if (!el) {\r",
                    "                Emoji.editableFocus(editable, false, true);\r",
                    "            }\r",
                    "            Emoji.insertHTML(img);\r",
                    "            var emojies = geByClass('emoji', editable);\r",
                    "            emojies.push.apply(emojies, geByClass('emoji_css', editable));\r",
                    "            for (i in emojies) {\r",
                    "                var prev = emojies[i].previousSibling;\r",
                    "                if (prev && prev.nodeType == 3 && prev.textContent && prev.textContent.charCodeAt(0) == 32) {\r",
                    "                    var p = prev.previousSibling;\r",
                    "                    if (p && p.nodeType == 3 && p.textContent && p.textContent.charCodeAt(p.textContent.length - 1) == 160) {\r",
                    "                        re(prev);\r",
                    "                    }\r",
                    "                }\r",
                    "            }\r",
                    "            if (editable.check) editable.check();\r",
                    "        }\r",
                    "    }\r",
                    "\r",
                    "}\r",
                    "\r",
                    ""
                ]
            },
            "designerId": "5d27db8c-67f6-465d-843a-0ac1e802d9a8"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "event"
                ],
                "fn": "catchBreaks",
                "implHandler": [
                    "//var messageElement=document.getElementById('newMessageText');\r",
                    "// var selection=window.getSelection();\r",
                    "// console.log(selection);\r",
                    "// if (selection.type==\"Caret\")\r",
                    "// {\r",
                    "//     VKM.app.globals.offset = selection.baseOffset;\r",
                    "// }\r",
                    "// console.log(VKM.app.globals.offset);\r",
                    "\r",
                    "//console.log(event.keyCode)\r",
                    "\r",
                    "if(event.keyCode==13)\r",
                    "{\r",
                    "    \r",
                    "    var node=document.createElement(\"BR\");\r",
                    "    if (typeof window.getSelection != \"undefined\") {\r",
                    "        \r",
                    "        \r",
                    "        if (window.getSelection) {\r",
                    "            var sel = window.getSelection();\r",
                    "            if (sel.rangeCount > 0) {\r",
                    "                var range = sel.getRangeAt(0);\r",
                    "                var startNode = range.startContainer, startOffset = range.startOffset;\r",
                    "                var boundaryRange = range.cloneRange();\r",
                    "                var startTextNode = node;\r",
                    "                var endTextNode = document.createTextNode('');\r",
                    "                boundaryRange.collapse(false);\r",
                    "                boundaryRange.insertNode(endTextNode);\r",
                    "                boundaryRange.setStart(startNode, startOffset);\r",
                    "                boundaryRange.collapse(true);\r",
                    "                boundaryRange.insertNode(startTextNode);\r",
                    "                \r",
                    "                // Reselect the original text\r",
                    "                range.setStartAfter(startTextNode);\r",
                    "                range.setEndBefore(endTextNode);\r",
                    "                sel.removeAllRanges();\r",
                    "                sel.addRange(range);\r",
                    "            }\r",
                    "        }\r",
                    "        \r",
                    "    }\r",
                    "    \r",
                    "    \r",
                    "    event.preventDefault();\r",
                    "//     VKM.app.saveSelection();\r",
                    "//     VKM.app.restoreSelection();\r",
                    "    return false;\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "   VKM.app.saveSelection();\r",
                    "}"
                ]
            },
            "designerId": "914aee30-384f-4b02-baa3-36e8dd9de8d5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "saveSelection",
                "implHandler": [
                    "if(window.getSelection)//non IE Browsers\r",
                    "    { \r",
                    "        var a=null;\r",
                    "        try {\r",
                    "            a= window.getSelection().getRangeAt(0)\r",
                    "        }\r",
                    "        catch(e)\r",
                    "        {\r",
                    "            a=VKM.app.globals.savedRange\r",
                    "        }\r",
                    "        \r",
                    "        VKM.app.globals.savedRange = a; //Ext.clone();\r",
                    "        \r",
                    "    }\r",
                    "else if(document.selection)//IE\r",
                    "{\r",
                    "    VKM.app.globals.savedRange = Ext.clone(document.selection.createRange());\r",
                    "}"
                ]
            },
            "designerId": "f278ea4c-2f0a-451c-8102-2d1519b0d06e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "restoreSelection",
                "implHandler": [
                    "document.getElementById(\"newMessageText\").focus();\r",
                    "if (VKM.app.globals.savedRange != null) {\r",
                    "    if (window.getSelection)//non IE and there is already a selection\r",
                    "    {\r",
                    "        var s = window.getSelection();\r",
                    "        if (s.rangeCount > 0)\r",
                    "            s.removeAllRanges();\r",
                    "        s.addRange(VKM.app.globals.savedRange);\r",
                    "    }\r",
                    "    else if (document.createRange)//non IE and no selection\r",
                    "    {\r",
                    "        window.getSelection().addRange(VKM.app.globals.savedRange);\r",
                    "    }\r",
                    "        else if (document.selection)//IE\r",
                    "        {\r",
                    "            VKM.app.globals.savedRange.select();\r",
                    "        }\r",
                    "}"
                ]
            },
            "designerId": "08c84189-e7cb-4bbf-a9d7-75c865171395"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getCaretPos",
                "implHandler": [
                    "VKM.app.globals.selection={};\r",
                    "VKM.app.globals.selection.range= window.getSelection().getRangeAt(0);\r",
                    "VKM.app.globals.selection.start = VKM.app.globals.selection.range.startOffset;\r",
                    "VKM.app.globals.selection.end = VKM.app.globals.selection.range.endOffset;\r",
                    "VKM.app.globals.selection.startNode = VKM.app.globals.selection.range.startContainer;\r",
                    "VKM.app.globals.selection.endNode = VKM.app.globals.selection.range.endContainer;\r",
                    "VKM.app.globals.selection.selectedText = VKM.app.globals.selection.range.toString();"
                ]
            },
            "designerId": "cfd11ab6-a78f-45a3-8b54-dad5041b90f1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "restoreCaretPos",
                "implHandler": [
                    "var selection = window.getSelection();\r",
                    "\tif (selection.rangeCount > 0) {\r",
                    "\t\tselection.removeAllRanges();\r",
                    "\t\tselection.addRange(VKM.app.globals.selection.range);\r",
                    "\t}"
                ]
            },
            "designerId": "2fd0f536-d3d7-463c-9998-6aec72dc7d28"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "startNodeIndex",
                    "endNodeIndex",
                    "start",
                    "end"
                ],
                "fn": "setCaretPos",
                "implHandler": [
                    "VKM.app.globals.selection.range = document.createRange();\r",
                    "var editableContainer = document.getElementById(\"newMessageText\");\r",
                    "VKM.app.globals.selection.range.setStart(editableContainer.childNodes[startNodeIndex].firstChild,start);\r",
                    "VKM.app.globals.selection.range.setEnd(editableContainer.childNodes[endNodeIndex].firstChild,end);\r",
                    "var selection = window.getSelection();\r",
                    "selection.addRange(VKM.app.globals.selection.range);"
                ]
            },
            "designerId": "88cb79b4-fe97-451c-b82c-7b8d0766e85d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "closeTmpPanels",
                "implHandler": [
                    "var tmpPanels=Ext.ComponentQuery.query('#tmpPanel');\r",
                    "for (var i=0;i<tmpPanels.length;i++)\r",
                    "{\r",
                    "    tmpPanels[i].destroy();\r",
                    "}"
                ]
            },
            "designerId": "96af9362-e085-4fb2-bf02-68db4fdfa059"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "url",
                    "type"
                ],
                "fn": "showDocument",
                "implHandler": [
                    "var viewer='internal'\r",
                    "if(VKM.app.globals.settings.pdfViewerMode)\r",
                    "    viewer=VKM.app.globals.settings.pdfViewerMode\r",
                    "    \r",
                    "    \r",
                    "if (type=='pdf'&&viewer=='internal')\r",
                    "{\r",
                    "   // url='http://localhost:1337/api';\r",
                    "    var a=Ext.Viewport.add({\r",
                    "        xtype     : 'pdfpanel',\r",
                    "        itemId    :  \"tmpPanel\",\r",
                    "        fullscreen: true,\r",
                    "        layout    : 'fit',\r",
                    "        src       : url, // URL to the PDF - Same Domain or Server with CORS Support\r",
                    "        style     : {\r",
                    "            backgroundColor: '#333'\r",
                    "        },\r",
                    "        margin: 2,\r",
                    "        zIndex:9999\r",
                    "    });\r",
                    "    a.show();\r",
                    "}\r",
                    "else\r",
                    "{\r",
                    "\r",
                    "//    // url='http://localhost:1337/api';\r",
                    "//     var a=Ext.Viewport.add({\r",
                    "//         xtype     : 'pdfpanel',\r",
                    "//         itemId    :  \"tmpPanel\",\r",
                    "//         fullscreen: true,\r",
                    "//         layout    : 'fit',\r",
                    "//         src       : url, // URL to the PDF - Same Domain or Server with CORS Support\r",
                    "//         style     : {\r",
                    "//             backgroundColor: '#333'\r",
                    "//         },\r",
                    "//         margin: 2,\r",
                    "//         zIndex:9999\r",
                    "//     });\r",
                    "//     a.show();\r",
                    "\r",
                    "//        var a=new XMLHttpRequest();\r",
                    "\r",
                    "\r",
                    "//     url='http://localhost:1337/api';\r",
                    "// //     var a=Ext.Viewport.add({\r",
                    "// //         xtype     : 'pdfpanel',\r",
                    "// //         itemId    :  \"tmpPanel\",\r",
                    "// //         fullscreen: true,\r",
                    "// //         layout    : 'fit',\r",
                    "// //         src       : url, // URL to the PDF - Same Domain or Server with CORS Support\r",
                    "// //         style     : {\r",
                    "// //             backgroundColor: '#333'\r",
                    "// //         },\r",
                    "// //         margin: 2,\r",
                    "// //         zIndex:9999\r",
                    "// //     });\r",
                    "// //     a.show();\r",
                    "    var url='http://docs.google.com/viewer?url='+url+'&embedded=true&mobile=true';\r",
                    "    Ext.Ajax.request({\r",
                    "        url: url,\r",
                    "        method: 'GET',\r",
                    "        callback: function(options, success, response) {\r",
                    "            console.log(response);\r",
                    "            var regex = /iframe.*?src=(?:(?:'([^']*)')|(?:\"([^\"]*)\")|([^\\s]*))/i;\r",
                    "            var srcr = regex.exec(response.responseText);\r",
                    "            var url=response.request.options.url;\r",
                    "            var iframeUrl='<iframe height=\"100%\" width=\"100%\" src=\"http://docs.google.com/viewer?url='+url+'&mobile=true\"></iframe>';\r",
                    "            if(srcr)\r",
                    "            {\r",
                    "                var src0=srcr[3].replace(\"&quot;\",\"\");\r",
                    "                var src = src0.replace(\"&quot;\",\"\");\r",
                    "                //response.responseText.match(regex)[0];\r",
                    "\r",
                    "                iframeUrl='<iframe height=\"100%\" width=\"100%\" src=\"http://docs.google.com/viewer?url='+src+'&mobile=true\"></iframe>';\r",
                    "                url='http://docs.google.com/viewer?url='+src+'&embedded=true&mobile=true';\r",
                    "\r",
                    "            }\r",
                    "            else\r",
                    "            {\r",
                    "                var regex = /img.*?src=(?:(?:'([^']*)')|(?:\"([^\"]*)\")|([^\\s]*))/i;\r",
                    "                var srcr1 = regex.exec(response.responseText);\r",
                    "                if(srcr1)\r",
                    "                {\r",
                    "                    var src0=srcr1[3].replace(\"&quot;\",\"\");\r",
                    "                    var src = src0.replace(\"&quot;\",\"\");\r",
                    "                    //response.responseText.match(regex)[0];\r",
                    "\r",
                    "                    var newPanel= Ext.Viewport.add({\r",
                    "                        xtype:\"panel\",\r",
                    "                        height:\"100%\",\r",
                    "                        width:\"100%\",\r",
                    "                        modal:true,\r",
                    "                        itemId    :  \"tmpPanel\",\r",
                    "                        cls:\"googleViewer\",\r",
                    "                        centered:true,\r",
                    "                        style:{height:\"100%\"},\r",
                    "                        html:  '<img width=\"100%\" src=\"'+src+'\"></img>'\r",
                    "                    });\r",
                    "                    newPanel.show();\r",
                    "                    newPanel.element.dom.addEventListener('click',function(e){\r",
                    "                        newPanel.destroy();\r",
                    "                    });\r",
                    "                    return;\r",
                    "                };\r",
                    "\r",
                    "\r",
                    "\r",
                    "            }\r",
                    "            console.log(iframeUrl);\r",
                    "            if (tizen)\r",
                    "            {\r",
                    "                var appControl = new tizen.ApplicationControl(\"http://tizen.org/appcontrol/operation/view\", url);\r",
                    "                tizen.application.launchAppControl(appControl, null,\r",
                    "                                                   function() {\r",
                    "                                                       console.log(\"browser opened\");\r",
                    "\r",
                    "                                                   },\r",
                    "                                                   function(e) { console.log(\"browser error: \" + e.message); }\r",
                    "                                                  );\r",
                    "            }\r",
                    "            else\r",
                    "            {\r",
                    "                var newPanel= Ext.Viewport.add({\r",
                    "                    xtype:\"panel\",\r",
                    "                    height:\"100%\",\r",
                    "                    width:\"100%\",\r",
                    "                    modal:true,\r",
                    "                    itemId    :  \"tmpPanel\",\r",
                    "                    cls:\"googleViewer\",\r",
                    "                    centered:true,\r",
                    "                    style:{height:\"100%\"},\r",
                    "                    html:  iframeUrl,\r",
                    "                    items:[{\r",
                    "                        xtype:'button',\r",
                    "                        itemId:\"closeButton\",\r",
                    "                        ui:\"decline\",\r",
                    "                        iconCls:'delete',\r",
                    "                        handler:VKM.app.closeTmpPanels,\r",
                    "                        style:{\r",
                    "                            position:\"absolute\",\r",
                    "                            top:2,\r",
                    "                            left:2,\r",
                    "                            zIndex:99999\r",
                    "                        }\r",
                    "                    }\r",
                    "                          ]\r",
                    "                });\r",
                    "                newPanel.show();\r",
                    "            }\r",
                    "        }\r",
                    "\r",
                    "    });\r",
                    "\r",
                    "\r",
                    "\r",
                    "\r",
                    "//     var iframeUrl='<iframe height=\"100%\" width=\"100%\" src=\"http://docs.google.com/viewer?url='+url+'&embedded=true\"></iframe>';\r",
                    "//     var newPanel= Ext.Viewport.add({\r",
                    "//         xtype:\"panel\",\r",
                    "//         height:\"100%\",\r",
                    "//         width:\"100%\",\r",
                    "//         modal:true,\r",
                    "//         itemId    :  \"tmpPanel\",\r",
                    "//         cls:\"googleViewer\",\r",
                    "//         centered:true,\r",
                    "//         style:{height:\"100%\"},\r",
                    "//         html:  iframeUrl,\r",
                    "//         items:[{\r",
                    "//             xtype:'button',\r",
                    "//             itemId:\"closeButton\",\r",
                    "//             ui:\"decline\",\r",
                    "//             iconCls:'delete',\r",
                    "//             handler:VKM.app.closeTmpPanels,\r",
                    "//             style:{\r",
                    "//                 position:\"absolute\",\r",
                    "//                 top:2,\r",
                    "//                 left:2,\r",
                    "//                 zIndex:99999\r",
                    "//             }\r",
                    "//         }\r",
                    "//             ]\r",
                    "//     });\r",
                    "//     newPanel.show();\r",
                    "\r",
                    "}"
                ]
            },
            "designerId": "c6eff7ed-d03e-4f85-a14d-d78caa029c74"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "handlePosition"
                ],
                "fn": "getCurrentLocation",
                "implHandler": [
                    "//tizen.logger.info('getCurrentLocation');\r",
                    "if (navigator && navigator.geolocation &&\r",
                    "    navigator.geolocation.getCurrentPosition)\r",
                    "    navigator.geolocation.getCurrentPosition(function(position) {\r",
                    "//         tizen.view.hideLoader();\r",
                    "        if (position.coords.latitude === 0 && position.coords.longitude === 0)\r",
                    "            console.log('Unable to acquire your location')\r",
                    "            //tizen.logger.info('Unable to acquire your location');\r",
                    "        else {\r",
                    "//             tizen.logger.info('Latitude: ' + position.coords.latitude + \"\\n\" + 'Longitude: ' + position.coords.longitude);\r",
                    "            if(handlePosition)\r",
                    "            {\r",
                    "                handlePosition({latitude : position.coords.latitude, longitude : position.coords.longitude});\r",
                    "            }\r",
                    "             console.log(position.coords.latitude+','+position.coords.longitude)            ;\r",
                    "             VKM.app.SimpleNotification(\"ddd\",position.coords.latitude+','+position.coords.longitude)\r",
                    "        }\r",
                    "    }, function(error) {\r",
                    "//         tizen.view.hideLoader();\r",
                    "            console.log('GPS error occurred. Error code: '+ JSON.stringify(error))            ;\r",
                    "//         tizen.logger.err('GPS error occurred. Error code: ', JSON.stringify(error));        \r",
                    "        if(handlePosition)\r",
                    "        {\r",
                    "            handlePosition();\r",
                    "        }\r",
                    "        \r",
                    "    });\r",
                    "else {\r",
                    "            console.log('Unable to acquire your location1')\r",
                    "    //     tizen.view.hideLoader();\r",
                    "//     tizen.view.showPopup('Unable to acquire your location');\r",
                    "//     tizen.logger.err('No W3C Geolocation API available');\r",
                    "}\r",
                    ""
                ]
            },
            "designerId": "9c9338cd-a9f8-4fad-8beb-8614c083abde"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "savecoordinats",
                "implHandler": [
                    "//<div id=\"YMapsID\"></div><div id=\"coord_form\"><p><label>Координаты метки: </label><input id=\"latlongmet\" class=\"input-medium\" name=\"icon_text\" /><br/><label>Масштаб: </label><input id=\"mapzoom\" class=\"input-medium\" name=\"icon_text\" /></p><p><label>Центр карты: </label><input id=\"latlongcenter\" class=\"input-medium\" name=\"icon_text\" /></p></div>\r",
                    "\r",
                    "var new_coords = [VKM.app.globals.coords[0].toFixed(4), VKM.app.globals.coords[1].toFixed(4)];\r",
                    "VKM.app.globals.myPlacemark.getOverlay().getData().geometry.setCoordinates(new_coords);\r",
                    "var center = VKM.app.globals.myMap.getCenter();\r",
                    "var new_center = [center[0].toFixed(4), center[1].toFixed(4)];\r",
                    ""
                ]
            },
            "designerId": "2a679587-7d28-4578-b3d3-d3c5631de147"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initSelections",
                "implHandler": [
                    "\r",
                    "if (window.getSelection && document.createRange) {\r",
                    "    VKM.app.globals.saveSelection = function(containerEl) {\r",
                    "        var range = window.getSelection().getRangeAt(0);\r",
                    "        var preSelectionRange = range.cloneRange();\r",
                    "        preSelectionRange.selectNodeContents(containerEl);\r",
                    "        preSelectionRange.setEnd(range.startContainer, range.startOffset);\r",
                    "        var start = preSelectionRange.toString().length;\r",
                    "        \r",
                    "        return {\r",
                    "            start: start,\r",
                    "            end: start + range.toString().length\r",
                    "        }\r",
                    "    };\r",
                    "    \r",
                    "    VKM.app.globals.restoreSelection = function(containerEl, savedSel) {\r",
                    "        var charIndex = 0, range = document.createRange();\r",
                    "        range.setStart(containerEl, 0);\r",
                    "        range.collapse(true);\r",
                    "        var nodeStack = [containerEl], node, foundStart = false, stop = false;\r",
                    "        \r",
                    "        while (!stop && (node = nodeStack.pop())) {\r",
                    "            if (node.nodeType == 3) {\r",
                    "                var nextCharIndex = charIndex + node.length;\r",
                    "                if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {\r",
                    "                    range.setStart(node, savedSel.start - charIndex);\r",
                    "                    foundStart = true;\r",
                    "                }\r",
                    "                if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {\r",
                    "                    range.setEnd(node, savedSel.end - charIndex);\r",
                    "                    stop = true;\r",
                    "                }\r",
                    "                charIndex = nextCharIndex;\r",
                    "            } else {\r",
                    "                var i = node.childNodes.length;\r",
                    "                while (i--) {\r",
                    "                    nodeStack.push(node.childNodes[i]);\r",
                    "                }\r",
                    "            }\r",
                    "        }\r",
                    "        \r",
                    "        var sel = window.getSelection();\r",
                    "        sel.removeAllRanges();\r",
                    "        sel.addRange(range);\r",
                    "    }\r",
                    "} else if (document.selection && document.body.createTextRange) {\r",
                    "    VKM.app.globals.saveSelection = function(containerEl) {\r",
                    "        var selectedTextRange = document.selection.createRange();\r",
                    "        var preSelectionTextRange = document.body.createTextRange();\r",
                    "        preSelectionTextRange.moveToElementText(containerEl);\r",
                    "        preSelectionTextRange.setEndPoint(\"EndToStart\", selectedTextRange);\r",
                    "        var start = preSelectionTextRange.text.length;\r",
                    "\r",
                    "        return {\r",
                    "            start: start,\r",
                    "            end: start + selectedTextRange.text.length\r",
                    "        }\r",
                    "    };\r",
                    "\r",
                    "    VKM.app.globals.restoreSelection = function(containerEl, savedSel) {\r",
                    "        var textRange = document.body.createTextRange();\r",
                    "        textRange.moveToElementText(containerEl);\r",
                    "        textRange.collapse(true);\r",
                    "        textRange.moveEnd(\"character\", savedSel.end);\r",
                    "        textRange.moveStart(\"character\", savedSel.start);\r",
                    "        textRange.select();\r",
                    "    };\r",
                    "}\r",
                    "\r",
                    "\r",
                    "\r",
                    "VKM.app.globals.doSave = function () {\r",
                    "    VKM.app.globals.savedSelection = VKM.app.globals.saveSelection(document.getElementById(\"newMessageText\") );\r",
                    "}\r",
                    "\r",
                    "VKM.app.globals.doRestore = function () {\r",
                    "    if (VKM.app.globals.savedSelection) {\r",
                    "        VKM.app.globals.restoreSelection(document.getElementById(\"newMessageText\"), VKM.app.globals.savedSelection);\r",
                    "    }\r",
                    "}\r",
                    "    "
                ]
            },
            "designerId": "370654f3-494b-4906-a960-79631c2fb3ed"
        }
    ]
}