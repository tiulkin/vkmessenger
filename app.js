/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({

});


Ext.application({

    requires: [
        'ux.locale.Manager',
        'ux.locale.override.st.Button',
        'Ext.field.Search',
        'Ext.dataview.DataView',
        'Ext.DateExtras',
        'Ext.Img',
        'Ext.Audio',
        'Ext.Video',
        'Ext.field.TextArea',
        'ux.AudioPlayer',
        'Ext.Map',
        'Ext.util.Geolocation',
        'Ext.plugin.DataViewPaging',
        'Ext.slider.Slider',
        'Ext.dataview.List',
        'Ext.util.DelayedTask',
        'Ext.ActionSheet',
        'ux.touch.ImageGridList.view.List',
        'ux.touch.ImageGridList.view.ImageOuter',
        'ux.touch.ImageGridList.view.Image',
        'ux.touch.ImageGridList.view.Panel',
        'Ext.MessageBox',
        'Ext.form.FieldSet',
        'Ext.field.Toggle',
        'Ext.field.Select',
        'Ext.device.Camera',
        'Ext.field.File',
        'ux.Dialogues',
        'Ext.plugin.ListPagingReverse',
        'Ext.plugin.PullRefresh',
        'Ext.plugin.ListPaging',
        'ux.DialoguesSearch',
        'ux.FriendRequests',
        'ux.Friends',
        'ux.FriendsSuggestions'
    ],
    models: [
        'User',
        'Message',
        'localConfig',
        'Dialogues',
        'UnreadMessage',
        'Albums',
        'Images',
        'Chat',
        'FilteredDialogues',
        'userSettings',
        'PhoneContact'
    ],
    stores: [
        'Config',
        'AllMessages',
        'Users',
        'Chat',
        'Friends',
        'MessagesSearchResult',
        'DialoguesSearchResult',
        'settings',
        'Albums',
        'Images',
        'Videos',
        'Audios',
        'Docs',
        'Attachments',
        'GlobalSearchFriends',
        'InboxMessages',
        'SentMessages',
        'UnreadMessages',
        'Emoji',
        'FriendRequests',
        'FriendSuggestions',
        'Cities',
        'Countries',
        'FilteredDialogues',
        'FriendsInCommon',
        'userSettings',
        'PhoneContacts'
    ],
    views: [
        'MainView',
        'HtmlPanel',
        'FirstScreen',
        'ContactPanel',
        'NavMenu',
        'MainTabPanel',
        'MyPanel',
        'MessagesList',
        'MessageItem',
        'ChatItem',
        'ContactItem',
        'ContactsList',
        'PopUpChooser',
        'AlbumList',
        'AlbumItem',
        'VideoAttachmentsList',
        'ChatList',
        'ChatProperties',
        'PopUp1',
        'chatMemberContainer',
        'DialogueItem',
        'EmojiSet',
        'OneMessage',
        'Ext.ux.panel.PDF',
        'FriendItem',
        'PhotoItem',
        'FriendsInCommonItem',
        'ContactInfo',
        'PhoneContactItem',
        'MapChooser'
    ],
    controllers: [
        'Navigation',
        'Login',
        'InitDataLoader',
        'Utils',
        'DataLoader',
        'Dialogues',
        'Contacts',
        'Search'
    ],
    name: 'VKM',

    getJsonFromUrl: function(url) {
        var query = url.substr(1);
        var data = query.split("&");
        var result = {};
        for(var i=0; i<data.length; i++) {
            var item = data[i].split("=");
            result[item[0]] = item[1];
        }
        return result;

    },

    launch: function() {
        Ext.Logger={};
        Ext.Logger.error=function(a)
        {
            console.log(a);
        };
        Ext.Logger.warn=function(a)
        {
            console.log(a);
        };
        if(typeof tizen == "undefined")
        {
            tizen=null;
        }
        ;
        Ext.fly('appLoadingIndicator').destroy();
        Ext.getBody().removeCls('loading');



        document.addEventListener('tizenhwkey', function(e) {

            if(e.keyName == "back"){
                var tmpPanels=Ext.ComponentQuery.query('#tmpPanel');
                if(tmpPanels.length>0)
                {
                    for (var i=0;i<tmpPanels.length;i++)
                    {
                        tmpPanels[i].destroy();
                    }
                    return
                }
                if(VKM.app.globals.loginWindow&&VKM.app.globals.loginWindow!=undefined)
                {
                    //VKM.app.globals.loginWindow.close();
                    VKM.app.globals.loginWindow.close();
                    VKM.app.globals.loginWindow=null;
                }
                else
                {


                    var MB = Ext.MessageBox;
                    Ext.apply(MB, {
                        YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
                        NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
                    });
                    Ext.apply(MB, {
                        YESNO: [MB.NO, MB.YES]
                    });

                    Ext.Msg.confirm(ux.locale.Manager.get('labels.exit'), "", function(e){
                        if(e == 'yes'){

                                tizen.application.getCurrentApplication().exit();

                        }
                    })

                }
            }

        });

        this.globals={};
        this.globals.staticWords={};
        //this.emoji();
        //var keys = Object.keys(VKM.app.globals.EMOJI_MAP);
        // keys.sort(function (a, b) {
        //     return b.length - a.length;
        // });
        //this.globals.emotionsRegexp = new RegExp('(' + keys.join('|') + ')', 'g');
        this.globals.emotionsRegexp = /([\uE000-\uF8FF\u270A-\u2764\u2122\u25C0\u25FB-\u25FE\u2615\u263a\u2648-\u2653\u2660-\u2668\u267B\u267F\u2693\u261d\u26A0-\u26FA\u2708]|\uD83C[\uDC00-\uDFFF]|[\u2600\u26C4\u26BE\u23F3\u2764]|\uD83D[\uDC00-\uDFFF]|\uD83C[\uDDE8-\uDDFA]\uD83C[\uDDEA-\uDDFA]|[0-9]\u20e3)/g,
        //var pattern = String.fromCharCode(0xD83D,0xDE26) + '|' + String.fromCharCode(0xD83D,0xDE04) + '|' + String.fromCharCode(0x2600) + '|' + String.fromCharCode(0x2764) + '|' + String.fromCharCode(0x23F3) + '|' + String.fromCharCode(0x261D) + '|' + String.fromCharCode(0x26BD) + '|' + String.fromCharCode(0x26BE) + '|' + String.fromCharCode(0x26C4) + '|' + String.fromCharCode(0x26C5) + '|' + String.fromCharCode(0x270C) + '|' + String.fromCharCode(0xDF1F) + '|' + String.fromCharCode(0xD83C, 0xDF37) + '|' + String.fromCharCode(0xD83C, 0xDF38) + '|' + String.fromCharCode(0xD83C, 0xDF39) + '|' + String.fromCharCode(0xD83C, 0xDF3A) + '|' + String.fromCharCode(0xD83C, 0xDF3B) + '|' + String.fromCharCode(0xD83C, 0xDF3C) + '|' + String.fromCharCode(0xD83C, 0xDF3D) + '|' + String.fromCharCode(0xD83C, 0xDF45) + '|' + String.fromCharCode(0xD83C, 0xDF46) + '|' + String.fromCharCode(0xD83C, 0xDF49) + '|' + String.fromCharCode(0xD83C, 0xDF4A) + '|' + String.fromCharCode(0xD83C, 0xDF4B) + '|' + String.fromCharCode(0xD83C, 0xDF4C) + '|' + String.fromCharCode(0xD83C, 0xDF4D) + '|' + String.fromCharCode(0xD83C, 0xDF4E) + '|' + String.fromCharCode(0xD83C, 0xDF4F) + '|' + String.fromCharCode(0xD83C, 0xDF50) + '|' + String.fromCharCode(0xD83C, 0xDF51) + '|' + String.fromCharCode(0xD83C, 0xDF52) + '|' + String.fromCharCode(0xD83C, 0xDF53) + '|' + String.fromCharCode(0xD83C, 0xDF54) + '|' + String.fromCharCode(0xD83C, 0xDF55) + '|' + String.fromCharCode(0xD83C, 0xDF56) + '|' + String.fromCharCode(0xD83C, 0xDF57) + '|' + String.fromCharCode(0xD83C, 0xDF69) + '|' + String.fromCharCode(0xD83C, 0xDF6D) + '|' + String.fromCharCode(0xD83C, 0xDF7A) + '|' + String.fromCharCode(0xD83C, 0xDF7B) + '|' + String.fromCharCode(0xD83C, 0xDF81) + '|' + String.fromCharCode(0xD83C, 0xDF82) + '|' + String.fromCharCode(0xD83C, 0xDF83) + '|' + String.fromCharCode(0xD83C, 0xDF84) + '|' + String.fromCharCode(0xD83C, 0xDFAA) + '|' + String.fromCharCode(0xD83C, 0xDFB1) + '|' + String.fromCharCode(0xD83C, 0xDFB2) + '|' + String.fromCharCode(0xD83C, 0xDFB7) + '|' + String.fromCharCode(0xD83C, 0xDFB8) + '|' + String.fromCharCode(0xD83C, 0xDFBE) + '|' + String.fromCharCode(0xD83C, 0xDFC0) + '|' + String.fromCharCode(0xD83C, 0xDFC1) + '|' + String.fromCharCode(0xD83C, 0xDFC6) + '|' + String.fromCharCode(0xD83C, 0xDFE6) + '|' + String.fromCharCode(0xD83D, 0xDC00) + '|' + String.fromCharCode(0xD83D, 0xDC03) + '|' + String.fromCharCode(0xD83D, 0xDC05) + '|' + String.fromCharCode(0xD83D, 0xDC0C) + '|' + String.fromCharCode(0xD83D, 0xDC0E) + '|' + String.fromCharCode(0xD83D, 0xDC0F) + '|' + String.fromCharCode(0xD83D, 0xDC11) + '|' + String.fromCharCode(0xD83D, 0xDC13) + '|' + String.fromCharCode(0xD83D, 0xDC14) + '|' + String.fromCharCode(0xD83D, 0xDC18) + '|' + String.fromCharCode(0xD83D, 0xDC1B) + '|' + String.fromCharCode(0xD83D, 0xDC1C) + '|' + String.fromCharCode(0xD83D, 0xDC1D) + '|' + String.fromCharCode(0xD83D, 0xDC1F) + '|' + String.fromCharCode(0xD83D, 0xDC23) + '|' + String.fromCharCode(0xD83D, 0xDC24) + '|' + String.fromCharCode(0xD83D, 0xDC2A) + '|' + String.fromCharCode(0xD83D, 0xDC2B) + '|' + String.fromCharCode(0xD83D, 0xDC2C) + '|' + String.fromCharCode(0xD83D, 0xDC2D) + '|' + String.fromCharCode(0xD83D, 0xDC2E) + '|' + String.fromCharCode(0xD83D, 0xDC2F) + '|' + String.fromCharCode(0xD83D, 0xDC31) + '|' + String.fromCharCode(0xD83D, 0xDC36) + '|' + String.fromCharCode(0xD83D, 0xDC37) + '|' + String.fromCharCode(0xD83D, 0xDC3A) + '|' + String.fromCharCode(0xD83D, 0xDC3B) + '|' + String.fromCharCode(0xD83D, 0xDC3C) + '|' + String.fromCharCode(0xD83D, 0xDC3D) + '|' + String.fromCharCode(0xD83D, 0xDC40) + '|' + String.fromCharCode(0xD83D, 0xDC42) + '|' + String.fromCharCode(0xD83D, 0xDC43) + '|' + String.fromCharCode(0xD83D, 0xDC46) + '|' + String.fromCharCode(0xD83D, 0xDC47) + '|' + String.fromCharCode(0xD83D, 0xDC48) + '|' + String.fromCharCode(0xD83D, 0xDC4C) + '|' + String.fromCharCode(0xD83D, 0xDC4D) + '|' + String.fromCharCode(0xD83D, 0xDC4E) + '|' + String.fromCharCode(0xD83D, 0xDC51) + '|' + String.fromCharCode(0xD83D, 0xDC5C) + '|' + String.fromCharCode(0xD83D, 0xDC60) + '|' + String.fromCharCode(0xD83D, 0xDC7B) + '|' + String.fromCharCode(0xD83D, 0xDC94) + '|' + String.fromCharCode(0xD83D, 0xDCA1) + '|' + String.fromCharCode(0xD83D, 0xDCA3) + '|' + String.fromCharCode(0xD83D, 0xDCAA) + '|' + String.fromCharCode(0xD83D, 0xDCAC) + '|' + String.fromCharCode(0xD83D, 0xDCAD) + '|' + String.fromCharCode(0xD83D, 0xDD14) + '|' + String.fromCharCode(0xD83D, 0xDD25) + '|' + String.fromCharCode(0xD83D, 0xDE03) + '|' + String.fromCharCode(0xD83D, 0xDE06) + '|' + String.fromCharCode(0xD83D, 0xDE07) + '|' + String.fromCharCode(0xD83D, 0xDE08) + '|' + String.fromCharCode(0xD83D, 0xDE09) + '|' + String.fromCharCode(0xD83D, 0xDE0A) + '|' + String.fromCharCode(0xD83D, 0xDE0B) + '|' + String.fromCharCode(0xD83D, 0xDE0C) + '|' + String.fromCharCode(0xD83D, 0xDE0D) + '|' + String.fromCharCode(0xD83D, 0xDE0E) + '|' + String.fromCharCode(0xD83D, 0xDE0F) + '|' + String.fromCharCode(0xD83D, 0xDE10) + '|' + String.fromCharCode(0xD83D, 0xDE12) + '|' + String.fromCharCode(0xD83D, 0xDE14) + '|' + String.fromCharCode(0xD83D, 0xDE1A) + '|' + String.fromCharCode(0xD83D, 0xDE1C) + '|' + String.fromCharCode(0xD83D, 0xDE20) + '|' + String.fromCharCode(0xD83D, 0xDE21) + '|' + String.fromCharCode(0xD83D, 0xDE22) + '|' + String.fromCharCode(0xD83D, 0xDE28) + '|' + String.fromCharCode(0xD83D, 0xDE29) + '|' + String.fromCharCode(0xD83D, 0xDE2D) + '|' + String.fromCharCode(0xD83D, 0xDE30) + '|' + String.fromCharCode(0xD83D, 0xDE32) + '|' + String.fromCharCode(0xD83D, 0xDE33) + '|' + String.fromCharCode(0xD83D, 0xDE37);
        //this.globals.emotionsRegexp = new RegExp(pattern,'g');
        this.initLocales();
        this.overrides();


        var setingsStore=Ext.getStore('settings');
        this.initParams();
        this.globals.language=this.globals.settings.language;
        if (!this.globals.language||this.globals.language=='autoDetect')
        {
            this.globals.language=navigator.language ? navigator.language.split('-')[0] : navigator.userLanguage.split('-')[0];
        };
        //this.globals.language='en';
        if(!this.globals.language||!(this.globals.language=='ru'||this.globals.language=='en'))
        {
            this.globals.language='ru';
        };
        ux.locale.Manager.setConfig({
            ajaxConfig : {
                method : 'GET'
            },
            language   : VKM.app.globals.language,
            tpl        : 'locales/en.json',
            type       : 'ajax',
            localesArray      : VKM.app.globals.locales
        });
        ux.locale.Manager.init();
        moment.lang(VKM.app.globals.language);

        VKM.app.globals.uploadFiles=[];

        this.globals.notificationAudio={};
        for (var i=1;i<21;i++)
        {

            this.globals.notificationAudio[i] = Ext.create("Ext.Audio",{
                xtype: 'audio',
                url  : 'resources/sounds/'+i+'.m4a',
                loop : false,
                enableControls: false
            });
        }

        VKM.app.globals.lastTime=Ext.DateExtras.now();
        this.initSelections();
        Ext.getStore('Config').load();


    },

    SimpleNotification: function(title, message, icon) {
        console.log(title);
        if(tizen)
        try {
            console.log(message);
        //     var appControl = new tizen.ApplicationService("http://tizen.org/appcontrol/operation/create_content", null, "image/jpg", null);
        //     this.notificationDict = {
        //         content : message,
        //         appControl : appControl
        //     };
        //     this.notification = new tizen.StatusNotification("SIMPLE", title, this.notificationDict);
            var currentApp = tizen.application.getCurrentApplication();
            var iconPath=currentApp.appInfo.iconPath;
            console.log(iconPath);

            var N = new tizen.StatusNotification("SIMPLE", title,
                                                 {"content": message,"iconPath":iconPath});
            tizen.notification.post(N);
            //setTimeout(function(){
                tizen.notification.remove(N.id)
            //},1000);

        } catch (err) {

             console.log(err.name + ": " + err.message);
        }
    },

    startApp: function() {
        VKM.app.SimpleNotification.prototype.displayNotification = function() {
        	try {
        		tizen.notification.post(this.notification);
        	} catch (err) {
        		tizen.logger.error(err.name + ": " + err.message);
        	};
        };

        /**
         * Updates the notification with a new message and displays it.
         *
         * @param message {String} notification will display this new message
         */
        VKM.app.SimpleNotification.prototype.updateNotificationMessage = function(message) {
        	try {
        		this.notification.content = message;
        		tizen.notification.update(this.notification);
        	} catch (err) {
        		tizen.logger.error(err.name + ": " + err.message);
        	}
        };



        var settingsStore=Ext.getStore('settings');
        settingsStore.load();
        VKM.app.overrides();

        VKM.app.globals.scrollToEndTask = Ext.create('Ext.util.DelayedTask',
             function() {
                 activeItem=Ext.ComponentQuery.query("#chatList")[0];
                 if (!activeItem.doNotScroll)
                 {
                     var scroller = activeItem.getScrollable().getScroller();
                     scroller.scrollToEnd();
                 }
             }
        );

        VKM.app.globals.setChatTyping = Ext.create('Ext.util.DelayedTask',
                                                   function() {
                                                       var dataController=VKM.app.getController('DataLoader');
                                                       var url='https://api.vk.com/method/messages.setActivity';
                                                       if(VKM.app.globals.chat)
                                                       {
                                                           var params=
                                                               {
                                                                   v:'5.4',
                                                                   uid:VKM.app.globals.chat.currentUserId,
                                                                   chat_id:VKM.app.globals.chat.currentChatId,
                                                                   access_token:VKM.app.globals.authData['access_token'],
                                                                   type:"typing"
                                                               };
                                                           dataController.go(url,params);
                                                       }

             }
        );

        if (!VKM.app.globals.authData)
        {
            VKM.app.globals.authData={};
        }
        var value=settingsStore.getById('access_token');
        if(value)
        {
            VKM.app.globals.authData.access_token=value.get('value');
        };

        value=settingsStore.getById('user_id');
        if(value)
        {
            VKM.app.globals.authData.user_id=value.get('value');
        };
        value=settingsStore.getById('expires_in');
        if(value)
        {
            VKM.app.globals.authData.expires_in=value.get('value');
        };
        value=settingsStore.getById('expiresTime');
        if(value)
        {
            VKM.app.globals.authData.expiresTime=value.get('value');
        };

        // VKM.app.globals.authData={
        // _id: "authData",
        // access_token: "c67a29c1650da9300a6a5fd735acb6c4d48768d04b1ca84800c1ef56b79d50702dec129b7efa498a9e8a8",
        // expiresTime: 1387448710671,
        // expires_in: "86400",
        // user_id: "6831931"
        // }

        if (VKM.app.globals.authData.access_token&&VKM.app.globals.authData.expiresTime)
        {
            var currTime=Ext.DateExtras.now();
            var expireTime=parseInt(VKM.app.globals.authData.expiresTime);
            if (currTime+100<expireTime)
            {
                VKM.app.getController('Login').go();
            }
            else
            {
                Ext.create('VKM.view.FirstScreen', {fullscreen: true});
            }

        }
        else
        {
            Ext.create('VKM.view.FirstScreen', {fullscreen: true});
        }




    },

    smiles: function(messageBody, local) {
        path='http://vk.com/images/emoji/';
        if(local)
        {
            path='resources/images/emoji16/';
        }
        //+(window.devicePixelRatio >= 2 ? '_2x' : '')+
        var emojiRegEx= /([\uE000-\uF8FF\u270A-\u2764\u2122\u25C0\u25FB-\u25FE\u2615\u263a\u2648-\u2653\u2660-\u2668\u267B\u267F\u2693\u261d\u26A0-\u26FA\u2708]|\uD83C[\uDC00-\uDFFF]|[\u2600\u26C4\u26BE\u23F3\u2764]|\uD83D[\uDC00-\uDFFF]|\uD83C[\uDDE8-\uDDFA]\uD83C[\uDDEA-\uDDFA]|[0-9]\u20e3)/g
        var getEmojiHTML= function(code, symbol, enabled) {
              return '<img class="emoji" '+(symbol ? 'alt="'+symbol+'"' : symbol)+' src="'+path+code+'.png" />';

        }
        var emojiToHTML = function(str, replaceSymbols) {

          str = str.replace(/&nbsp;/g, ' ').replace(/<br>/g, "\n");
          var regs = {
            'D83DDE07': /(\s|^)([0OО]:\))([\s\.,]|$)/g,
            'D83DDE09': /(\s|^)(;-\)+)([\s\.,]|$)/g,
            'D83DDE06': /(\s|^)([XХxх]-?D)([\s\.,]|$)/g,
            'D83DDE0E': /(\s|^)(B-\))([\s\.,]|$)/g,
            'D83DDE0C': /(\s|^)(3-\))([\s\.,]|$)/g,
            'D83DDE20': /(\s|^)(&gt;\()([\s\.,]|$)/g,
            'D83DDE30': /(\s|^)(;[oоOО])([\s\.,]|$)/g,
            'D83DDE33': /(\s|^)(8\|)([\s\.,]|$)/g,
            'D83DDE32': /(\s|^)(8-?[oоOО])([\s\.,]|$)/g,
            'D83DDE0D': /(\s|^)(8-\))([\s\.,]|$)/g,
            'D83DDE37': /(\s|^)(:[XХ])([\s\.,]|$)/g,
            'D83DDE28': /(\s|^)(:[oоOО])([\s\.,]|$)/g,
            '2764': /(\s|^)(&lt;3)([\s\.,]|$)/g
          };
          for (var code in regs) {
            str = str.replace(regs[code], function(match, pre, smile, space) {
              return (pre || '') + getEmojiHTML(code)+(space || '');
            });
          }
          var regs = {
            'D83DDE0A': /(:-\))([\s\.,]|$)/g,
            'D83DDE03': /(:-D)([\s\.,]|$)/g,
            'D83DDE1C': /(;-[PР])([\s\.,]|$)/g,
            'D83DDE0B': /(:-[pр])([\s\.,]|$)/g,
            'D83DDE12': /(:-\()([\s\.,]|$)/g,
            'D83DDE0F': /(:-?\])([\s\.,]|$)/g,
            'D83DDE14': /(3-?\()([\s\.,]|$)/g,
            'D83DDE22': /(:&#039;\()([\s\.,]|$)/g,
            'D83DDE2D': /(:_\()([\s\.,]|$)/g,
            'D83DDE29': /(:\(\()([\s\.,]|$)/g,
            //'D83DDE15': /(:\\)([\s\.,]|$)/g,
            'D83DDE10': /(:\|)([\s\.,]|$)/g,
            'D83DDE21': /(&gt;\(\()([\s\.,]|$)/g,
            'D83DDE1A': /(:-\*)([\s\.,]|$)/g,
            'D83DDE08': /(\}:\))([\s\.,]|$)/g,
            'D83DDC4D': /(:like:)([\s\.,]|$)/g,
            'D83DDC4E': /(:dislike:)([\s\.,]|$)/g,
            '261D': /(:up:)([\s\.,]|$)/g,
            '270C': /(:v:)([\s\.,]|$)/g,
            'D83DDC4C': /(:ok:|:ок:)([\s\.,]|$)/g
          };
          for (var code in regs) {
            str = str.replace(regs[code], function(match, smile, space) {
              return getEmojiHTML(code)+(space || '');
            });
          }

          str = str.replace(/\n/g, '<br>');
          if (replaceSymbols) {
            str = str.replace(emojiRegEx, emojiReplace).replace(/\uFE0F/g, '');
          }

          return str;
        }
        var flagSymbol=null;
        var emojiReplace= function(symbol) {
          var i = 0;
          var code = '', num;
          while(num = symbol.charCodeAt(i++)) {
            if (i == 2 && num == 8419) {
              code = '003'+symbol.charAt(0)+'20E3';
              break;
            }
            code += num.toString(16);
          }
         if (symbol.match(/[\uDDE7-\uDDFA]/)) {
             if (flagSymbol)
             {
                 code = flagSymbol + code;
                 flagSymbol = false;
             }
             else
             {
                 flagSymbol = code;
                 return '';
             }
         }
          code = code.toUpperCase();
          return getEmojiHTML(code, symbol, true);
        }



        var messageBody1=messageBody.replace(emojiRegEx, emojiReplace).replace(/\uFE0F/g, '');

        //     var messageBody1=messageBody.replace(VKM.app.globals.emotionsRegexp,function(str)
        //                                 {
        //                                     var code=''
        //                                     if (str.length==1)
        //                                     {
        //                                         code=str.charCodeAt(0).toString(16).toUpperCase();
        //                                     }
        //                                     else
        //                                     {
        //                                         code=str.charCodeAt(0).toString(16).toUpperCase()+str.charCodeAt(1).toString(16).toUpperCase();
        //                                     }
        //                                     return "<img src='http://vk.com/images/emoji/"+code+".png'></img>"

        //                                 }
        //                                );
        return messageBody1;

    },

    initLocales: function() {
        VKM.app.globals.locales={};
        VKM.app.globals.locales['ru']={
        	"labels":
        	{
                "important": " Важные",
        		"notImportant": "",
                "lastvisit":"Последний визит",
        		"Login": "Войти через VK",
                "clearfilter": "Очистить фильтр?",
        		"Signup": "Зарегистрироваться",
                "uploaddoc":"Загрузить из телефона",
                "chooseexistingdoc":"Выбрать из библиотеки",
                "friendrecommended":"Возможные друзья",
                "friendrequests":" Заявки в друзья",
        		"youcanmessage" : "Вы сможете бесплатно обмениваться мгновенными сообщениями с друзьями",
        		"Messages":"Сообщения",
        		"Dialogues":"Диалоги",
        		"Inbox":"Входящие",
        		"Sent":"Отправленные",
        		"Search":"Поиск",
        		"Loadingmessages":"Сообщения загружаются..",
        		"Nomessagesyet":"Сообщений пока нет",
        		"Back":"Назад",
        		"Online":"Онлайн",
        		"writeamessage":"Написать сообщение",
        		"Send":"Отпр.",
        		"wasOn":"был в сети",
        		"ago":"назад",
        		"Uploading attachments":"Вложения загружаются..",
        		"Remove attachment":"Удалить вложение",
        		"Error uploading":"Ошибка загрузки",
        		"Message was not sent":"Сообщение не удалось отправить.",
        		"Try again":"Повторить попытку",
        		"Forward":"Переслать",
        		"Delete":"Удалить",
                "DeleteConfirm":"Подтверждение удаления",
        		"takephoto":"Сделать снимок с камеры",
        		"uploadphoto":"Загрузить из телефона",
                "chooseexistingphoto":"Выбрать фото из галереи",
                "takesound":"Записать с микрофона",
        		"uploadsound":"Загрузить из телефона",
                "chooseexistingsound":"Выбрать из библиотеки",
                "Loading":"Загрузка...",
        		"Share location":"Прикрепить местоположение",
        		"members":"Участники",
                "leavechat":"Покинуть беседу",
        		"Change chat":"Изменить название беседы",
        		"addChatUser":"Добавить собеседника",
        		"is typing...":"набирает сообщение...",
        		"Photo":"Фотография",
        		"Map":"Карта",
        		"Video":"Видеозапись",
        		"Audio":"Аудиозапись",
        		"Document":"Документ",
        		"Forwarded message":"Пересланное сообщение",
        		"Allfriends":"Друзья ВК",
        		"Online":"Онлайн",
        		"Contacts":"Контакты",
        		"Sync contacts":"Синхронизировать контакты",
        		"SyncWithFriends":"Вы можете синхронизировать список друзей VK с записной книжкой Вашего телефона",
        		"Call":"Позвонить на",
        		"Send a message":"Отправить сообщение",
        		"Send invitation":"Выслать приглашение",
        		"unregisteredYet":"Пользователь ещё не зарегистрирован. Вы можете отправить ему приглашение",
        		"Requests":"Заявки",
        		"Friend requests":"Заявки в друзья",
        		"People you may know":"Возможные друзья",
        		"SearchFriends":"Вы можете искать своих друзей и знакомых среди всех пользователей",
        		"Addfriend":"Добавить в друзья",
        		"Decline request":"Отклонить заявку",
                "Deleterequest":"Отклонить заявку",
        		"Deletefriend":"Удалить из друзей",
        		"Settings":"Настройки",
        		"Change photo":"Изменить фотографию",
        		"In-app notifications":"Оповещения в приложении",
        		"Vibrate":"Вибрация",
        		"Sound":"Звук",
                "Cancel":"Отмена",
        		"Banner":"Всплывающая строка",
        		"DisableSound":"Отключить звуковые уведомления на",
                "DeleteQ":"Удалить вложение?",
                "Yes":"Да",
                "No":"Нет",
                "compressInUpload":"Сжимать при загрузке",
                "photoUpload":"Обработка фотографий",
                "notshow":"Нет",
                "name":"Название",
                "logout":"Выход",
                "mutualFriends":"Общие друзья",
                "noMutualFriends":"Общих друзей нет",
                'friendSubscribers':' Подписчики',
                "loadmore":"загрузить ещё...",
                "needrestart":"Изменения вступят в силу при следующем запуске",
                "impossible":"К сожалению, текущая версия Tizen не можеть воспроизводить VK видео",
                "customProps":"Индивидуальные настройки",
                "newMessage":'Новые сообщения',
                "sound":"Звук",
                "banner":"Баннер",
                "vibrate":"Вибрация",
                "defaultLanguage":"Язык",
                "deletepersonalsettings":"Очистить персональные настройки",
                "pagesize":"Загружать за раз(строчек)",
                "dialogues_":"Диалоги",
                "chat_":"Чат",
                "messages_":"Сообщения",
                "friends_":"Друзья/запросы",
                "silenceMode":"Режим 'Не беспокоить'",
                "pdfViewer":"Просмотрщик PDF",
                "internal":"Встроенный",
                "none":"Нет",
                "google":"Google Docs Viewer",
                "diconnectVkId":"Удалить привязку",
                "connectVkId":"Связать с другом ВК",
                "friendsMode":"Режим показа друзей",
                "short":"Сжатый",
                "detailed":"Подробный",
                "chatselection":"Выделение в чате",
                "doubleClick":"Двойной щелчёк",
                "longClick":"Удержание",
                "clickMode":"Для выделения сообщений используется двойной тап. Это сообщение больше показано не будет.",
                "importContacts":"Синхронизировать контакты",
                "importContactsMessage":"Вы можете синхронизировать список друзей VK с записной книжкой Вашего телефона. Сделать это сейчас?",
                "notification":"Уведомление",
                "importContactsResult":"Список контактов отправлен. Результат будет виден при на вкладке 'Поиск друзей'",
                "done":"готово",
                "exit":"Выйти из программы?",
                "sendSMS":"Отправить СМС на ",
        		"sendinvitation":"Выслать приглашение",
                "invitationText":" приглашает Вас присоединиться к социальной сети 'Вконтакте' на http://vk.com .",
                "invitationSubject": "Приглашение на vk.com",
                'pullText':'Потяните для обновления...',
                'loadingText':'Загрузка...',
                'loadedText':'Loaded',
                'lastUpdatedText':'Последнее обновление:&nbsp;',
                'releaseText':'Отпустите для обновления...',

                'messagelooks':'Вот как это выглядит',
        		"unregisteredYet":"Пользователь ещё не зарегистрирован. Вы можете отправить ему приглашение.",
                "DeleteSettingsConfirm":"Индивидуальные настройки уведомлений для друзей и диалогов будут удалены и заменены на настройки по-умолчанию",
                "DeleteMessagesConfirm":"Вы действительно хотите очистить историю сообщений? Отменить это действие будет невозможно"


        	},
            "languages":{
                "russian":"Русский",
                "english":"English",
                "autoDetect":"Автоопределение"
            },
            "months" : {
                "1"  : "Январь",
                "2"  : "Февраль",
                "3"  : "March",
                "4"  : "April",
                "5"  : "May",
                "6"  : "June",
                "7"  : "July",
                "8"  : "August",
                "9"  : "September",
                "10" : "October",
                "11" : "November",
                "12" : "December"
            },
        	"time":{
        		ago: 'назад',
        		from: '',
        		now: 'Только что',
        		minute: 'Минута',
        		minutes: 'Минут',
        		hour: 'Час',
        		hours: 'Часов',
        		day: 'День',
        		days: 'Дней',
        		week: 'Неделя',
        		weeks: 'Недель',
        		month: 'Месяц',
        		months: 'Месяцев',
        		year: 'Год',
        		years: 'Лет'
        	}
        };
        VKM.app.globals.locales['en']={
        	"labels":
        	{
        		"Login":"Login",
                "name":"Name",
                "lastvisit":"Last visit",
                "important": " Important",
        		"notImportant": "",
                "friendrecommended":"People you may know",
                "friendrequests":"Friend requests",
                "clearfilter": "Delete the filter?",
        		"Signup":"Signup",
        		"youcanmessage" : "For fast, free and convenient messaging with friends and contacts" ,
        		"Messages":"Messages",
        		"Inbox":"Inbox",
        		"Sent":"Sent",
                'pullText':'Pull down to refresh...',
                'loadingText':'Loading...',
                'loadedText':'Loaded',
                'lastUpdatedText':'Last Updated:&nbsp;',
                'releaseText':'Release to refresh...',
                "Cancel":"Cancel",
                "DeleteConfirm":"Delete confirmation",
        		"Dialogues":"Dialogues",
        		"Search":"Search",
                "Loading":"Loading...",
        		"Loadingmessages":"Loading messages..",
        		"Nomessagesyet":"No messages yet",
        		"Back":"Back",
        		"Online":"Online",
        		"writeamessage":"Write a message",
        		"Send":"Send",
        		"wasOn":"wasOn",
        		"ago":"ago",
        		"Uploading attachments":"Uploading attachments..",
        		"Remove attachment":"Remove attachment",
        		"Error uploading":"Error uploading",
        		"Message was not sent":"Message was not sent",
        		"Try again":"Try again",
        		"Forward":"Forward",
        		"Delete":"Delete",
        		"Take photo":"Take photo",
        		"Choose existing photo":"Choose existing photo",
        		"Share location":"Share location",
        		"members":"members",
        		"Change chat":"Change chat",
        		"addChatUser":"Add person",
        		"is typing...":"is typing...",
        		"Photo":"Photo",
        		"Map":"Map",
        		"Video":"Video",
        		"Audio":"Audio",
        		"Document":"Document",
        		"Forwarded message":"Forwarded message",
        		"Allfriends":"VK friends",
        		"Online":"Online",
        		"Contacts":"Contacts",
        		"Sync contacts":"Sync contacts",
        		"SyncWithFriends": "Sync your phone contacts with your VK friends list",
        		"Call":"Call",
        		"Requests":"Requests",
        		"Friend requests":"Friend requests",
        		"People you may know":"People you may know",
        		"SearchFriends":"Search for your friends and contacts among all registered users",
        		"Addfriend":"Add friend",
        		"Decline request":"Decline request",
                "Deleterequest":"Decline request",
        		"Deletefriend":"Delete friend",
        		"Settings":"Settings",
        		"Change photo":"Change photo",
        		"In-app notifications":"In-app notifications",
                "DeleteQ":"Remove the attachment?",
                "Yes":"Yes",
                "No":"No",
                "defaultLanguage":"Language",
                "compressInUpload":"Compress",
                "photoUpload":"Photos",
                "notshow":"None",
                "logout":"Logout and exit",
                'friendSubscribers':' Subscribers',
                "members":"Members",
                "leavechat":"Leave the chat",
                "takephoto":"Take a photo",
        		"uploadphoto":"Upload from the phone",
                "chooseexistingphoto":"Choose existing photo",
                "takesound":"Record via microphone",
        		"uploadsound":"Upload from the phone",
                "chooseexistingsound":"Choose existing media",
        		"uploaddoc":"Upload from the phone",
                "chooseexistingdoc":"Choose existing document",
                "loadmore":"load more...",
                "mutualFriends":"Mutual friends",
                "noMutualFriends":"No mutual friends",
                "needrestart":"Language will be changed after restart.",
                "impossible":"Unfortunatly, current version of Tizen can not play VK video",

                "newMessage":'New messages',
                "customProps":"Custom settings",
                "Vibrate":"Vibrate",
                "Sound":"Sound",
                "Banner":"Banner",
                "vibrate":"Вибрация",
        		"sound":"Звук",
                "banner":"Banner",
                "DisableSound":"DisableSound",
                "notification":"Notifications",
                "deletepersonalsettings":"Delete custom friends's settings",
                "pagesize":"Page size",
                "dialogues_":"Dialogues",
                "chat_":"Chat",
                "messages_":"Messages",
                "friends_":"Friends/Requests",
                "done":"Done",
                "silenceMode":"Do not disturb",
                "pdfViewer":"PDF viewer",
                "internal":"Embedded",
                "google":"Google Docs Viewer",
                "friendsMode":"Friends view mode",
                "short":"Short",
                "detailed":"Full",
                "chatselection":"Chat selection",
                "doubleClick":"Double Tap",
                "longClick":"Long Tap",
                "clickMode":"Для выделения сообщений используется двойной тап. Это сообщение больше показано не будет.",
                "importContacts":"Sync contacts",
                "importContactsMessage":"You can sync your phone contacts with your VK friends list. Do it now?",
                "importContactsResult":"Список контактов отправлен. Результат будет виден при на вкладке 'Поиск друзей'",
                "sendSMS":"Text to",
                "diconnectVkId":"Delete connection",
                "connectVkId":"Connect to VK friend",
                "invitationSubject": "Invitation to vk.com",
                "none":"None",
        		"sendinvitation":"Send invitation",
                "exit":"Exit?",
        		"unregisteredYet":"User is not registred yet. You can send an invitation.",
                'messagelooks':'This is how it looks',
                "invitationText":" invites you to join to social network 'Vkontakte' at http://vk.com .",
                "DeleteSettingsConfirm":"Custom notification settings for friends and chats will be deleted and default settings will be restored",
                "DeleteMessagesConfirm":"You are going to delete all messages in this chat. This operation can't be undone."
        	},
            "languages":{
                "russian":"Русский",
                "english":"English",
                "autoDetect":"Autodetect"
        	},

            "months" : {
                "1"  : "Январь",
                "2"  : "Февраль",
                "3"  : "March",
                "4"  : "April",
                "5"  : "May",
                "6"  : "June",
                "7"  : "July",
                "8"  : "August",
                "9"  : "September",
                "10" : "October",
                "11" : "November",
                "12" : "December"
            },
        	"time":{
        		ago: 'Ago',
        		from: '',
        		now: 'Just Now',
        		minute: 'Minute',
        		minutes: 'Minutes',
        		hour: 'Hour',
        		hours: 'Hours',
        		day: 'Day',
        		days: 'Days',
        		week: 'Week',
        		weeks: 'Weeks',
        		month: 'Month',
        		months: 'Months',
        		year: 'Year',
        		years: 'Years'
        	}
        };



        VKM.app.globals.docIcons={'AC3':true,
        'ACE':true,
        'ADE':true,
        'ADP':true,
        'AI':true,
        'AIFF':true,
        'AU':true,
        'AVI':true,
        'BAT':true,
        'BIN':true,
        'BMP':true,
        'BUP':true,
        'CAB':true,
        'CAT':true,
        'CHM':true,
        'CSS':true,
        'CUE':true,
        'DAT':true,
        'DCR':true,
        'Default':true,
        'DER':true,
        'DIC':true,
        'DIVX':true,
        'DIZ':true,
        'DLL':true,
        'DOC':true,
        'DOCX':true,
        'DOS':true,
        'DVD':true,
        'DWG':true,
        'DWT':true,
        'EMF':true,
        'EXC':true,
        'FON':true,
        'GIF':true,
        'HLP':true,
        'HTML':true,
        'IFO':true,
        'INF':true,
        'INI':true,
        'INS':true,
        'IP':true,
        'ISO':true,
        'ISP':true,
        'JAVA':true,
        'JFIF':true,
        'JPEG':true,
        'JPG':true,
        'LOG':true,
        'M4A':true,
        'MID':true,
        'MMF':true,
        'MMM':true,
        'MOV':true,
        'MOVIE':true,
        'MP2':true,
        'MP2V':true,
        'MP3':true,
        'MP4':true,
        'MPE':true,
        'MPEG':true,
        'MPG':true,
        'MPV2':true,
        'NFO':true,
        'PDD':true,
        'PDF':true,
        'PHP':true,
        'PNG':true,
        'PPT':true,
        'PPTX':true,
        'preview':true,
        'PSD':true,
        'RAR':true,
        'REG':true,
        'RTF':true,
        'SCP':true,
        'THEME':true,
        'TIF':true,
        'TIFF':true,
        'TLB':true,
        'TTF':true,
        'TXT':true,
        'UIS':true,
        'URL':true,
        'VBS':true,
        'VCR':true,
        'VOB':true,
        'WAV':true,
        'WBA':true,
        'WMA':true,
        'WMV':true,
        'WPL':true,
        'WRI':true,
        'WTX':true,
        'xls':true,
        'XLSX':true,
        'XML':true,
        'XSL':true,
        'ZAP':true,
        'ZIP':true
        };


    },

    s4: function() {
        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    },

    uuid: function() {
        return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' +
            this.s4() + '-' + this.s4() + this.s4() + this.s4();

    },

    initParams: function() {
        VKM.app.globals.needRefresh={};
        VKM.app.globals.messageIds=[];
        var settingsStore=Ext.getStore('settings');
        var newMessageSoundRecord=settingsStore.getById('newMessageSound');
        if(!newMessageSoundRecord)
        {
                newMessageSoundRecord=new VKM.model.localConfig({id:'newMessageSound',value:1});
                settingsStore.add(newMessageSoundRecord);
                newMessageSoundRecord.save();
        };
        var newMessageVibrateRecord=settingsStore.getById('newMessageVibrate');
        if(!newMessageVibrateRecord)
        {
                newMessageVibrateRecord=new VKM.model.localConfig({id:'newMessageVibrate',value:1});
                settingsStore.add(newMessageVibrateRecord);
                newMessageVibrateRecord.save();
        };
        var newMessageNotificationRecord=settingsStore.getById('newMessageNotification');
        if(!newMessageNotificationRecord)
        {
                newMessageNotificationRecord=new VKM.model.localConfig({id:'newMessageNotification',value:1});
                settingsStore.add(newMessageNotificationRecord);
                newMessageNotificationRecord.save();
        };
        var globalSilenceMode=settingsStore.getById('globalSilenceMode');
        if(!globalSilenceMode)
        {
                globalSilenceMode=new VKM.model.localConfig({id:'globalSilenceMode',value:0});
                settingsStore.add(globalSilenceMode);
                globalSilenceMode.save();
        };
        var languageRecord=settingsStore.getById('language');
        if(!languageRecord)
        {
                languageRecord=new VKM.model.localConfig({id:'language',value:'autoDetect'});
                settingsStore.add(languageRecord);
                languageRecord.save();
        };



        var dialoguesPageSize=settingsStore.getById('dialoguesPageSize');
        if(!dialoguesPageSize)
        {
                var dialoguesPageSize=new VKM.model.localConfig({id:'dialoguesPageSize',value:20});
                settingsStore.add(dialoguesPageSize);
                dialoguesPageSize.save();
        };

        var chatPageSize=settingsStore.getById('chatPageSize');
        if(!chatPageSize)
        {
                var chatPageSize=new VKM.model.localConfig({id:'chatPageSize',value:20});
                settingsStore.add(chatPageSize);
                chatPageSize.save();
        };

        var messagesPageSize=settingsStore.getById('messagesPageSize');
        if(!messagesPageSize)
        {
                var messagesPageSize=new VKM.model.localConfig({id:'messagesPageSize',value:20});
                settingsStore.add(messagesPageSize);
                messagesPageSize.save();
        };

        var friendsPageSize=settingsStore.getById('friendsPageSize');
        if(!friendsPageSize)
        {
                var friendsPageSize=new VKM.model.localConfig({id:'friendsPageSize',value:30});
                settingsStore.add(friendsPageSize);
                friendsPageSize.save();
        };




        VKM.app.globals.settings={
            newMessageSound:newMessageSoundRecord.get('value'),
            newMessageVibrate:newMessageVibrateRecord.get('value'),
            newMessageNotification:newMessageNotificationRecord.get('value'),
            dialoguesPageSize:dialoguesPageSize.get('value'),
            chatPageSize:chatPageSize.get('value'),
            messagesPageSize:messagesPageSize.get('value'),
            friendsPageSize:friendsPageSize.get('value'),

            language:languageRecord.get('value'),
            globalSilenceMode:globalSilenceMode.get('value')
        };

        var value=settingsStore.getById('friendsMode');
        if(value)
        {
            VKM.app.globals.settings.friendsMode=value.get('value');
        }
        else
        {
            VKM.app.globals.settings.friendsMode='detailed';
        }
        ;
        var value=settingsStore.getById('chatSelection');
        if(value)
        {
            VKM.app.globals.settings.chatSelection=value.get('value');
        }
        else
        {
                VKM.app.globals.settings.chatSelection='doubleclick';
        };

        var value=settingsStore.getById('pdfViewerMode');
        if(value)
        {
            VKM.app.globals.settings.pdfViewerMode=value.get('value');
        }
        else
        {
            VKM.app.globals.settings.pdfViewerMode='internal';
        }
            ;

        var value=settingsStore.getById('isPhoneSynched');

        if(!value)
        {
            VKM.app.globals.settings.isPhoneSynched=false;
        }
        else
        {
            VKM.app.globals.settings.isPhoneSynched=1;

        };

        var store=Ext.getStore('AllMessages');
        store.setPageSize(VKM.app.globals.settings.dialoguesPageSize);
        store=Ext.getStore('InboxMessages');
        store.setPageSize(VKM.app.globals.settings.messagesPageSize);
        store=Ext.getStore('Chat');
        store.setPageSize(VKM.app.globals.settings.chatPageSize);
        store=Ext.getStore('Friends');
        store.setPageSize(VKM.app.globals.settings.friendsPageSize);
        var store2=Ext.getStore('FriendRequests');
        var store3=Ext.getStore('FriendSuggestions');
        store2.setPageSize(VKM.app.globals.settings.friendsPageSize);
        store3.setPageSize(VKM.app.globals.settings.friendsPageSize);
    },

    overrides: function() {

    },

    loadProfilePhoto: function() {
        var controller=VKM.app.getController('Contacts');
        var actions= Ext.create('Ext.ActionSheet', {
            items: [
        //         {
        //             text: ux.locale.Manager.get('labels.chooseexistingphoto'),
        //             ui: 'action',
        //             //scope: button,
        //             //iconCls:'photo',
        //             handler: function() {
        //                 actions.hide();
        //                 controller.chooseAlbumDialogue(controller);

        //             }
        //         },
                {
                    text: ux.locale.Manager.get('labels.takephoto'),
                    ui: 'action',
                    //scope: button,
                    //iconCls:'photo',
                    handler: function() {
                        actions.hide();
                        controller.takePhoto(controller);
                    }
                },
                {
                    text: ux.locale.Manager.get('labels.uploadphoto'),
                    ui: 'action',
                   // scope: button,
                    //iconCls:'photo',
                    handler: function() {
                        actions.hide();
                        controller.uploadPhoto(controller);
                    }
                },
                {
                    xtype: 'button',
                    text: ux.locale.Manager.get('labels.Cancel'),
                    ui:'action',
                    iconCls:'delete',
                    //scope: button,
                    handler: function() {
                        actions.hide();
                    }
                }
            ]
        });
        Ext.Viewport.add(actions);
        actions.show();
    },

    loadChatPhoto: function() {
        var controller=VKM.app.getController('Utils');
        var actions= Ext.create('Ext.ActionSheet', {
            items: [
        //         {
        //             text: ux.locale.Manager.get('labels.chooseexistingphoto'),
        //             ui: 'action',
        //             //scope: button,
        //             //iconCls:'photo',
        //             handler: function() {
        //                 actions.hide();
        //                 controller.chooseAlbumDialogue(controller);

        //             }
        //         },
                {
                    text: ux.locale.Manager.get('labels.takephoto'),
                    ui: 'action',
                    //scope: button,
                    //iconCls:'photo',
                    handler: function() {
                        actions.hide();
                        controller.takePhoto(controller);
                    }
                },
                {
                    text: ux.locale.Manager.get('labels.uploadphoto'),
                    ui: 'action',
                   // scope: button,
                    //iconCls:'photo',
                    handler: function() {
                        actions.hide();
                        controller.uploadPhoto(controller);
                    }
                },
                {
                    xtype: 'button',
                    text: ux.locale.Manager.get('labels.Cancel'),
                    ui:'action',
                    iconCls:'delete',
                    //scope: button,
                    handler: function() {
                        actions.hide();
                    }
                }
            ]
        });
        Ext.Viewport.add(actions);
        actions.show();
    },

    emoji: function() {
        var Emoji = {

        opts: {},
        last: 0,
        shownId: false,

            init: function(txt, opts) {
                var optId = Emoji.last;
                opts.txt = txt;
                if (opts.forceTxt) {
                    opts.editable = 0;
                    placeholderSetup(txt);
                } else {
                    opts.editable = 1;
                    setTimeout(function() {
                        placeholderSetup(txt, {editable: 1, editableFocus: Emoji.editableFocus});
                        if (opts.shouldFocus) {
                            Emoji.editableFocus(txt, false, true);
                        }
                    }, 0);
                    if (browser.mozilla) {
                        document.execCommand("enableObjectResizing", false, false);
                        cur.destroy.push(function() {
                            document.execCommand("enableObjectResizing", false, true);
                        })
                    }
                    addEvent(txt, browser.opera ? 'click' : 'mousedown', function(e) {
                        if (e.target && e.target.tagName == 'IMG') {
                            if (Emoji.getCode(e.target)) {
                                Emoji.editableFocus(txt, e.target, e.offsetX > 8);
                                return cancelEvent(e);
                            }
                        }
                        opts.emojiFocused = false;
                    });

                    addEvent(txt, 'keypress keydown keyup paste', function(e) {
                        if (e.type == 'keydown') {
                            if (e.ctrlKey && e.keyCode == KEY.RETURN) {
                                var val = this.value;
                                if (opts.editable) {
                                    Emoji.insertHTML('<div><br/></div>');
                                }
                                return false;
                            }

                        }
                        return true;
                    });
                }


                Emoji.opts[Emoji.last] = opts;
                return Emoji.last++;
            },

            onEditablePaste: function(txt, opts, optId) {
                var range = (browser.chrome || browser.safari || (browser.msie && browser.version > 10)) ? Emoji.getRange() : false;
                if (range) {
                    var textarea = ce('TEXTAREA', {className: 'emoji_tmp_textarea'});
                    txt.parentNode.appendChild(textarea);
                    textarea.focus();
                }
                setTimeout(function(){
                    if (range) {
                        Emoji.setRange(range);
                        var text = val(textarea);
                        re(textarea);
                        if (text) {
                            Emoji.insertHTML(clean(text).replace(/\n/g, '<br/>'));
                        }
                    }
                    Emoji.cleanCont(txt);
                }, 0);
            },

            cleanCont: function(cont) {
                var el = cont.firstChild;
                while (el) {
                    var next = el.nextSibling;
                    switch (el.nodeType) {
                        case 1:
                            if (el.id == 'tmp_paste_cont') break;
                            if (el.tagName == 'DIV' || el.tagName == 'P' || el.tagName == 'SPAN') {
                                el.setAttribute('style', '');
                                el.className = '';
                                el.id = '';
                                Emoji.cleanCont(el);
                            } else if (el.tagName == 'IMG') {
                                if (!Emoji.getCode(el)) {
                                    re(el);
                                }
                            } else if (el.tagName != 'BR' ){
                                var text = Emoji.editableVal(el, {saveEmoji: true});
                                var f = cf(clean(text).replace(/\n/g, '<br/>'));
                                var last = f.lastChild;
                                el.parentNode.replaceChild(f, el);
                                //if (last) {
                                //  Emoji.editableFocus(cont, last, true);
                                //}
                            }
                            break;
                    }
                    el = next;
                }
            },

            editableFocus: function(editable, obj, after) {
                if (!editable) {
                    return false;
                }
                editable.focus();
                if (editable.phonfocus) {
                    editable.phonfocus();
                }
                if (typeof window.getSelection != 'undefined' && typeof document.createRange != 'undefined') {
                    var sel = window.getSelection();
                    if (browser.opera && !after) {
                        sel.collapse(obj || editable, 0);
                    } else {
                        var range = document.createRange();
                        if (obj) {
                            range.selectNode(obj);
                        } else {
                            range.selectNodeContents(editable);
                        }
                        range.collapse(after ? false : true);
                        var sel = window.getSelection();
                        sel.removeAllRanges();
                        sel.addRange(range);
                    }
                } else if (typeof document.body.createTextRange != 'undefined') {
                    var textRange = document.body.createTextRange();
                    textRange.moveToElementText(obj || editable);
                    textRange.collapse(after ? false : true);
                    textRange.select();
                }
            },

            getRange: function() {
                if (window.getSelection) {
                    sel = window.getSelection();
                    if (sel.getRangeAt && sel.rangeCount) {
                        return sel.getRangeAt(0);
                    }
                } else if (document.selection && document.selection.createRange) {
                    return document.selection.createRange();
                }
                return null;
            },

            setRange: function(range) {
                if (window.getSelection) {
                    sel = window.getSelection();
                    sel.removeAllRanges();
                    sel.addRange(range);
                } else if (document.selection && range.select) {
                    range.select();
                }
            },

            editableVal: function(cont, opts) {
                if (!cont) return '';
                if (cont.tagName == 'TEXTAREA') return val(cont);
                var el = cont.firstChild;
                var v = '';
                var contTag = new RegExp('^(DIV|P|LI|OL|TR|TD|BLOCKQUOTE)$');
                while (el) {
                    switch (el.nodeType) {
                        case 3:
                            var str = el.data.replace(/^\n|\n$/g, ' ').replace(/[\n\xa0]/g, ' ').replace(/[ ]+/g, ' ');
                            v += str;
                            break;
                        case 1:
                            var str = Emoji.editableVal(el);
                            if (el.tagName && el.tagName.match(contTag) && str) {
                                if (str.substr(-1) != '\n') {
                                    str += '\n';
                                }

                                var prev = el.previousSibling;
                                while(prev && prev.nodeType == 3 && trim(prev.nodeValue) == '') {
                                    prev = prev.previousSibling;
                                }
                                if (prev && !(prev.tagName && prev.tagName.match(contTag))) {
                                    str = '\n' + str;
                                }

                            } else if (el.tagName == 'IMG') {
                                var code = Emoji.getCode(el);
                                if (code) {
                                    if (opts && opts.saveEmoji) {
                                        str += Emoji.getEmojiHTML(code);
                                    } else {
                                        str += Emoji.codeToChr(code);
                                    }
                                }
                            } else if (el.tagName == 'BR') {
                                str += '\n';
                            }
                            v += str;
                            break;
                    }
                    el = el.nextSibling;
                }
                return v;
            },


            codeToChr: function(code) {
                var len = code.length / 4;
                var chr = '';
                var i = 0;
                while(len--) {
                    chr += String.fromCharCode(parseInt(code.substr(i, 4), 16))
                    i += 4;
                }
                return chr;
            },

            checkEditable: function(optId, obj, options) {
                var scH = obj.scrollHeight;
                var opts = Emoji.opts[optId];
                if (!opts) {
                    return false;
                }
                var bl = opts.tt;
                if (scH > options.height + 10) {
                    if (!opts.isSized) {
                        setStyle(obj, {height: options.height+'px', overflowY: 'auto'});
                        var sm = geByClass1('emoji_smile', opts.controlsCont);
                        var ph = ge('im_upload');
                        var diff = sbWidth();
                        setStyle(sm, vk.rtl ? {left: 1 + diff} : {right: 1 + diff});
                        if (ph) {
                            setStyle(ph.parentNode, vk.rtl ? {left: 1 + diff} : {right: 1 + diff});
                        }
                        if (bl) setStyle(bl, vk.rtl ? {left: (opts.ttDiff || 31) + diff} : {right: (opts.ttDiff || 31) + diff})
                        opts.isSized = true;
                    }
                } else if (opts.isSized) {
                    setStyle(obj, {height: 'auto', overflowY: 'hidden'});
                    var sm = geByClass1('emoji_smile', opts.controlsCont);
                    var ph = ge('im_upload');
                    setStyle(sm, vk.rtl ? {left: 1} : {right: 1});
                    if (ph) {
                        setStyle(ph.parentNode, vk.rtl ? {left: 1}: {right: 1});
                    }
                    if (bl) setStyle(bl, vk.rtl ? {left: (opts.ttDiff || 31)} : {right: (opts.ttDiff || 31)})
                    opts.isSized = false;
                }
            },

            emojiEnter: function(optId, e) {
                var opts = Emoji.opts[optId]
                if (opts.emojiFocused && opts.emojiOvered) {
                    var img = geByTag1('img', opts.emojiOvered);
                    Emoji.addEmoji(optId, Emoji.getCode(img), opts.emojiOvered);
                    opts.emojiFocused = true;
                    Emoji.ttClick(optId, ge((cur.peer == -3) ? 'imw_smile' : 'im_smile'), true);
                    debugLog('canceling');
                    return cancelEvent(e);
                }
                return true;
            },

            insertHTML: function(html) {
                if (browser.msie/* && browser.version < 10*/) {
                    var r = document.selection.createRange();
                    if (r.pasteHTML) {
                        r.pasteHTML(html);
                    }
                } else {
                    document.execCommand('insertHTML', false, html);
                }
            },

            addEmoji: function(optId, code, obj) {
                if (optId === false) {
                    return false;
                }
                var opts = Emoji.opts[optId];
                opts.emojiFocused = false;
                if (opts.editable) {
                    var img = ' '+Emoji.getEmojiHTML(code)+'&nbsp;';
                    var editable = opts.txt;
                    var sel = window.getSelection ? window.getSelection() : false;
                    if (sel && sel.rangeCount) {
                        r = sel.getRangeAt(0);
                        if (r.commonAncestorContainer) {
                            var rCont = r.commonAncestorContainer;
                        } else {
                            var rCont = r.parentElement ? r.parentElement() : r.item(0);
                        }
                    } else {
                        var rCont = false;
                    }
                    el = rCont;
                    while(el && el != editable) {
                        el = el.parentNode;
                    }
                    var edLast = (editable.lastChild || {});
                    if (browser.mozilla && edLast.tagName == 'BR' && !edLast.previousSibling) {
                        re(editable.lastChild);
                    }
                    if (!el) {
                        Emoji.editableFocus(editable, false, true);
                    }
                    Emoji.insertHTML(img);
                    var emojies = geByClass('emoji', editable);
                    emojies.push.apply(emojies, geByClass('emoji_css', editable));
                    for (i in emojies) {
                        var prev = emojies[i].previousSibling;
                        if (prev && prev.nodeType == 3 && prev.textContent && prev.textContent.charCodeAt(0) == 32) {
                            var p = prev.previousSibling;
                            if (p && p.nodeType == 3 && p.textContent && p.textContent.charCodeAt(p.textContent.length - 1) == 160) {
                                re(prev);
                            }
                        }
                    }
                    if (editable.check) editable.check();
                }
            }

        }


    },

    catchBreaks: function(event) {
        //var messageElement=document.getElementById('newMessageText');
        // var selection=window.getSelection();
        // console.log(selection);
        // if (selection.type=="Caret")
        // {
        //     VKM.app.globals.offset = selection.baseOffset;
        // }
        // console.log(VKM.app.globals.offset);

        //console.log(event.keyCode)

        if(event.keyCode==13)
        {

            var node=document.createElement("BR");
            if (typeof window.getSelection != "undefined") {


                if (window.getSelection) {
                    var sel = window.getSelection();
                    if (sel.rangeCount > 0) {
                        var range = sel.getRangeAt(0);
                        var startNode = range.startContainer, startOffset = range.startOffset;
                        var boundaryRange = range.cloneRange();
                        var startTextNode = node;
                        var endTextNode = document.createTextNode('');
                        boundaryRange.collapse(false);
                        boundaryRange.insertNode(endTextNode);
                        boundaryRange.setStart(startNode, startOffset);
                        boundaryRange.collapse(true);
                        boundaryRange.insertNode(startTextNode);

                        // Reselect the original text
                        range.setStartAfter(startTextNode);
                        range.setEndBefore(endTextNode);
                        sel.removeAllRanges();
                        sel.addRange(range);
                    }
                }

            }


            event.preventDefault();
        //     VKM.app.saveSelection();
        //     VKM.app.restoreSelection();
            return false;
        }
        else
        {
           VKM.app.saveSelection();
        }
    },

    saveSelection: function() {
        if(window.getSelection)//non IE Browsers
            {
                var a=null;
                try {
                    a= window.getSelection().getRangeAt(0)
                }
                catch(e)
                {
                    a=VKM.app.globals.savedRange
                }

                VKM.app.globals.savedRange = a; //Ext.clone();

            }
        else if(document.selection)//IE
        {
            VKM.app.globals.savedRange = Ext.clone(document.selection.createRange());
        }
    },

    restoreSelection: function() {
        document.getElementById("newMessageText").focus();
        if (VKM.app.globals.savedRange != null) {
            if (window.getSelection)//non IE and there is already a selection
            {
                var s = window.getSelection();
                if (s.rangeCount > 0)
                    s.removeAllRanges();
                s.addRange(VKM.app.globals.savedRange);
            }
            else if (document.createRange)//non IE and no selection
            {
                window.getSelection().addRange(VKM.app.globals.savedRange);
            }
                else if (document.selection)//IE
                {
                    VKM.app.globals.savedRange.select();
                }
        }
    },

    getCaretPos: function() {
        VKM.app.globals.selection={};
        VKM.app.globals.selection.range= window.getSelection().getRangeAt(0);
        VKM.app.globals.selection.start = VKM.app.globals.selection.range.startOffset;
        VKM.app.globals.selection.end = VKM.app.globals.selection.range.endOffset;
        VKM.app.globals.selection.startNode = VKM.app.globals.selection.range.startContainer;
        VKM.app.globals.selection.endNode = VKM.app.globals.selection.range.endContainer;
        VKM.app.globals.selection.selectedText = VKM.app.globals.selection.range.toString();
    },

    restoreCaretPos: function() {
        var selection = window.getSelection();
        	if (selection.rangeCount > 0) {
        		selection.removeAllRanges();
        		selection.addRange(VKM.app.globals.selection.range);
        	}
    },

    setCaretPos: function(startNodeIndex, endNodeIndex, start, end) {
        VKM.app.globals.selection.range = document.createRange();
        var editableContainer = document.getElementById("newMessageText");
        VKM.app.globals.selection.range.setStart(editableContainer.childNodes[startNodeIndex].firstChild,start);
        VKM.app.globals.selection.range.setEnd(editableContainer.childNodes[endNodeIndex].firstChild,end);
        var selection = window.getSelection();
        selection.addRange(VKM.app.globals.selection.range);
    },

    closeTmpPanels: function() {
        var tmpPanels=Ext.ComponentQuery.query('#tmpPanel');
        for (var i=0;i<tmpPanels.length;i++)
        {
            tmpPanels[i].destroy();
        }
    },

    showDocument: function(url, type) {
        var viewer='internal'
        if(VKM.app.globals.settings.pdfViewerMode)
            viewer=VKM.app.globals.settings.pdfViewerMode


        if (type=='pdf'&&viewer=='internal')
        {
           // url='http://localhost:1337/api';
            var a=Ext.Viewport.add({
                xtype     : 'pdfpanel',
                itemId    :  "tmpPanel",
                fullscreen: true,
                layout    : 'fit',
                src       : url, // URL to the PDF - Same Domain or Server with CORS Support
                style     : {
                    backgroundColor: '#333'
                },
                margin: 2,
                zIndex:9999
            });
            a.show();
        }
        else
        {

        //    // url='http://localhost:1337/api';
        //     var a=Ext.Viewport.add({
        //         xtype     : 'pdfpanel',
        //         itemId    :  "tmpPanel",
        //         fullscreen: true,
        //         layout    : 'fit',
        //         src       : url, // URL to the PDF - Same Domain or Server with CORS Support
        //         style     : {
        //             backgroundColor: '#333'
        //         },
        //         margin: 2,
        //         zIndex:9999
        //     });
        //     a.show();

        //        var a=new XMLHttpRequest();


        //     url='http://localhost:1337/api';
        // //     var a=Ext.Viewport.add({
        // //         xtype     : 'pdfpanel',
        // //         itemId    :  "tmpPanel",
        // //         fullscreen: true,
        // //         layout    : 'fit',
        // //         src       : url, // URL to the PDF - Same Domain or Server with CORS Support
        // //         style     : {
        // //             backgroundColor: '#333'
        // //         },
        // //         margin: 2,
        // //         zIndex:9999
        // //     });
        // //     a.show();
            var url='http://docs.google.com/viewer?url='+url+'&embedded=true&mobile=true';
            Ext.Ajax.request({
                url: url,
                method: 'GET',
                callback: function(options, success, response) {
                    console.log(response);
                    var regex = /iframe.*?src=(?:(?:'([^']*)')|(?:"([^"]*)")|([^\s]*))/i;
                    var srcr = regex.exec(response.responseText);
                    var url=response.request.options.url;
                    var iframeUrl='<iframe height="100%" width="100%" src="http://docs.google.com/viewer?url='+url+'&mobile=true"></iframe>';
                    if(srcr)
                    {
                        var src0=srcr[3].replace("&quot;","");
                        var src = src0.replace("&quot;","");
                        //response.responseText.match(regex)[0];

                        iframeUrl='<iframe height="100%" width="100%" src="http://docs.google.com/viewer?url='+src+'&mobile=true"></iframe>';
                        url='http://docs.google.com/viewer?url='+src+'&embedded=true&mobile=true';

                    }
                    else
                    {
                        var regex = /img.*?src=(?:(?:'([^']*)')|(?:"([^"]*)")|([^\s]*))/i;
                        var srcr1 = regex.exec(response.responseText);
                        if(srcr1)
                        {
                            var src0=srcr1[3].replace("&quot;","");
                            var src = src0.replace("&quot;","");
                            //response.responseText.match(regex)[0];

                            var newPanel= Ext.Viewport.add({
                                xtype:"panel",
                                height:"100%",
                                width:"100%",
                                modal:true,
                                itemId    :  "tmpPanel",
                                cls:"googleViewer",
                                centered:true,
                                style:{height:"100%"},
                                html:  '<img width="100%" src="'+src+'"></img>'
                            });
                            newPanel.show();
                            newPanel.element.dom.addEventListener('click',function(e){
                                newPanel.destroy();
                            });
                            return;
                        };



                    }
                    console.log(iframeUrl);
                    if (tizen)
                    {
                        var appControl = new tizen.ApplicationControl("http://tizen.org/appcontrol/operation/view", url);
                        tizen.application.launchAppControl(appControl, null,
                                                           function() {
                                                               console.log("browser opened");

                                                           },
                                                           function(e) { console.log("browser error: " + e.message); }
                                                          );
                    }
                    else
                    {
                        var newPanel= Ext.Viewport.add({
                            xtype:"panel",
                            height:"100%",
                            width:"100%",
                            modal:true,
                            itemId    :  "tmpPanel",
                            cls:"googleViewer",
                            centered:true,
                            style:{height:"100%"},
                            html:  iframeUrl,
                            items:[{
                                xtype:'button',
                                itemId:"closeButton",
                                ui:"decline",
                                iconCls:'delete',
                                handler:VKM.app.closeTmpPanels,
                                style:{
                                    position:"absolute",
                                    top:2,
                                    left:2,
                                    zIndex:99999
                                }
                            }
                                  ]
                        });
                        newPanel.show();
                    }
                }

            });




        //     var iframeUrl='<iframe height="100%" width="100%" src="http://docs.google.com/viewer?url='+url+'&embedded=true"></iframe>';
        //     var newPanel= Ext.Viewport.add({
        //         xtype:"panel",
        //         height:"100%",
        //         width:"100%",
        //         modal:true,
        //         itemId    :  "tmpPanel",
        //         cls:"googleViewer",
        //         centered:true,
        //         style:{height:"100%"},
        //         html:  iframeUrl,
        //         items:[{
        //             xtype:'button',
        //             itemId:"closeButton",
        //             ui:"decline",
        //             iconCls:'delete',
        //             handler:VKM.app.closeTmpPanels,
        //             style:{
        //                 position:"absolute",
        //                 top:2,
        //                 left:2,
        //                 zIndex:99999
        //             }
        //         }
        //             ]
        //     });
        //     newPanel.show();

        }
    },

    getCurrentLocation: function(handlePosition) {
        //tizen.logger.info('getCurrentLocation');
        if (navigator && navigator.geolocation &&
            navigator.geolocation.getCurrentPosition)
            navigator.geolocation.getCurrentPosition(function(position) {
        //         tizen.view.hideLoader();
                if (position.coords.latitude === 0 && position.coords.longitude === 0)
                    console.log('Unable to acquire your location')
                    //tizen.logger.info('Unable to acquire your location');
                else {
        //             tizen.logger.info('Latitude: ' + position.coords.latitude + "\n" + 'Longitude: ' + position.coords.longitude);
                    if(handlePosition)
                    {
                        handlePosition({latitude : position.coords.latitude, longitude : position.coords.longitude});
                    }
                     console.log(position.coords.latitude+','+position.coords.longitude)            ;
                     VKM.app.SimpleNotification("ddd",position.coords.latitude+','+position.coords.longitude)
                }
            }, function(error) {
        //         tizen.view.hideLoader();
                    console.log('GPS error occurred. Error code: '+ JSON.stringify(error))            ;
        //         tizen.logger.err('GPS error occurred. Error code: ', JSON.stringify(error));
                if(handlePosition)
                {
                    handlePosition();
                }

            });
        else {
                    console.log('Unable to acquire your location1')
            //     tizen.view.hideLoader();
        //     tizen.view.showPopup('Unable to acquire your location');
        //     tizen.logger.err('No W3C Geolocation API available');
        }

    },

    savecoordinats: function() {
        //<div id="YMapsID"></div><div id="coord_form"><p><label>Координаты метки: </label><input id="latlongmet" class="input-medium" name="icon_text" /><br/><label>Масштаб: </label><input id="mapzoom" class="input-medium" name="icon_text" /></p><p><label>Центр карты: </label><input id="latlongcenter" class="input-medium" name="icon_text" /></p></div>

        var new_coords = [VKM.app.globals.coords[0].toFixed(4), VKM.app.globals.coords[1].toFixed(4)];
        VKM.app.globals.myPlacemark.getOverlay().getData().geometry.setCoordinates(new_coords);
        var center = VKM.app.globals.myMap.getCenter();
        var new_center = [center[0].toFixed(4), center[1].toFixed(4)];

    },

    initSelections: function() {

        if (window.getSelection && document.createRange) {
            VKM.app.globals.saveSelection = function(containerEl) {
                var range = window.getSelection().getRangeAt(0);
                var preSelectionRange = range.cloneRange();
                preSelectionRange.selectNodeContents(containerEl);
                preSelectionRange.setEnd(range.startContainer, range.startOffset);
                var start = preSelectionRange.toString().length;

                return {
                    start: start,
                    end: start + range.toString().length
                }
            };

            VKM.app.globals.restoreSelection = function(containerEl, savedSel) {
                var charIndex = 0, range = document.createRange();
                range.setStart(containerEl, 0);
                range.collapse(true);
                var nodeStack = [containerEl], node, foundStart = false, stop = false;

                while (!stop && (node = nodeStack.pop())) {
                    if (node.nodeType == 3) {
                        var nextCharIndex = charIndex + node.length;
                        if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {
                            range.setStart(node, savedSel.start - charIndex);
                            foundStart = true;
                        }
                        if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {
                            range.setEnd(node, savedSel.end - charIndex);
                            stop = true;
                        }
                        charIndex = nextCharIndex;
                    } else {
                        var i = node.childNodes.length;
                        while (i--) {
                            nodeStack.push(node.childNodes[i]);
                        }
                    }
                }

                var sel = window.getSelection();
                sel.removeAllRanges();
                sel.addRange(range);
            }
        } else if (document.selection && document.body.createTextRange) {
            VKM.app.globals.saveSelection = function(containerEl) {
                var selectedTextRange = document.selection.createRange();
                var preSelectionTextRange = document.body.createTextRange();
                preSelectionTextRange.moveToElementText(containerEl);
                preSelectionTextRange.setEndPoint("EndToStart", selectedTextRange);
                var start = preSelectionTextRange.text.length;

                return {
                    start: start,
                    end: start + selectedTextRange.text.length
                }
            };

            VKM.app.globals.restoreSelection = function(containerEl, savedSel) {
                var textRange = document.body.createTextRange();
                textRange.moveToElementText(containerEl);
                textRange.collapse(true);
                textRange.moveEnd("character", savedSel.end);
                textRange.moveStart("character", savedSel.start);
                textRange.select();
            };
        }



        VKM.app.globals.doSave = function () {
            VKM.app.globals.savedSelection = VKM.app.globals.saveSelection(document.getElementById("newMessageText") );
        }

        VKM.app.globals.doRestore = function () {
            if (VKM.app.globals.savedSelection) {
                VKM.app.globals.restoreSelection(document.getElementById("newMessageText"), VKM.app.globals.savedSelection);
            }
        }

    }

});
