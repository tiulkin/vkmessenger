/*
 * File: app/controller/Search.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VKM.controller.Search', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            foundContact: 'container#foundContact',
            searchCard: 'tabpanel#searchTabPanel',
            searchTabBar: 'tabbar#searchTabBar',
            card: 'container#searchContactCard'
        },

        control: {
            "[searchFriends=true]": {
                itemtap: 'globalSearchFriendsItemTap'
            },
            "button#backToSearchButton": {
                tap: 'backToSearchButtonTap'
            }
        }
    },

    globalSearchFriendsItemTap: function(dataview, index, target, record, e, eOpts) {
        var panel=this.getSearchCard();
        this.currentContact=record;
        this.getSearchTabBar().setHidden(true);
        panel.setActiveItem(2);




    },

    backToSearchButtonTap: function(button, e, eOpts) {
        this.getSearchTabBar().setHidden(false);
        var tab=0;
        if(this.setCurrentTab)
        {
            tab=this.setCurrentTab;
        }

        this.getSearchCard().setActiveItem(tab);

    },

    refreshData: function(component) {
        var controller=VKM.app.getController('Search');
        var panel=component;
        if(!panel)
        {
            panel=controller.getCard();
        }
        var params=
            {
                v:'5.3',
                access_token:VKM.app.globals.authData['access_token'],
                target_uid:controller.currentContact.get('id')
            };

        var store=Ext.getStore('FriendsInCommon');
        store.removeAll();
        store.getProxy().setExtraParams(params);
        store.getProxy().setUrl("https://api.vk.com/method/execute.friendsInCommon");
        store.getProxy().setReader(
            Ext.create("ux.Contact",
                       {
                           rootProperty: 'response.friends'
                       }
                      )
        );
        store.load({callback:function(request,success,response){

            var controller=VKM.app.getController('Search');
            var record=Ext.getStore('Users').getById(controller.currentContact.get('id'));
            var panel=Ext.ComponentQuery.query('#searchContactCard')[0];



            var isOnlineCls="";
            if (record.get('online'))
            {
                isOnlineCls='class="userOnline"';
            }
            else
            {
                isOnlineCls='class="userOffline"';
            }

            var photo =record.get('photo_200')
            if (!photo)
            {
                photo=record.get('photo_200_orig');
            }

            panel.down('#userText').setHtml('<span '+isOnlineCls+'>'+record.get('first_name')+' '+record.get('last_name')+'</span>');
            panel.down('#userPhoto').setHtml('<img src="'+photo+'"></img>');
            //console.log(1);
            //this.loadChatHeaderData(record.get('user_id'));
            //controller.loadChatMessagesStep1(record.get('user_id'));


            //console.log(record)

            var title=panel.down('#friendsTitle');
            title.setHtml(ux.locale.Manager.get('labels.mutualFriends')+'('+store.getCount()+'):');
            var friendsList=panel.down('#friendsListSearch');


            var location='';

            var country=record.get('countryName');
            if(country)
            {
                location=country+',';
            }

            var city=record.get('cityName');
            if(city)
            {
                location+=city;
            }
            if(location!='')
            {
                panel.query('#location')[0].setHidden(false);
                var html='<b>'+location+'</b>';
                panel.query('#location')[0].setHtml(html);
            }
            else
            {
                panel.query('#location')[0].setHidden(true);
            }


            var university_name=record.get('university_name');

            var html='';

            if(university_name)
            {
                panel.query('#body')[0].setHidden(false);
                html+=university_name
                panel.query('#body')[0].setHtml(html);
            }
            else
            {
                panel.query('#body')[0].setHidden(true);
            }
            var status=record.get('status');
            var statusComponent=panel.query('#body1')[0]

            if(status)
            {
                console.log(status);
                statusComponent.setHidden(false);
                statusComponent.setHtml('<i>'+VKM.app.smiles(status)+'</i>');
            }
            else
            {
                statusComponent.setHidden(true);
            }

            //     console.log(statusComponent.getHtml());
            //     console.log(statusComponent.setHeight(100));
            //     console.log(statusComponent.setWidth(100));

            if (record.get('last_seen'))
            {
                var last_seen=new Date(parseInt(record.get('last_seen').time)*1000);
                panel.query('#lastseen')[0].setHidden(false);
                panel.query('#lastseen')[0].setHtml(ux.locale.Manager.get('labels.lastvisit')+' '+moment(last_seen).fromNow());
            }
            else
            {
                panel.query('#lastseen')[0].setHidden(false);
            }




            if (store.getCount()>0)
            {
                friendsList.setHidden(false);
            }
            else
            {
                friendsList.setHidden(true);
                title.setHtml(ux.locale.Manager.get('labels.noMutualFriends'));
            }

            var isFriend=record.get("isFriend");

            if(isFriend)
            {
                if(isFriend.friend_status==0||isFriend.friend_status==2)
                {
                    panel.query('#addFriendButtonSearch')[0].setHidden(false);
                }
                else
                {
                    panel.query('#addFriendButtonSearch')[0].setHidden(true);
                }
                if(isFriend.friend_status==3||isFriend.friend_status==1)
                {
                    panel.query('#removeFromFriendsButtonSearch')[0].setHidden(false);
                }
                else
                {
                    panel.query('#removeFromFriendsButtonSearch')[0].setHidden(true);
                }
                if(isFriend.friend_status==2)
                {
                    panel.query('#removeRequestButtonSearch')[0].setHidden(false);
                }
                else
                {
                    panel.query('#removeRequestButtonSearch')[0].setHidden(true);
                }


            }

            panel.query('#contactStuff')[0].setHidden(false);
            panel.query('#userNewMessageSettings')[0].setHidden(false);



            var button=panel.down('#callToFriendButton');
            var controller=VKM.app.getController('Search');
            var contact=record;

            button.setHidden(true);

            if(contact.get('mobile_phone'))
            {
                var phone1=contact.get('mobile_phone');
                button.setText(ux.locale.Manager.get('labels.Call')+' '+phone1);
                button.phone=phone1;
                button.setHidden(false);
            }
            else
            {
                button.setHidden(true);
            }


            var userId=record.get('id');
            panel.down('#userNewMessageSettings').userId=userId;


            panel.down('#userNewMessageSettings').setTitle(ux.locale.Manager.get('labels.newMessage'));
            panel.down('#customPropsSearch').setLabel(ux.locale.Manager.get('labels.customProps'));
            panel.down('#soundSelectSearch').setLabel(ux.locale.Manager.get('labels.Sound'));
            panel.down('#vibrateToggleSearch').setLabel(ux.locale.Manager.get('labels.Vibrate'));
            panel.down('#bannerToggleSearch').setLabel(ux.locale.Manager.get('labels.Banner'));
            //this.down('#customProps').setTitle(ux.locale.Manager.get('labels.customProps'));


            var settingsStore=Ext.getStore('userSettings');

            var record1=settingsStore.getById(userId);


            var soundSelect=[
                {
                    value:'none',
                    text:ux.locale.Manager.get('labels.none')
                },
                {
                    value:1,
                    text:"#1"
                },
                {
                    value:2,
                    text:"#2"
                },
                {
                    value:3,
                    text:"#3"
                },
                {
                    value:4,
                    text:"#4"
                },
                {
                    value:5,
                    text:"#5"
                },
                {
                    value:6,
                    text:"#6"
                },
                {
                    value:7,
                    text:"#7"
                },
                {
                    value:8,
                    text:"#8"
                },
                {
                    value:9,
                    text:"#9"
                },
                {
                    value:10,
                    text:"#10"
                },
                {
                    value:11,
                    text:"#11"
                },
                {
                    value:12,
                    text:"#12"
                },
                {
                    value:13,
                    text:"#13"
                },
                {
                    value:14,
                    text:"#14"
                },
                {
                    value:15,
                    text:"#15"
                },
                {
                    value:16,
                    text:"#16"
                },
                {
                    value:17,
                    text:"#17"
                },
                {
                    value:18,
                    text:"#18"
                },
                {
                    value:19,
                    text:"#19"
                },
                {
                    value:20,
                    text:"#20"
                }
            ];

            panel.down('#soundSelectSearch').setOptions(soundSelect);

            VKM.app.globals.isInit=true;

            if(record1)
            {
                if (record1.get('sound'))
                {
                    panel.down('#soundSelectSearch').setValue(record1.get('sound'));
                }
                else
                {
                    panel.down('#soundSelectSearch').setValue(1);
                };
                if (record1.get('vibrate'))
                {
                    panel.down('#vibrateToggleSearch').setValue(record1.get('vibrate'));
                }
                else
                {
                    panel.down('#vibrateToggleSearch').setValue(1);
                };
                if (record1.get('banner'))
                {
                    panel.down('#bannerToggleSearch').setValue(record1.get('banner'));
                }
                else
                {
                    panel.down('#bannerToggleSearch').setValue(0);
                };
                if (record1.get('isActive'))
                {
                    if(!record1.get('isActive'))
                    {
                        panel.down('#soundSelectSearch').setDisabled(true);
                        panel.down('#vibrateToggleSearch').setDisabled(true);
                        panel.down('#bannerToggleSearch').setDisabled(true);
                    }
                    panel.down('#customPropsSearchSearch').setValue(record1.get('isActive'));
                }
                else
                {
                    panel.down('#soundSelectSearch').setDisabled(true);
                    panel.down('#vibrateToggleSearch').setDisabled(true);
                    panel.down('#bannerToggleSearch').setDisabled(true);
                    panel.down('#customPropsSearch').setValue(0);
                }
                //     if (record.get('keepBanner'))
                //     {
                //         this.down('#keepBannerCheck').setValue(record.get('isActive'));
                //     };
            }
            else
            {
                panel.down('#soundSelectSearch').setDisabled(true);
                panel.down('#vibrateToggleSearch').setDisabled(true);
                panel.down('#bannerToggleSearch').setDisabled(true);
                panel.down('#soundSelectSearch').setValue(null);
                panel.down('#vibrateToggleSearch').setValue(null);
                panel.down('#bannerToggleSearch').setValue(null);
                panel.down('#customPropsSearch').setValue(false);
            }


            VKM.app.globals.isInit=false;


        }
                   });


    }

});