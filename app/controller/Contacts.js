/*
 * File: app/controller/Contacts.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VKM.controller.Contacts', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            contacts: 'container#contactsCard',
            contact: 'container#contact',
            contactsTabPanel: 'tabpanel#contactsTabPanel',
            contactsTabBar: 'tabbar#contactsTabBar'
        },

        control: {
            "list#allFriendsList": {
                itemtap: 'onFriendsItemTap'
            },
            "list#allFriendsList1": {
                itemtap: 'onOnlineItemTap'
            },
            "button#backToContactsButton": {
                tap: 'onBackToContactsButtonTap'
            },
            "dataview#friendsList": {
                itemtap: 'onFriendsListItemTap'
            },
            "list#phoneContactsList": {
                itemtap: 'onPhoneContactsListItemTap'
            }
        }
    },

    onFriendsItemTap: function(dataview, index, target, record, e, eOpts) {
        var panel=this.getContactsTabPanel();
        this.getContactsTabBar().setHidden(true);
        this.currentContact=record;
        this.currentPhoneContact=null;
        this.phoneUser=null;
        panel.setActiveItem(3);



    },

    onOnlineItemTap: function(dataview, index, target, record, e, eOpts) {

        var controller=VKM.app.getController('InitDataLoader');
        var dataController=VKM.app.getController('DataLoader');
        var panel=this.getContactsTabPanel();
        var contact=this.getContact();
        var isOnlineCls="";
        if (record.get('online'))
        {
            isOnlineCls='class="userOnline"';
        }
        else
        {
            isOnlineCls='class="userOffline"';
        }

        var photo =record.get('photo_200')
        if (!photo)
        {
            photo=record.get('photo_200_orig');
        }

        contact.down('#userText').setHtml('<span '+isOnlineCls+'>'+record.get('first_name')+' '+record.get('last_name')+'</span>');
        contact.down('#userPhoto').setHtml('<img src="'+photo+'"></img>');
        //console.log(1);
        //this.loadChatHeaderData(record.get('user_id'));
        //controller.loadChatMessagesStep1(record.get('user_id'));
        this.getContactsTabBar().setHidden(true);
        this.currentContact=record;
        panel.setActiveItem(3);



    },

    onBackToContactsButtonTap: function(button, e, eOpts) {
        this.getContactsTabBar().setHidden(false);

        var controller=VKM.app.getController('Contacts');
        if(!this.setCurrentTab)
        {
            this.setCurrentTab=0
        }
        this.getContactsTabPanel().setActiveItem(this.setCurrentTab);

    },

    onFriendsListItemTap: function(dataview, index, target, record, e, eOpts) {
        var panel=this.getContactsTabPanel();
        this.currentContact=record;
        this.currentPhoneContact=null;
        this.phoneUser=null;
        this.refreshData(this.getContacts());


    },

    onPhoneContactsListItemTap: function(dataview, index, target, record, e, eOpts) {
        var panel=this.getContactsTabPanel();
        this.getContactsTabBar().setHidden(true);
        this.currentContact=null;
        this.phoneUser=record;

        console.log(record.get('id'));
        var settingsStore=Ext.getStore('settings');
        srecord=settingsStore.getById('phoneBook_'+record.get('id'));
        console.log(srecord);

        if(srecord)
        {
            this.vkId=srecord.get('value');
        }
        else
        {
            this.vkId=null
        }

        if(this.vkId)
            {
                record.set({'vkId':this.vkId});
                record.save();
                this.currentContact=Ext.getStore('Users').getById(this.vkId)
                console.log(this.vkId);
                console.log(this.currentContact);

                if(!this.currentContact)
                {
                    this.currentContact=Ext.getStore('Friends').getById(this.vkId)
                }
                if(!this.currentContact)
                {
                    this.currentContact=new VKM.model.User({id:this.vkId});
                }
                this.currentPhoneContact=null
            }
        else
        {
            this.currentPhoneContact=record;
        }
        this.refreshData(this.getContacts())
        panel.setActiveItem(3);

    },

    chooseAlbumDialogue: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');

        controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            items:[
                {xtype:'albumlist',controller:controller},
                {
                    xtype: 'container',
                    width: '100%',
                    docked: 'bottom',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatAttachConfirmButton',
                            handler: function(){

                            },
                            ui: 'action',
                            hidden:true,
                            iconAlign: 'center',
                            iconCls: 'checkMark'
                        },
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatAttachCancelButton',
                            handler: function(){controller.overlay.destroy()},
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'delete'
                        }
                    ]
                }
            ]
        });
        dataController.loadAlbumsStep1();
    },

    uploadPhoto: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');
        controller.uploadOverlay=controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            centered:false,
            modal:false,
            width: '10px',
            height:'10px',
            items:[
                {
                    xtype: 'container',
                    width: '10px',
                    docked: 'bottom',
                    itemId:'tmpPhoto',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    }
                }]
        });



        var a=Ext.ComponentQuery.query('#tmpPhoto')[0];


        VKM.app.globals.aaa=function(){

            VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getProfileUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadProfileStep2,{});
        }
        a.setHtml('<form name ="subscribe" id="demo-form" action="#"> <input type = "file" onchange = "VKM.app.globals.aaa()" id = "photoToUpload1" name = "photo" accept= "image" / ></form>');
        document.getElementById("photoToUpload1").click();
        //a.setHidden(true);

    },

    takePhoto: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');
        controller.uploadOverlay=controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            centered:false,
            modal:false,
            width: '10px',
            height:'10px',
            items:[
                {
                    xtype: 'container',
                    width: '10px',
                    docked: 'bottom',
                    itemId:'tmpPhoto',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    }
                }]
        });



        var a=Ext.ComponentQuery.query('#tmpPhoto')[0];


        VKM.app.globals.aaa=function(){

            VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getProfileUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadProfileStep2,{});
        }
        a.setHtml('<form name ="subscribe" id="demo-form" action="#"> <input type = "file" capture="camera" onchange = "VKM.app.globals.aaa()" id = "photoToUpload1" name = "photo" accept= "image" / ></form>');
        document.getElementById("photoToUpload1").click();
    },

    refreshData: function(component) {
        var controller=VKM.app.getController('Contacts');
        var panel=component;
        if(!panel)
        {
            panel=controller.getContacts();
        }
        var isOnlineCls="";
        if(controller.currentContact&&controller.currentContact.get('id'))
        {
            var params=
                {
                    v:'5.3',
                    access_token:VKM.app.globals.authData['access_token'],
                    target_uid:controller.currentContact.get('id')
                };

            var store=Ext.getStore('FriendsInCommon');
            store.removeAll();
            store.getProxy().setExtraParams(params);
            store.getProxy().setUrl("https://api.vk.com/method/execute.friendsInCommon");
            store.getProxy().setReader(
                Ext.create("ux.Contact",
                           {
                               rootProperty: 'response.friends'
                           }
                          )
            );
            store.load({callback:function(request,success,response){

                var controller=VKM.app.getController('Contacts');

                var record=Ext.getStore('Users').getById(controller.currentContact.get('id'));
                var panel=Ext.ComponentQuery.query('#contactCard')[0];

                if (record.get('online'))
                {
                    isOnlineCls='class="userOnline"';
                }
                else
                {
                    isOnlineCls='class="userOffline"';
                }

                var photo =record.get('photo_200')
                if (!photo)
                {
                    photo=record.get('photo_200_orig');
                }

                panel.down('#userText').setHtml('<span '+isOnlineCls+'>'+record.get('first_name')+' '+record.get('last_name')+'</span>');
                panel.down('#userPhoto').setHtml('<img src="'+photo+'"></img>');
                //console.log(1);
                //this.loadChatHeaderData(record.get('user_id'));
                //controller.loadChatMessagesStep1(record.get('user_id'));


                //console.log(record)

                var title=panel.down('#friendsTitle');
                title.setHtml(ux.locale.Manager.get('labels.mutualFriends')+'('+store.getCount()+'):');
                var friendsList=panel.down('#friendsList');


                var location='';

                var country=record.get('countryName');
                if(country)
                {
                    location=country+',';
                }

                var city=record.get('cityName');
                if(city)
                {
                    location+=city;
                }
                if(location!='')
                {
                    panel.query('#location')[0].setHidden(false);
                    var html='<b>'+location+'</b>';
                    panel.query('#location')[0].setHtml(html);
                }
                else
                {
                    panel.query('#location')[0].setHidden(true);
                }


                var university_name=record.get('university_name');

                var html='';

                if(university_name)
                {
                    panel.query('#body')[0].setHidden(false);
                    html+=university_name
                    panel.query('#body')[0].setHtml(html);
                }
                else
                {
                    panel.query('#body')[0].setHidden(true);
                }
                var status=record.get('status');
                var statusComponent=panel.query('#body1')[0]

                if(status)
                {

                    statusComponent.setHidden(false);
                    statusComponent.setHtml('<i>'+VKM.app.smiles(status)+'</i>');
                }
                else
                {
                    statusComponent.setHidden(true);
                }

                //     console.log(statusComponent.getHtml());
                //     console.log(statusComponent.setHeight(100));
                //     console.log(statusComponent.setWidth(100));

                if (record.get('last_seen'))
                {
                    var last_seen=new Date(parseInt(record.get('last_seen').time)*1000);
                    panel.query('#lastseen')[0].setHidden(false);
                    panel.query('#lastseen')[0].setHtml(ux.locale.Manager.get('labels.lastvisit')+' '+moment(last_seen).fromNow());
                }
                else
                {
                    panel.query('#lastseen')[0].setHidden(false);
                }




                if (store.getCount()>0)
                {
                    friendsList.setHidden(false);
                }
                else
                {
                    friendsList.setHidden(true);
                    title.setHtml(ux.locale.Manager.get('labels.noMutualFriends'));
                }

                var isFriend=record.get("isFriend");

                if(isFriend)
                {
                    if(isFriend.friend_status==0||isFriend.friend_status==2)
                    {
                        panel.query('#addFriendButton')[0].setHidden(false);
                    }
                    else
                    {
                        panel.query('#addFriendButton')[0].setHidden(true);
                    }
                    if(isFriend.friend_status==3||isFriend.friend_status==1)
                    {
                        panel.query('#removeFromFriendsButton')[0].setHidden(false);
                    }
                    else
                    {
                        panel.query('#removeFromFriendsButton')[0].setHidden(true);
                    }
                    if(isFriend.friend_status==2)
                    {
                        panel.query('#removeRequestButton')[0].setHidden(false);
                    }
                    else
                    {
                        panel.query('#removeRequestButton')[0].setHidden(true);
                    }


                }

                panel.query('#contactStuff')[0].setHidden(false);
                panel.down('#contactStuff1').setHidden(true);
                panel.query('#userNewMessageSettings')[0].setHidden(false);
                if(controller.phoneUser)
                {
                    panel.down('#disconnectVkId').setHidden(false);
                }
                else
                {
                    panel.down('#disconnectVkId').setHidden(true);
                }



                var button=panel.down('#callToFriendButton');
                var button1=panel.down('#createMessageToFriendButton1');


                var contact=record;

                button.setHidden(true);
                button1.setHidden(true);

                if(contact.get('mobile_phone'))
                {
                    var phone1=contact.get('mobile_phone');
                    button.setText(ux.locale.Manager.get('labels.Call')+' '+phone1);
                    button.phone=phone1;
                    button.setHidden(false);
                    button1.setText(ux.locale.Manager.get('labels.sendSMS')+' '+phone1);
                    button1.phone=phone1;
                    button1.setHidden(false);
                }
                else
                {
                    button.setHidden(true);
                    button1.setHidden(true);
                }

                if(contact.get('status'))
                {

                }


                if(contact.get('contacts')&&contact.get('contacts').home_phone)
                {
                    var phone2=contact.get('contacts').home_phone;
                }



                var userId=record.get('id');
                panel.down('#userNewMessageSettings').userId=userId;
                panel.down('#disconnectVkId').setHidden(true);

                panel.down('#userNewMessageSettings').setTitle(ux.locale.Manager.get('labels.newMessage'));
                panel.down('#customProps').setLabel(ux.locale.Manager.get('labels.customProps'));
                panel.down('#soundSelect').setLabel(ux.locale.Manager.get('labels.Sound'));
                panel.down('#vibrateToggle').setLabel(ux.locale.Manager.get('labels.Vibrate'));
                panel.down('#bannerToggle').setLabel(ux.locale.Manager.get('labels.Banner'));
                //this.down('#customProps').setTitle(ux.locale.Manager.get('labels.customProps'));




                var defaultNumber;

                panel.down('#contactsStuddButtons1').removeAll();
                console.log(controller.phoneUser);
                if(controller.phoneUser&&controller.phoneUser.get('phoneNumbers'))
                {
                    panel.down('#disconnectVkId').setHidden(false);
                    for (var i=0;i<controller.phoneUser.get('phoneNumbers').length;i++)
                    {
                        if(controller.phoneUser.get('phoneNumbers')[i]&&controller.phoneUser.get('phoneNumbers')[i].number)
                        {
                            if (controller.phoneUser.get('phoneNumbers')[i].number.isDefault)
                            {
                                defaultNumber=controller.phoneUser.get('phoneNumbers')[i].number
                            }

                            panel.down('#contactsStuddButtons1').add([
                                {
                                    xtype: 'button',
                                    margin: 10,
                                    ui: 'action',
                                    width: '80%',
                                    text:ux.locale.Manager.get('labels.Call')+' '+controller.phoneUser.get('phoneNumbers')[i].number,
                                    phone:controller.phoneUser.get('phoneNumbers')[i].number,
                                    handler:function(button){
                                        var appControl = new tizen.ApplicationControl("http://tizen.org/appcontrol/operation/dial","tel:"+button.config.phone, null);
                                        tizen.application.launchAppControl(appControl,null,
                                                                           function(){console.log("launch appControl succeeded");},
                                                                           function(e){console.log("launch appControl failed. Reason: " + e.name);},
                                                                           null);
                                    }
                                },
                                {
                                    xtype: 'button',
                                    margin: 10,
                                    ui: 'action',
                                    width: '80%',
                                    text:ux.locale.Manager.get('labels.sendSMS')+' '+controller.phoneUser.get('phoneNumbers')[i].number,
                                    phone:controller.phoneUser.get('phoneNumbers')[i].number,
                                    handler:function(button){
                                        var appControl = new tizen.ApplicationControl(
                                            'http://tizen.org/appcontrol/operation/compose',
                                            null,
                                            "text/html",
                                            null,
                                            [
                                                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/to", [button.config.phone])
                                            ]
                                        );

                                        serviceCB = {
                                            onsuccess: function () { console.log('OK');  },
                                            onfailure: function () { console.log('failed'); }
                                        };

                                        console.log("Launch service");

                                        tizen.application.launchAppControl(
                                            appControl,
                                            "tizen.messages",
                                            function() {console.log("launch application control succeed"); },
                                            function(e) {console.log('launch appControl failed. Reason: ' + e.name)},
                                            serviceCB
                                        );
                                    }
                                }

                            ])

                        }
                    }

                }






                var settingsStore=Ext.getStore('userSettings');

                var record1=settingsStore.getById(userId);

                var soundSelect=[
                    {
                        value:'none',
                        text:ux.locale.Manager.get('labels.none')
                    },
                    {
                        value:1,
                        text:"#1"
                    },
                    {
                        value:2,
                        text:"#2"
                    },
                    {
                        value:3,
                        text:"#3"
                    },
                    {
                        value:4,
                        text:"#4"
                    },
                    {
                        value:5,
                        text:"#5"
                    },
                    {
                        value:6,
                        text:"#6"
                    },
                    {
                        value:7,
                        text:"#7"
                    },
                    {
                        value:8,
                        text:"#8"
                    },
                    {
                        value:9,
                        text:"#9"
                    },
                    {
                        value:10,
                        text:"#10"
                    },
                    {
                        value:11,
                        text:"#11"
                    },
                    {
                        value:12,
                        text:"#12"
                    },
                    {
                        value:13,
                        text:"#13"
                    },
                    {
                        value:14,
                        text:"#14"
                    },
                    {
                        value:15,
                        text:"#15"
                    },
                    {
                        value:16,
                        text:"#16"
                    },
                    {
                        value:17,
                        text:"#17"
                    },
                    {
                        value:18,
                        text:"#18"
                    },
                    {
                        value:19,
                        text:"#19"
                    },
                    {
                        value:20,
                        text:"#20"
                    }
                ];

                panel.down('#soundSelect').setOptions(soundSelect);


                VKM.app.globals.isInit=true;
                if(record1)
                {
                    if (record1.get('sound'))
                    {
                        panel.down('#soundSelect').setValue(record1.get('sound'));
                    }
                    else
                    {
                        panel.down('#soundSelect').setValue(false);
                    };
                    if (record1.get('vibrate'))
                    {
                        panel.down('#vibrateToggle').setValue(record1.get('vibrate'));
                    }
                    else
                    {
                        panel.down('#vibrateToggle').setValue(false);
                    };
                    if (record1.get('banner'))
                    {
                        panel.down('#bannerToggle').setValue(record1.get('banner'));
                    }
                    else
                    {
                        panel.down('#bannerToggle').setValue(false);
                    };
                    if (record1.get('isActive'))
                    {

                        panel.down('#customProps').setValue(record1.get('isActive'));
                        if(!record1.get('isActive'))
                        {
                            panel.down('#soundSelect').setDisabled(true);
                            panel.down('#vibrateToggle').setDisabled(true);
                            panel.down('#bannerToggle').setDisabled(true);
                        }

                    }
                    else
                    {
                        panel.down('#customProps').setValue(false);
                        panel.down('#soundSelect').setDisabled(true);
                        panel.down('#vibrateToggle').setDisabled(true);
                        panel.down('#bannerToggle').setDisabled(true);

                    }
                    //     if (record.get('keepBanner'))
                    //     {
                    //         this.down('#keepBannerCheck').setValue(record.get('isActive'));
                    //     };
                }
                else
                {
                    panel.down('#customProps').setValue(false);
                    panel.down('#soundSelect').setDisabled(true);
                    panel.down('#vibrateToggle').setDisabled(true);
                    panel.down('#bannerToggle').setDisabled(true);

                    panel.down('#soundSelect').setValue(null);
                    panel.down('#vibrateToggle').setValue(null);
                    panel.down('#bannerToggle').setValue(null);
                }


                VKM.app.globals.isInit=false;
            }
                       });

        }
        else
        {
            if(controller.currentPhoneContact)
            {
                var isOnlineCls=null;
                console.log(controller.currentPhoneContact);
                panel.down('#userText').setHtml('<span '+isOnlineCls+'>'+controller.currentPhoneContact.get('displayName')+'</span>');
                var photoUri='resources/images/no_photo_user.png';

                if(controller.currentPhoneContact.get('photoURI'))
                {
                    if(controller.currentPhoneContact.get('photoURI').slice(-4)!='null')
                    {
                        photoUri=controller.currentPhoneContact.get('photoURI');
                    }
                    console.log(controller.currentPhoneContact.get('photoURI').slice(-4)!='null')
                }
                panel.down('#userPhoto').setHtml('<img width=200 src="'+photoUri+'"></img>');


                panel.down('#contactStuff').setHidden(true);
                var contactsStuff1=panel.down('#contactStuff1');
                contactsStuff1.setHidden(false);


                if(controller.currentPhoneContact.get('vkId'))
                {
                    contactsStuff1.down('#connectVkId').setHidden(true);
                    contactsStuff1.down('#inviteFriend').setHidden(false);
                    contactsStuff1.down('#body').setHidden(true);
                }
                else
                {
                    contactsStuff1.down('#connectVkId').setHidden(false);
                    contactsStuff1.down('#inviteFriend').setHidden(false);
                    contactsStuff1.down('#body').setHidden(false);
                    contactsStuff1.down('#body').setHtml(ux.locale.Manager.get('labels.unregisteredYet'));
                }
                var defaultNumber;
                contactsStuff1.down('#contactsStuddButtons').removeAll();
                if(controller.currentPhoneContact.get('phoneNumbers'))
                {
                    for (var i=0;i<controller.currentPhoneContact.get('phoneNumbers').length;i++)
                    {
                        console.log(controller.currentPhoneContact.get('phoneNumbers')[i]);

                        //defaultNumber
                        if(controller.currentPhoneContact.get('phoneNumbers')[i]&&controller.currentPhoneContact.get('phoneNumbers')[i].number)
                        {
                            if (controller.currentPhoneContact.get('phoneNumbers')[i].number.isDefault)
                            {
                                defaultNumber=controller.currentPhoneContact.get('phoneNumbers')[i].number
                            }

                            contactsStuff1.down('#contactsStuddButtons').add([
                                {
                                    xtype: 'button',
                                    margin: 10,
                                    ui: 'action',
                                    width: '80%',
                                    text:ux.locale.Manager.get('labels.Call')+' '+controller.currentPhoneContact.get('phoneNumbers')[i].number,
                                    phone:controller.currentPhoneContact.get('phoneNumbers')[i].number,
                                    handler:function(button){
                                        var appControl = new tizen.ApplicationControl("http://tizen.org/appcontrol/operation/dial","tel:"+button.config.phone, null);
                                        tizen.application.launchAppControl(appControl,null,
                                                                           function(){console.log("launch appControl succeeded");},
                                                                           function(e){console.log("launch appControl failed. Reason: " + e.name);},
                                                                           null);
                                    }
                                },
                                {
                                    xtype: 'button',
                                    margin: 10,
                                    ui: 'action',
                                    width: '80%',
                                    text:ux.locale.Manager.get('labels.sendSMS')+' '+controller.currentPhoneContact.get('phoneNumbers')[i].number,
                                    phone:controller.currentPhoneContact.get('phoneNumbers')[i].number,
                                    handler:function(button){
                                        var appControl = new tizen.ApplicationControl(
                                            'http://tizen.org/appcontrol/operation/compose',
                                            null,
                                            "text/html",
                                            null,
                                            [
                                                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/to", [button.config.phone])
                                            ]
                                        );

                                        serviceCB = {
                                            onsuccess: function () { console.log('OK');  },
                                            onfailure: function () { console.log('failed'); }
                                        };

                                        console.log("Launch service");

                                        tizen.application.launchAppControl(
                                            appControl,
                                            "tizen.messages",
                                            function() {console.log("launch application control succeed"); },
                                            function(e) {console.log('launch appControl failed. Reason: ' + e.name)},
                                            serviceCB
                                        );
                                    }
                                }

                            ])

                        }
                    }
                    if(!defaultNumber&&controller.currentPhoneContact.get('phoneNumbers').length>0)
                    {
                        defaultNumber=controller.currentPhoneContact.get('phoneNumbers')[0].number;
                    }
                    if(defaultNumber)
                    {
                        contactsStuff1.down('#inviteFriend').phone=defaultNumber
                    }
                    else
                    {
                        contactsStuff1.down('#inviteFriend').setHidden(true)
                    }


        //             button.setText(ux.locale.Manager.get('labels.Call')+' '+phone1);
        //             button.phone=phone1;
        //             button.setHidden(false);
        //             button1.setText(ux.locale.Manager.get('labels.sendSMS')+' '+phone1);
        //             button1.phone=phone1;
        //             button1.setHidden(false);
                }



            }

        }
    }

});