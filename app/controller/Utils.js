/*
 * File: app/controller/Utils.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VKM.controller.Utils', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            isOnline: 'checkboxfield#isOnline'
        },

        control: {
            "searchfield[doFilter=true]": {
                keyup: 'onSearchfieldKeyup',
                clearicontap: 'ControllerAction25'
            },
            "[iconCls=viewDocument]": {
                tap: 'onActionButtonTap'
            }
        }
    },

    onSearchfieldKeyup: function(textfield, e, eOpts) {
        var value = textfield.getValue(),
            store = Ext.getStore(textfield.config.boundStore),
            fields = textfield.config.fields;
        if (!fields)
        {
            fields=['body'];
        }


        //first clear any current filters on the store. If there is a new value, then suppress the refresh event
        if (!textfield.isFriends)
            {
                store.clearFilter(!!value)
                store.searchFilter=null;
            }
        else
        {
            store.clearFilter(!!value);
            store.searchFilter=null;
            if(this.getIsOnline().getChecked())
            {
                store.filter('online',1);
            }
        }
        ;

        //check if a value is set first, as if it isnt we dont have to do anything
        if (value) {
            //the user could have entered spaces, so we must split them so we can loop through them all
            var searches = value.split(','),
                regexps = [],
                i, regex;

            //loop them all
            for (i = 0; i < searches.length; i++) {
                //if it is nothing, continue
                if (!searches[i]) continue;

                regex = searches[i].trim();
                regex = regex.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");

                //if found, create a new regular expression which is case insenstive
                regexps.push(new RegExp(regex.trim(), 'i'));
            }

            //now filter the store by passing a method
            //the passed method will be called for each record in the store
            store.searchFilter=new Ext.util.Filter({
                filterFn: function(record) {
                    var matched = [];

                    //loop through each of the regular expressions
                    for (i = 0; i < regexps.length; i++) {
                        var search = regexps[i];
                        var fieldsToSearch='';
                        for (var i=0;i<fields.length;i++)
                        {
                            fieldsToSearch+=record.get(fields[i]);
                        }
                        var didMatch = search.test(fieldsToSearch);


                        //if it matched the first or last name, push it into the matches array
                        matched.push(didMatch);
                    }

                    return (regexps.length && matched.indexOf(true) !== -1);
                }
            });

            store.filter(store.searchFilter);
        }
    },

    ControllerAction25: function(textfield, e, eOpts) {
        var value = textfield.getValue(),
            store = Ext.getStore(textfield.config.boundStore),
            fields = textfield.config.fields;

        //first clear any current filters on the store. If there is a new value, then suppress the refresh event
        if (!textfield.isFriends)
            {
                store.clearFilter()
                store.searchFilter=null;
            }
        else
        {
            store.clearFilter();
            store.searchFilter=null;
            if(this.getIsOnline().getChecked())
            {
                store.filter('online',1);
            }
        };

    },

    onActionButtonTap: function(button, e, eOpts) {
        var url=button.config.url;
        var ext=button.config.ext;
        if(url&&ext)
        {
            console.log(url)
            VKM.app.showDocument(url,ext);
        }
    },

    uploadPhoto: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');
        controller.uploadOverlay=controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            centered:false,
            modal:false,
            width: '10px',
            height:'10px',
            items:[
                {
                    xtype: 'container',
                    width: '10px',
                    docked: 'bottom',
                    itemId:'tmpPhoto',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    }
                }]
        });



        var a=Ext.ComponentQuery.query('#tmpPhoto')[0];


        VKM.app.globals.aaa=function(){

            VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getChatUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token, chat_id:VKM.app.globals.chat.currentChatId},VKM.app.getController('DataLoader').uploadChatStep2,{});
        }
        a.setHtml('<form name ="subscribe" id="demo-form" action="#"> <input type = "file" onchange = "VKM.app.globals.aaa()" id = "photoToUpload10" name = "photo" accept= "image" / ></form>');
        document.getElementById("photoToUpload10").click();
        //a.setHidden(true);

    },

    takePhoto: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');
        controller.uploadOverlay=controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            centered:false,
            modal:false,
            width: '10px',
            height:'10px',
            items:[
                {
                    xtype: 'container',
                    width: '10px',
                    docked: 'bottom',
                    itemId:'tmpPhoto',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    }
                }]
        });



        var a=Ext.ComponentQuery.query('#tmpPhoto')[0];


        VKM.app.globals.aaa=function(){

            VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getChatUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token, chat_id:VKM.app.globals.chat.currentChatId},VKM.app.getController('DataLoader').uploadChatStep2,{});
        }
        a.setHtml('<form name ="subscribe" id="demo-form" action="#"> <input type = "file"  capture="camera" onchange = "VKM.app.globals.aaa()" id = "photoToUpload10" name = "photo" accept= "image" / ></form>');
        document.getElementById("photoToUpload10").click();


        //a.setHidden(true);


    },

    getTizenAddresses: function() {
        if(tizen)
        {
            var addressbook;

            // Define the error callback for all the asynchronous calls
            function errorCB(err) {
                console.log('The following error occurred: ' +  err.name);
            }

            function contactsUpdatedCB() {
                console.log('Contacts were updated');
            }

            function contactsFoundCB(contacts) {


            }

            // Get default address book.
            addressbook = tizen.contact.getDefaultAddressBook();

            //var filter = new tizen.AttributeFilter('name.firstName', 'CONTAINS', 'Chris');
            try {
                addressbook.find(function(){
                    var contacts=arguments[0];
                    var contactsStore=Ext.getStore('PhoneContacts');
                    var phonNumbersList='';
                    var emailList='';
                    for (var i=0;i<contacts.length;i++)
                    {
                        var contact=contactsStore.getById(contacts.id);
                        for (var k=0;k<contacts[i].phoneNumbers.length;k++)
                        {

                            if(phonNumbersList!='')
                            {
                                phonNumbersList+=',';
                            }

                            phonNumbersList+=contacts[i].phoneNumbers[k].number;
                        }
                        for (var k=0;k<contacts[i].emails.length;k++)
                        {
                            emailList+=(emailList=='')?'':',';
                            emailList+=contacts[i].emails[k].email;
                        }
                        contactData={
                            id:contacts[i].id,
                            firstName:contacts[i].name.firstName,
                            middleName:contacts[i].name.middleName,
                            lastName:contacts[i].name.lastName,
                            phoneNumbers:contacts[i].phoneNumbers,
                            photoURI:contacts[i].photoURI,
                            emails:contacts[i].emails,
                            displayName:contacts[i].name.displayName,
                            lastUpdated:new Date(contacts[i].lastUpdated)
                        }
                        if(!contact)
                        {
                            contact=new VKM.model.PhoneContact(contactData);
                            contactsStore.add(contact);
                            contact.save();
                        }
                        else
                        {
                            contactData.vkId=contact.get('vkId');
                            contactsStore.add(contact);
                            contact.save;

                        }
                    };
                    //console.log(phonNumbersList);
                    //console.log(emailList);
                }
                                 , errorCB);
            } catch (err) {
                console.log('The following error occurred while finding: ' +  err.name);
            }
        }
    },

    MyFunction72: function() {
        if(tizen)
        {
            var addressbook;

            // Define the error callback for all the asynchronous calls
            function errorCB(err) {
                console.log('The following error occurred: ' +  err.name);
            }

            function contactsUpdatedCB() {
                console.log('Contacts were updated');
            }

            function contactsFoundCB(contacts) {
                // The contact has been successfully found
                for(var i = 0; i < contacts.length; i++) {
                    contacts[i].name.firstName = 'Christopher';
                }
                try {
                    addressbook.updateBatch(contacts, contactsUpdatedCB, errorCB);
                } catch (err) {
                    console.log('The following error occurred while updating: ' +  err.name);
                }
            }

            // Get default address book.
            //friends.getByPhones
            addressbook = tizen.contact.getDefaultAddressBook();

            var filter = new tizen.AttributeFilter('name.firstName', 'CONTAINS', 'Chris');
            try {
                addressbook.find(contactsFoundCB, errorCB, filter);
            } catch (err) {
                console.log('The following error occurred while finding: ' +  err.name);
            }
        }
    },

    chooseAlbumDialogue: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');

        controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            items:[
                {xtype:'albumlist',controller:controller},
                {
                    xtype: 'container',
                    width: '100%',
                    docked: 'bottom',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatAttachConfirmButton',
                            handler: function(){

                            },
                            ui: 'action',
                            hidden:true,
                            iconAlign: 'center',
                            iconCls: 'checkMark'
                        },
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatAttachCancelButton',
                            handler: function(){controller.overlay.destroy()},
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'delete'
                        }
                    ]
                }
            ]
        });
        dataController.loadAlbumsStep1();
    },

    closeTmpPanels: function() {
        var tmpPanels=Ext.ComponentQuery.query('tmpPanel');
        for (var i=0;i<tmpPanels.length;i++)
        {
            tmpPanels[i].destroy();
        }
    },

    changePhoto: function(record) {
        VKM.app.globals.chat.currentUserId
    },

    gmap: function() {
        var initialLocation;
        var siberia = new google.maps.LatLng(60, 105);
        var newyork = new google.maps.LatLng(40.69847032728747, -73.9514422416687);
        var browserSupportFlag =  new Boolean();

        function initialize() {
          var myOptions = {
            zoom: 6,
            mapTypeId: google.maps.MapTypeId.ROADMAP
          };
          var map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);

          // Try W3C Geolocation (Preferred)
          if(navigator.geolocation) {
            browserSupportFlag = true;
            navigator.geolocation.getCurrentPosition(function(position) {
              initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
              map.setCenter(initialLocation);
            }, function() {
              handleNoGeolocation(browserSupportFlag);
            });
          }
          // Browser doesn't support Geolocation
          else {
            browserSupportFlag = false;
            handleNoGeolocation(browserSupportFlag);
          }

          function handleNoGeolocation(errorFlag) {
            if (errorFlag == true) {
              alert("Geolocation service failed.");
              initialLocation = newyork;
            } else {
              alert("Your browser doesn't support geolocation. We've placed you in Siberia.");
              initialLocation = siberia;
            }
            map.setCenter(initialLocation);
          }
        }
    }

});