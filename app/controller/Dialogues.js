/*
 * File: app/controller/Dialogues.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VKM.controller.Dialogues', {
    extend: 'Ext.app.Controller',

    config: {
        views: [
            'PhotoItem'
        ],

        refs: {
            dialoguesList: 'dataview#dialoguesList',
            chatList: {
                selector: 'dataview#chatList',
                xtype: 'messageslist'
            },
            chatControlPanel: 'container#chatControlPanel',
            newMessageContainer: 'container#newMessageContainer',
            messagesPanel: 'tabpanel#messagesTabPanel',
            messagesTabBar: 'tabbar#messagesTabBar',
            myCheckbox: 'checkboxfield#isSelected',
            chatControlReplyButton: 'button#chatControlReplyButton',
            chatControlDeleteButton: 'button#chatControlDeleteButton',
            chatHeader: 'container#chatHeader',
            newMessageText: 'textareafield#newMessageText',
            mainTabBar: 'tabbar#mainTabBar',
            checkMessagesInDialogueButton: 'button#checkMessagesInDialogueButton',
            newMessageSendButton: 'button#newMessageSendButton',
            newMessageAttachButton: 'button#newMessageAttachButton',
            newMessageCancelButton: 'button#newMessageCancelButton',
            attachments: 'dataview#attachments',
            newMessageButtons: 'container#newMessageButtons',
            chatControlStarButton: 'button#chatControlStarButton',
            searchAllContacts: 'searchfield#searchAllContacts',
            searchOnlineContacts: 'searchfield#searchOnlineContacts',
            dialoguesPanel: 'container#dialogues',
            readFilter: 'button#unreadFilter'
        },

        control: {
            "[itemId=dialoguesList]": {
                itemtap: 'onDialoguesListItemTap'
            },
            "[itemId=chatList]": {
                itemtap: 'onChatListItemTap'
            },
            "button#chatControlBackButton": {
                tap: 'onBackButtonTap'
            },
            "button#backFromChatToListButton": {
                tap: 'onBackToDialoguesButtonTap'
            },
            "container#chat": {
                activate: 'onChatActivate'
            },
            "container#dialogues": {
                activate: 'onDialoguesActivate'
            },
            "button#newMessageSendButton": {
                tap: 'onSendMessageButtonTap'
            },
            "#newMessageText": {
                focus: 'onNewMessageTextFocus'
            },
            "textareafield#newMessageText": {
                blur: 'onNewMessageTextBlur'
            },
            "button#newMessageAttachButton": {
                tap: 'onNewMessageAttachButtonTap'
            },
            "dataview#albumList": {
                itemtap: 'onAlbumListItemTap'
            },
            "button#newMessageCancelButton": {
                tap: 'onNewMessageCancelButtonTap'
            },
            "button#chatControlDeleteButton": {
                tap: 'onChatControlDeleteButtonTap'
            },
            "button#chatControlReplyButton": {
                tap: 'onChatControlReplyButtonTap'
            },
            "container#online": {
                activate: 'onOnlineActivate',
                deactivate: 'onOnlineDeactivate'
            },
            "button#newChatButton": {
                tap: 'onNewChatButtonTap'
            },
            "button#newMessageSmilesButton": {
                tap: 'onAddSmileButtonTap'
            },
            "dataview#mydataview5": {
                itemtap: 'onSmilesItemTap'
            },
            "list#chatList": {
                selectionchange: 'onChatSelectionChange'
            },
            "segmentedbutton#sentFilter": {
                toggle: 'onMysegmentedbutton1Toggle'
            },
            "dataview[itemId=photosList]": {
                itemtap: 'onDataviewItemTap'
            },
            "button#goToChat": {
                tap: 'onGoToChatTap'
            }
        }
    },

    onDialoguesListItemTap: function(dataview, index, target, record, e, eOpts) {
        var controller=VKM.app.getController('InitDataLoader');
        var dataController=VKM.app.getController('DataLoader');
        var dialoguesController=VKM.app.getController('Dialogues');
        var panel=Ext.ComponentQuery.query('#messagesTabPanel')[0];
        // this.getMessagesPanel().getLayout().setAnimation(null);
        // this.getDialoguesPanel().setHideAnimation({type:"slideOut",direction:"up"});

        this.currentDialogue=record.getData();
        Ext.getStore('Chat').removeAll();

        //console.log(Ext.getStore('Chat'));
        //Ext.getStore('Chat').currentPage=0;
        Ext.getStore('Chat').currentPage=1;
        VKM.app.globals.chat=
            {
            currentUserId:record.get('user_id'),
            currentChatId:record.get('chat_id'),
            messageIds:''

        };

        panel.setActiveItem(3);




        if (record.get('chat_id'))
        {
            this.loadChatHeaderData(record.get('user_id'),record);
            controller.loadChatMessagesStep1(record.get('user_id'),record.get('chat_id'));

        }
        else
        {
            this.loadChatHeaderData(record.get('user_id'));
            controller.loadChatMessagesStep1(record.get('user_id'));
        }

        // }
        // else
        // {
        //     var loadMore=Ext.getStore('AllMessages').getById(0);
        //     Ext.getStore('AllMessages').remove(loadMore);
        //     var offset=Ext.getStore('AllMessages').getCount()+1;
        //     var controller=VKM.app.getController('InitDataLoader');
        //     if(offset)
        //     {
        //         //VKM.app.globals['scrollToRecord']=index;
        //         var activeItem = Ext.ComponentQuery.query("#dialoguesList");
        //         VKM.app.globals['scrollTo'] = activeItem[0].getScrollable().getScroller().getMaxPosition();
        //         controller.loadMessagesStep1(offset,true);
        //     }

        // }
    },

    onChatListItemTap: function(dataview, index, target, record, e, eOpts) {

    },

    onBackButtonTap: function(button, e, eOpts) {
        // this.getChatControlPanel().setHidden(true);
        // this.getNewMessageContainer().setHidden(false);

        // var dataview=this.getChatList();
        // dataview.inSelection=false;

        this.getChatControlPanel().setHidden(true);
        this.getNewMessageContainer().setHidden(false);
        this.getChatList().deselectAll();
        VKM.app.globals['doNotScrollChat']=false;

    },

    onBackToDialoguesButtonTap: function(button, e, eOpts) {
        VKM.app.globals.chat=null;
        this.getMessagesPanel().setActiveItem(0);
        //this.getMessagesPanel().getLayout().setAnimation('slide');
        //this.getDialoguesPanel().setHideAnimation(null);

    },

    onChatActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        this.getMessagesTabBar().hide();
    },

    onDialoguesActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        this.getMessagesTabBar().setHidden(false);
    },

    onSendMessageButtonTap: function(button, e, eOpts) {
        var attachmentsStore=Ext.getStore('Attachments');
        var attachmentsArray='';
        var forwardArray='';
        var text=document.getElementById('newMessageText')
        var params={
            message:this.cleanMessageText(text),
            v:'5.3',
            access_token:VKM.app.globals.authData['access_token']
        };

        if(this.currentDialogue.chat_id)
        {
            params.chat_id=this.currentDialogue.chat_id;
            params.type=1;

        }
        else
        {
            params.user_id=this.currentDialogue.user_id;
        }
        var lat='';
        var lingitude='';

        if (attachmentsStore.getCount()>0)
        {
            for (var i=0;i<attachmentsStore.getCount();i++)
            {
                if (attachmentsStore.getData().items[i].get('type')!='message')
                {

                    if (attachmentsStore.getData().items[i].get('type')=='geo')
                    {
                        lat=attachmentsStore.getData().items[i].get('lat');
                        lingitude=attachmentsStore.getData().items[i].get('long');
                    }
                    else
                    {
                        if (attachmentsArray!='')
                        {
                            attachmentsArray+=',';
                        };

                        attachmentsArray+=attachmentsStore.getData().items[i].get('id');
                    }
                }
                else
                {
                    if (forwardArray!='')
                    {
                        forwardArray+=',';
                    };

                    forwardArray+=attachmentsStore.getData().items[i].get('id');
                }
                ;
            }
            params.attachment=attachmentsArray;
            params.forward_messages=forwardArray;
            if(lat!=''&&lingitude!='')
            {
                params.lat=lat;
                params['long']=lingitude;
            }

        }
        var url='https://api.vk.com/method/messages.send';
        var dataController=VKM.app.getController('DataLoader');
        if (attachmentsArray!=''||params.message!=''||forwardArray!=''||(lat!=''&&lingitude!=''))
        {
            dataController.go(url,params);

            Ext.getStore('Attachments').removeAll();
            text.innerHTML="";
            this.getAttachments().setHidden(true);
        }
    },

    onNewMessageTextFocus: function(panel) {
        var controller=VKM.app.getController('InitDataLoader');
        var dataController=VKM.app.getController('DataLoader');


        var url='https://api.vk.com/method/account.setOnline';
        //var url='https://api.vk.com/method/users.getFollowers';
        //console.log(VKM.app.globals.authData.user_id);
        var params=
            {
                v:'5.4',
                access_token:VKM.app.globals.authData['access_token']
            };
        dataController.go(url,params);


        var url='https://api.vk.com/method/messages.setActivity';
        var params=
            {
                v:'5.4',
                uid:VKM.app.globals.chat.currentUserId,
                chat_id:VKM.app.globals.chat.currentChatId,
                access_token:VKM.app.globals.authData['access_token'],
                type:"typing"
            };
        dataController.go(url,params);
    },

    onNewMessageTextBlur: function(textfield, e, eOpts) {
        // textfield.setHeight(textfield.oldHeight);
        // this.getCheckMessagesInDialogueButton().setHidden(false);
        // this.getNewMessageSendButton().setHidden(true);
        // this.getNewMessageAttachButton().setHidden(true);

    },

    onNewMessageAttachButtonTap: function(button, e, eOpts) {
        var controller=this;
        var photo=ux.locale.Manager.get('labels.Photo');
        var video=ux.locale.Manager.get('labels.Video');
        var audio=ux.locale.Manager.get('labels.Audio');
        var document=ux.locale.Manager.get('labels.Document');
        var location=ux.locale.Manager.get('labels.Map');
        var cancel=ux.locale.Manager.get('labels.Cancel');

        button.actions= Ext.create('Ext.ActionSheet', {
            items: [
                {

                    text: photo,
                    ui: 'action',
                    scope: button,
                    iconCls:'photo',
                    handler: function() {
                        this.actions.hide();
                        button.actions= Ext.create('Ext.ActionSheet', {
                            items: [
                                {
                                    text: ux.locale.Manager.get('labels.chooseexistingphoto'),
                                    ui: 'action',
                                    scope: button,
                                    //iconCls:'photo',
                                    handler: function() {
                                    this.actions.hide();
                                    controller.chooseAlbumDialogue(controller);

                                    }
                                },
                                {
                                    text: ux.locale.Manager.get('labels.takephoto'),
                                    ui: 'action',
                                    scope: button,
                                    //iconCls:'photo',
                                    handler: function() {
                                        this.actions.hide();
                                        controller.takePhoto(controller);
                                    }
                                },
                                {
                                    text: ux.locale.Manager.get('labels.uploadphoto'),
                                    ui: 'action',
                                    scope: button,
                                    //iconCls:'photo',
                                    handler: function() {
                                        this.actions.hide();
                                        controller.uploadPhoto(controller);
                                    }
                                },
                                {
                                    xtype: 'button',
                                    text: cancel,
                                    ui:'action',
                                    iconCls:'delete',
                                    scope: button,
                                    handler: function() {
                                        this.actions.hide();
                                    }
                                }
                            ]
                        });
                        Ext.Viewport.add(button.actions);
                        button.actions.show();
                    }
                },
                {
                    text: video,
                    scope: button,
                    ui:'action',
                    iconCls:'video',
                    handler: function() {
                        this.actions.hide();
                        controller.chooseVideoAlbumDialogue(controller);
                    }
                },
                {
                    text: audio,
                    scope: button,
                    ui:'action',
                    iconCls:'music',
                    handler: function() {
                        this.actions.hide();
                        button.actions= Ext.create('Ext.ActionSheet', {
                            items: [
                                {
                                    text: ux.locale.Manager.get('labels.chooseexistingsound'),
                                    ui: 'action',
                                    scope: button,
                                    //iconCls:'photo',
                                    handler: function() {
                                        this.actions.hide();
                                        controller.chooseAudioDialogue(controller);

                                    }
                                },
        //                         {
        //                             text: ux.locale.Manager.get('labels.takesound'),
        //                             ui: 'action',
        //                             scope: button,
        //                             //iconCls:'photo',
        //                             handler: function() {
        //                                 this.actions.hide();
        //                                 controller.takeSound(controller);
        //                             }
        //                         },
                                {
                                    text: ux.locale.Manager.get('labels.uploadsound'),
                                    ui: 'action',
                                    scope: button,
                                    //iconCls:'photo',
                                    handler: function() {
                                        this.actions.hide();
                                        controller.uploadSound(controller);
                                    }
                                },
                                {
                                    xtype: 'button',
                                    text: cancel,
                                    ui:'action',
                                    iconCls:'delete',
                                    scope: button,
                                    handler: function() {
                                        this.actions.hide();
                                    }
                                }
                            ]
                        });
                        Ext.Viewport.add(button.actions);
                        button.actions.show();
                    }
                },
                {
                    text: document,
                    scope: button,
                    ui:'action',
                    iconCls:'document',
                    handler: function() {
                        this.actions.hide();
                        button.actions= Ext.create('Ext.ActionSheet', {
                            items: [
                                {
                                    text: ux.locale.Manager.get('labels.chooseexistingdoc'),
                                    ui: 'action',
                                    scope: button,
                                    //iconCls:'photo',
                                    handler: function() {
                                        this.actions.hide();
                                        controller.chooseDocumentsDialogue(controller);

                                    }
                                },
                                //                         {
                                //                             text: ux.locale.Manager.get('labels.takesound'),
                                //                             ui: 'action',
                                //                             scope: button,
                                //                             //iconCls:'photo',
                                //                             handler: function() {
                                //                                 this.actions.hide();
                                //                                 controller.takeSound(controller);
                                //                             }
                                //                         },
                                {
                                    text: ux.locale.Manager.get('labels.uploaddoc'),
                                    ui: 'action',
                                    scope: button,
                                    //iconCls:'photo',
                                    handler: function() {
                                        this.actions.hide();
                                        controller.uploadDoc(controller);
                                    }
                                },
                                {
                                    xtype: 'button',
                                    text: cancel,
                                    ui:'action',
                                    iconCls:'delete',
                                    scope: button,
                                    handler: function() {
                                        this.actions.hide();
                                    }
                                }
                            ]
                        });
                        Ext.Viewport.add(button.actions);
                        button.actions.show();
                    }
                },
                {
                    text: location,
                    scope: button,
                    ui:'action',
                    iconCls:'location',
                    handler: function() {
                        console.log(1234);
                        //VKM.app.getCurrentLocation();
                        controller.chooseMapDialogue(controller);


                        this.actions.hide();
                    }
                },
                {
                    xtype: 'button',
                    text: cancel,
                    ui:'action',
                    iconCls:'delete',
                    scope: button,
                    handler: function() {
                        this.actions.hide();
                    }
                }


            ]
        });
        Ext.Viewport.add(button.actions);
        button.actions.show();

    },

    onAlbumListItemTap: function(dataview, index, target, record, e, eOpts) {
        var controller=dataview.config.controller;
        //

        var store=Ext.getStore('Images');
        var url='https://api.vk.com/method/photos.get';

        var params=
            {
                v:'5.3',
                access_token:VKM.app.globals.authData['access_token'],
                album_id:record.get('id')
            };
        store.getProxy().setUrl(url);
        store.getProxy().setExtraParams(params);
        store.removeAll();
        store.currentPage=0;
        store.load({
            callback:function(){
                var imageList=controller.overlay.add( {
                    xtype: 'dataview',
                    defaultType:'photoitem',
                    //docked: 'top',
                    height: "100%",
                    hidden: false,
                    itemId: 'photosList',
                    width: '100%',
                    //scrollable: 'vertical',
                    selectedCls: 'selectedMask',
                    deferEmptyText: false,
                    emptyText: 'Вложений нет',
                    useComponents:true,
                    inline: { wrap: true },
                    store: 'Images',
                    plugins: [
                        {
                            xclass: 'Ext.plugin.DataViewPaging',
                            autoPaging: true
                        }
                    ]

                });

                if(controller.overlay.config.src=='Dialogues')
                {
                    controller.overlay.query('#chatAttachConfirmButton')[0].setHidden(false);
                    imageList.setMode('MULTI');
                    imageList.controller=controller;

                }
                else
                {
                    imageList.fireItemTap=true;
                    imageList.controller=controller;
                    controller.overlay.query('#chatAttachConfirmButton')[0].setHidden(true);
                    imageList.setMode('SINGLE');
                }

            }
        })

        var dataController=VKM.app.getController('InitDataLoader');
        dataview.destroy();

    },

    onNewMessageCancelButtonTap: function(button, e, eOpts) {
        var text=document.getElementById('newMessageText')
        Ext.getStore('Attachments').removeAll();
        this.getAttachments().setHidden(true);
        text.innerHTML="";


    },

    onChatControlDeleteButtonTap: function(button, e, eOpts) {
        var controller=VKM.app.getController('InitDataLoader');
        var dataController=VKM.app.getController('DataLoader');
        var url='https://api.vk.com/method/messages.delete';
        var dialoguesController=this;

        var message_ids='';


        var dataview=controller.getChatList();
        var messageStore=Ext.getStore('Chat');
        var messageStore1=Ext.getStore('InboxMessages');


        var MB = Ext.MessageBox;
        Ext.apply(MB, {
            YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
            NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
        });
        Ext.apply(MB, {
            YESNO: [MB.NO, MB.YES]
        });

        Ext.Msg.confirm(ux.locale.Manager.get('labels.DeleteConfirm'), "", function(e){
            if(e == 'yes'){
                if(dataview.getSelection().length>0)
                {
                    var selected=dataview.getSelection();
                    for (var i=0;i<selected.length;i++)
                    {
                        var record=messageStore.getById(selected[i].get('id'));
                        if (message_ids!='')
                        {
                            message_ids+=',';
                        };
                        message_ids+=selected[i].get('id');
                        messageStore.remove(record);
                        messageStore1.remove(record);
                    };


                    console.log(message_ids);
                    if (message_ids!='')
                    {
                        var params=
                            {
                                v:'5.4',
                                access_token:VKM.app.globals.authData['access_token'],
                                message_ids:message_ids
                            };
                        dataController.go(url,params);
                    };
                }
                dataview.deselectAll();
                dialoguesController.checkedChatMessages=0;
                dialoguesController.getChatControlReplyButton().setBadgeText('');
                dialoguesController.getChatControlDeleteButton().setBadgeText('');
                dialoguesController.getChatControlReplyButton().setBadgeText(0);
                dialoguesController.getChatControlDeleteButton().setBadgeText(0);
                dialoguesController.getChatControlStarButton().setBadgeText(0);

                dialoguesController.getChatControlPanel().setHidden(true);
                dialoguesController.getNewMessageContainer().setHidden(false);
            }


        });


    },

    onChatControlReplyButtonTap: function(button, e, eOpts) {
        var dataController=VKM.app.getController('InitDataLoader');
        var controller=this;
        controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            items:[
                {
                    xtype: 'container',
                    itemId: 'contactsForward',
                    layout: {
                        type: 'fit'
                    },
                    items: [
                        {
                            xtype: 'searchfield',
                            boundStore: 'Friends',
                            doFilter: 'true',
                            fields: [
                                'first_name',
                                'last_name'
                            ],
                            docked: 'top',
                            itemId: 'searchAllContacts',
                            listeners: [
                                {
                                    fn: function(element, eOpts) {
                                        this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                    },
                                    event: 'painted'
                                }
                            ]
                        },
                        {
                            xtype: 'list',
                            itemId: 'contactsForwardFriendsList',
                            defaultType: 'contactItem',
                            store: 'Friends',
                            mode:'MULTI',
                            grouped: true,
                            useSimpleItems: false,
                            indexBar: {
                                itemId: 'friendsIndex',
                                style: {
                                    'font-size': '1.2em'
                                }
                            },

                            plugins: [
                                {
                                    autoPaging: true,
                                    loadMoreText: ' ',
                                    noMoreRecordsText: ' ',
                                    type: 'listpaging'
                                },
                                {
                                    type: 'pullrefresh'
                                }
                            ],
                            listeners: [
                                {
                                    fn: function(element, eOpts) {
                                        var store=Ext.getStore('Friends');
                                        if(store.getCount()==0)
                                        {
                                            var controller=VKM.app.getController('InitDataLoader');
                                            var dataController=VKM.app.getController('DataLoader');
                                            var url='https://api.vk.com/method/execute.friends';

                                            var params=
                                                {
                                                    v:'5.3',
                                                    access_token:VKM.app.globals.authData['access_token'],
                                                    rev:0
                                                };


                                            store.getProxy().setUrl(url);
                                            store.getProxy().setExtraParams(params);
                                            store.getProxy().setReader(
                                                Ext.create("ux.Friends",
                                                           {
                                                               rootProperty: 'response.friends.items',
                                                               totalProperty: 'response.friends.count'
                                                           }
                                                          )
                                            )
                                            store.load({callback:function(request,success,response){
                                                VKM.app.globals.needRefresh['allFriendsList']=false;
                                            }});

                                        }
                                    },
                                    event: 'painted'
                                }
                            ]
                        }
                    ]
                },

                {
                    xtype: 'container',
                    width: '100%',
                    docked: 'bottom',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatForwardConfirmButton',
                            handler: function(){
                                var message_ids='';
                                var attachments=[];
                                var dataview=controller.getChatList();
                                var messageStore=Ext.getStore('Chat');
                                for (var i=0;i<dataview.getSelection().length;i++)
                                {
                                    var record=messageStore.getById(dataview.getSelection()[i].get('id'));
                                    attachments.push({type:'message',id:record.get('id'),name:record.get('body')})
                                };
                                chatSelectors=Ext.ComponentQuery.query("#contactsForwardFriendsList")[0].getSelection();

                                var message_ids='';
                                if(chatSelectors.length==1)
                                {
                                    controller.createMessage(chatSelectors[0].getData(),attachments);
                                    controller.getChatControlPanel().setHidden(true);
                                    controller.getNewMessageContainer().setHidden(false);
                                    controller.overlay.destroy();
                                }
                                else
                                {
                                    for (var i=0;i<chatSelectors.length;i++)
                                    {
                                        if (message_ids!='')
                                        {
                                            message_ids+=',';
                                        };
                                        message_ids+=chatSelectors[i].getData()['id'];
                                    };
                                    var dataController=VKM.app.getController('DataLoader');
                                    var url='https://api.vk.com/method/messages.createChat';
                                    //var url='https://api.vk.com/method/users.getFollowers';
                                    //console.log(VKM.app.globals.authData.user_id);
                                    var params=
                                        {
                                            v:'5.4',
                                            uids:message_ids,
                                            user_ids:message_ids,
                                            access_token:VKM.app.globals.authData['access_token']
                                        };
                                    controller.getChatControlPanel().setHidden(true);
                                    controller.getNewMessageContainer().setHidden(false);
                                    //VKM.app.globals['doNotScrollChat']=false;
                                    if(attachments)
                                    {
                                        Ext.getStore('Attachments').add(attachments);
                                    }
                                    dataController.go(url,params,controller.openNewChatStep1,attachments);
                                    controller.overlay.destroy();
                                }
                                dataview.deselectAll();

                            },
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'checkMark'
                        },
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatForwardCancelButton',
                            handler: function(){controller.overlay.destroy()},
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'delete'
                        }
                    ]
                }
            ]
        });

    },

    onOnlineActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        // this.getSearchAllContacts().setValue('');
        // this.getSearchOnlineContacts().setValue('');
        // Ext.getStore('Friends').clearFilter();
        // Ext.getStore('Friends').filter('online',1);
    },

    onOnlineDeactivate: function(oldActiveItem, container, newActiveItem, eOpts) {
        // this.getSearchAllContacts().setValue('');
        // this.getSearchOnlineContacts().setValue('');
        // Ext.getStore('Friends').clearFilter();
    },

    onNewChatButtonTap: function(button, e, eOpts) {
        var dataController=VKM.app.getController('InitDataLoader');
        var controller=this;
        controller.contactChooser=Ext.Viewport.add({
            xtype: 'popupchooser',
            items:[
                {
                    xtype: 'container',
                    itemId: 'contactsNewChat',
                    layout: {
                        type: 'fit'
                    },
                    items: [
                        {
                            xtype: 'searchfield',
                            boundStore: 'Friends',
                            doFilter: 'true',
                            fields: [
                                'first_name',
                                'last_name'
                            ],
                            docked: 'top',
                            itemId: 'searchAllContacts',
                            listeners: [
                                {
                                    fn: function(element, eOpts) {
                                        this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                    },
                                    event: 'painted'
                                }
                            ]
                        },
                        {
                            xtype: 'list',
                            itemId: 'contactsToSendList',
                            defaultType: 'contactItem',
                            store: 'Friends',
                            mode:'MULTI',
                            grouped: true,
                            useSimpleItems: false,
                            indexBar: {
                                itemId: 'friendsIndex',
                                style: {
                                    'font-size': '1.2em'
                                }
                            },
                            plugins: [
                                {
                                    autoPaging: true,
                                    loadMoreText: ' ',
                                    noMoreRecordsText: ' ',
                                    type: 'listpaging'
                                },
                                {
                                    type: 'pullrefresh'
                                }
                            ],
                            listeners: [
                                {
                                    fn: function(element, eOpts) {
                                        var store=Ext.getStore('Friends');
                                        if(store.getCount()==0)
                                        {
                                            var controller=VKM.app.getController('InitDataLoader');
                                            var dataController=VKM.app.getController('DataLoader');
                                            var url='https://api.vk.com/method/execute.friends';

                                            var params=
                                                {
                                                    v:'5.3',
                                                    access_token:VKM.app.globals.authData['access_token'],
                                                    rev:0
                                                };


                                            store.getProxy().setUrl(url);
                                            store.getProxy().setExtraParams(params);
                                            store.getProxy().setReader(
                                                Ext.create("ux.Friends",
                                                           {
                                                               rootProperty: 'response.friends.items',
                                                               totalProperty: 'response.friends.count'
                                                           }
                                                          )
                                            )
                                            store.load({callback:function(request,success,response){
                                                VKM.app.globals.needRefresh['allFriendsList']=false;
                                            }});

                                        }
                                    },
                                    event: 'painted'
                                }
                            ]
                        }
                    ]
                },

                {
                    xtype: 'container',
                    width: '100%',
                    docked: 'bottom',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatForwardConfirmButton',
                            handler: function(){

                                chatSelectors=Ext.ComponentQuery.query("#contactsToSendList")[0].getSelection();

                                if(chatSelectors.length==1)
                                {
                                    controller.createMessage(chatSelectors[0].getData());
                                    controller.contactChooser.destroy();
                                }
                                else
                                {
                                    var message_ids='';
                                    for (var i=0;i<chatSelectors.length;i++)
                                    {
                                        if (message_ids!='')
                                        {
                                            message_ids+=',';
                                        };
                                        message_ids+=chatSelectors[i].getData()['id'];
                                    };
                                    var dataController=VKM.app.getController('DataLoader');
                                    var url='https://api.vk.com/method/messages.createChat';
                                    //var url='https://api.vk.com/method/users.getFollowers';
                                    //console.log(VKM.app.globals.authData.user_id);
                                    var params=
                                        {
                                            v:'5.4',
                                            uids:message_ids,
                                            user_ids:message_ids,
                                            access_token:VKM.app.globals.authData['access_token']
                                        };
                                    dataController.go(url,params,controller.openNewChatStep1);
                                    controller.contactChooser.destroy();
                                }

                            },
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'checkMark'
                        },
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatForwardCancelButton',
                            handler: function(){controller.contactChooser.destroy()},
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'delete'
                        }
                    ]
                }
            ]
        });

    },

    onAddSmileButtonTap: function(button, e, eOpts) {
        var dataController=VKM.app.getController('InitDataLoader');
        var controller=this;
        controller.smilesOverlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            hideAnimation: null,
            showAnimation:null,
            items:[
                {xtype:'emojiset'},
                {
                    xtype: 'container',
                    width: '100%',
                    docked: 'bottom',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatAddSmileButton',
                            handler: function(){
        //                         var imagesStore=Ext.getStore('Images');
        //                         var attachmentStore=Ext.getStore('Attachments');

        //                         for (var i=0;i<imagesStore.getCount();i++)
        //                         {
        //                             if(imagesStore.getData().items[i].get('selected'))
        //                             {
        //                                 var attachment={
        //                                     picture:imagesStore.getData().items[i].get('photo_130'),
        //                                     name:'',
        //                                     id:'photo'+imagesStore.getData().items[i].get('owner_id')+'_'+imagesStore.getData().items[i].get('id')
        //                                 };
        //                                 attachmentStore.add(attachment);
        //                             }
        //                         }
                                controller.smilesOverlay.hide();
                            },
                            ui: 'action',
                            hidden:true,
                            iconAlign: 'center',
                            iconCls: 'checkMark'
                        },
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatAttachCancelButton',
                            handler: function(){controller.smilesOverlay.hide()},
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'delete'
                        }
                    ]
                }
            ]
        });

        controller.smilesOverlay.show();
    },

    onSmilesItemTap: function(dataview, index, target, record, e, eOpts) {






        //messageElement.innerHTML = messageElement.innerHTML + ;
        //messageElement.insertImage()

        //

        setTimeout(
            function ()
            {
                VKM.app.restoreSelection();
                document.getElementById('newMessageText').focus();
                document.execCommand('insertHTML', false,'<image style="margin:0px 3px 0px 3px" src="'+record.get('path16')+'"\>');

            },1);

        //VKM.app.restoreSelection();

        this.smilesOverlay.hide();


        //VKM.app.restoreCaretPos();

    },

    onChatSelectionChange: function(selectable, records, eOpts) {
        console.log(111);
        var selection=selectable.getSelection();
        var checked=selection.length;
        this.getChatControlReplyButton().setBadgeText(checked);
        this.getChatControlDeleteButton().setBadgeText(checked);
        this.getChatControlStarButton().setBadgeText(checked);
        if(checked>0)
        {
            this.getChatControlPanel().setHidden(false);
            this.getNewMessageContainer().setHidden(true);
            VKM.app.globals['doNotScrollChat']=true;
        }
        else
        {
            //var dataview=this.getChatList();
            //dataview.inSelection=false;
            this.getChatControlPanel().setHidden(true);
            this.getNewMessageContainer().setHidden(false);
            VKM.app.globals['doNotScrollChat']=false;
        }
        ;
    },

    onMysegmentedbutton1Toggle: function(segmentedbutton, button, isPressed, eOpts) {
        if (isPressed==true)
        {
            var store=Ext.getStore('InboxMessages');
            var params=store.getProxy().getExtraParams();
            params["out"]=button.config.out;
            if(button.config.out==1)
            {
                this.getReadFilter().setHidden(true);
            }
            else
            {
                this.getReadFilter().setHidden(false);
            }
            store.getProxy().setExtraParams(params);
            store.currentPage=1;
            store.load();
        }
    },

    onDataviewItemTap: function(dataview, index, target, record, e, eOpts) {
        console.log(1);
        if(dataview.fireItemTap)
        {
            dataview.controller.changePhoto(record);
        }
    },

    onGoToChatTap: function(button, e, eOpts) {
        button.up('#oneMessage').destroy();
        var controller=VKM.app.getController('InitDataLoader');
        var dataController=VKM.app.getController('DataLoader');
        var dialoguesController=VKM.app.getController('Dialogues');
        var panel=Ext.ComponentQuery.query('#messagesTabPanel')[0];
        var record=button.record;
        this.currentDialogue=record.getData();
        Ext.getStore('Chat').removeAll();

        //console.log(Ext.getStore('Chat'));
        //Ext.getStore('Chat').currentPage=0;
        Ext.getStore('Chat').currentPage=1;
        VKM.app.globals.chat=
            {
            currentUserId:record.get('user_id'),
            currentChatId:record.get('chat_id'),
            messageIds:''

        };

        panel.setActiveItem(3);




        if (record.get('chat_id'))
        {
            this.loadChatHeaderData(record.get('user_id'),record);
            controller.loadChatMessagesStep1(record.get('user_id'),record.get('chat_id'));

        }
        else
        {
            this.loadChatHeaderData(record.get('user_id'));
            controller.loadChatMessagesStep1(record.get('user_id'));
        }

    },

    loadChatHeaderData: function(userId, message) {
        var user=Ext.getStore('Users').getById(userId);
        if(!message)
        {
            message=Ext.getStore('AllMessages').getById(userId);
        }

        var title=Ext.String.ellipsis(user.get('first_name')+' '+user.get('last_name'),23);
        var photo=user.get('photo_50');

        var isOnlineCls="";
        if (user.get('online'))
        {
            isOnlineCls='class="userOnline"';
        }
        else
        {
            isOnlineCls='class="userOffline"';
        }

        var chatHeader=this.getChatHeader();



        if (message&&message.get('chat_id'))
        {
            chatHeader.down('#chatControlEditButton').setHidden(false);
            chatHeader.down('#chatControlEditButton').chatRecord=message;
            chatHeader.down('#deleteChatButton').setHidden(true);


            if(message.get('title'))
            {
                title=message.get('title');
            };
            if(message.get('photo_50'))
            {
                photo=message.get('photo_50');
            };
            isOnlineCls='class="userOffline"';
            chatHeader.down('#name1').setHidden(true);
        }
        else
        {
            chatHeader.down('#chatControlEditButton').setHidden(true);
            chatHeader.down('#deleteChatButton').setHidden(false);
            chatHeader.down('#deleteChatButton').chatRecord=message;
        //     if(user.get('status'))
        //     {
        //         chatHeader.down('#name1').setHtml('<i '+user.get('status')+'</i>');
        //     }
            if (user.get('last_seen'))
            {
                var last_seen=new Date(parseInt(user.get('last_seen').time)*1000);
                chatHeader.down('#name1').setHidden(false);
                chatHeader.down('#name1').setHtml(ux.locale.Manager.get('labels.lastvisit')+' '+moment(last_seen).fromNow());
                if(user.get('online'))
                {
                    chatHeader.down('#name1').setHtml(ux.locale.Manager.get('labels.Online'));
                }
            }
            else
            {
                chatHeader.down('#name1').setHidden(false);
                chatHeader.down('#name1').setHtml(ux.locale.Manager.get('labels.Online'));
                if(user.get('online'))
                {
                    chatHeader.down('#name1').setHtml(ux.locale.Manager.get('labels.Online'));
                }

            }



        }



        chatHeader.down('#avatar').setSrc(photo);




        chatHeader.down('#name').setHtml('<span '+isOnlineCls+'>'+title+'</span>'); //+isOnline);


    },

    takePhoto: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');
        controller.uploadOverlay=controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            centered:false,
            modal:false,
            width: '10px',
            height:'10px',
            items:[
                {
                    xtype: 'container',
                    width: '10px',
                    docked: 'bottom',
                    itemId:'tmpPhoto',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    }
                }]
        });



        var a=Ext.ComponentQuery.query('#tmpPhoto')[0];


        VKM.app.globals.aaa=function(){

            VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getMessagesUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadFileStep2,{});
        }
        a.setHtml('<form name ="subscribe" id="demo-form" action="#"> <input type = "file" capture="camera" onchange = "VKM.app.globals.aaa()" id = "photoToUpload1" name = "photo" accept= "image" / ></form>');
        document.getElementById("photoToUpload1").click();


        //a.setHidden(true);


    },

    MyFunction135: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');
        controller.uploadOverlay=controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            centered:false,
            modal:false,
            width: '10px',
            height:'10px',
            items:[
                {
                    xtype: 'container',
                    width: '10px',
                    docked: 'bottom',
                    itemId:'tmpPhoto',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    }
                }]
        });



        var a=Ext.ComponentQuery.query('#tmpPhoto')[0];


        VKM.app.globals.aaa=function(){

            VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getMessagesUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadFileStep2,{});
        }
        a.setHtml('<form name ="subscribe" id="demo-form" action="#"> <input type = "file" capture="camera" onchange = "VKM.app.globals.aaa()" id = "photoToUpload1" name = "photo" accept= "image" / ></form>');
        document.getElementById("photoToUpload1").click();


        //a.setHidden(true);


    },

    takeSound: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');
        controller.uploadOverlay=controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            centered:false,
            modal:false,
            width: '10px',
            height:'10px',
            items:[
                {
                    xtype: 'container',
                    width: '10px',
                    docked: 'bottom',
                    itemId:'tmpPhoto',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    }
                }]
        });



        var a=Ext.ComponentQuery.query('#tmpPhoto')[0];


        VKM.app.globals.aaa=function(){

            VKM.app.getController('DataLoader').go('https://api.vk.com/method/audio.getUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadAuidoStep2,{});
        }
        a.setHtml('<form name ="subscribe" id="demo-form" action="#"> <input type = "file" capture="microphone" onchange = "VKM.app.globals.aaa()" id = "audioToUpload1" name = "file" accept= "audio/*;capture=microphone" / ></form>');
        document.getElementById("audioToUpload1").click();


        //a.setHidden(true);


    },

    uploadPhoto: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');
        controller.uploadOverlay=controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            centered:false,
            modal:false,
            width: '10px',
            height:'10px',
            items:[
                {
                    xtype: 'container',
                    width: '10px',
                    docked: 'bottom',
                    itemId:'tmpPhoto',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    }
                }]
        });



        var a=Ext.ComponentQuery.query('#tmpPhoto')[0];


        VKM.app.globals.aaa=function(){

            VKM.app.getController('DataLoader').go('https://api.vk.com/method/photos.getMessagesUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadFileStep2,{});
        }
        a.setHtml('<form name ="subscribe" id="demo-form" action="#"> <input onchange="javascript:alert(123);" type="text" name="name" id="txt_name" /> <input type = "file" onchange = "VKM.app.globals.aaa()" id = "photoToUpload1" name = "photo" accept= "image" / ></form>');
        document.getElementById("photoToUpload1").click();
        //a.setHidden(true);
    },

    uploadDoc: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');
        controller.uploadOverlay=controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            centered:false,
            modal:false,
            width: '10px',
            height:'10px',
            items:[
                {
                    xtype: 'container',
                    width: '10px',
                    docked: 'bottom',
                    itemId:'tmpPhoto',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    }
                }]
        });



        var a=Ext.ComponentQuery.query('#tmpPhoto')[0];


        VKM.app.globals.aaa=function(){

            VKM.app.getController('DataLoader').go('https://api.vk.com/method/docs.getUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadDocStep2,{});
        }
        a.setHtml('<form name ="subscribe" id="demo-form" action="#"> <input onchange="javascript:alert(123);" type="text" name="name" id="txt_name" /> <input type = "file" onchange = "VKM.app.globals.aaa()" id = "docToUpload1" name = "file"/ ></form>');
        document.getElementById("docToUpload1").click();
        //a.setHidden(true);
    },

    uploadSound: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');
        controller.uploadOverlay=controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            centered:false,
            modal:false,
            width: '10px',
            height:'10px',
            items:[
                {
                    xtype: 'container',
                    width: '10px',
                    docked: 'bottom',
                    itemId:'tmpPhoto',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    }
                }]
        });



        var a=Ext.ComponentQuery.query('#tmpPhoto')[0];


        VKM.app.globals.aaa=function(){

            VKM.app.getController('DataLoader').go('https://api.vk.com/method/audio.getUploadServer',{v: '5.4',access_token: VKM.app.globals.authData.access_token},VKM.app.getController('DataLoader').uploadAuidoStep2,{});
        }
        a.setHtml('<form name ="subscribe" id="demo-form" action="#"> <input type = "file" onchange = "VKM.app.globals.aaa()" id = "audioToUpload1" name = "file" accept= "audio" / ></form>');
        document.getElementById("audioToUpload1").click();

        //a.setHidden(true);
    },

    chooseAlbumDialogue: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');

        controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            src:'Dialogues',
            items:[
                {xtype:'albumlist',controller:controller},
                {
                    xtype: 'container',
                    width: '100%',
                    docked: 'bottom',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatAttachConfirmButton',
                            handler: function(){
                                var imagesStore=Ext.getStore('Images');
                                var attachmentStore=Ext.getStore('Attachments');
                                var selection=controller.overlay.down("#photosList").getSelection();
                                for (var i=0;i<selection.length;i++)
                                {
                                    var attachment={
                                        picture:selection[i].get('photo_130'),
                                        name:'',
                                        id:'photo'+selection[i].get('owner_id')+'_'+selection[i].get('id')
                                    };
                                    attachmentStore.add(attachment);
                                }
                                controller.overlay.destroy()
                            },
                            ui: 'action',
                            hidden:true,
                            iconAlign: 'center',
                            iconCls: 'checkMark'
                        },
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatAttachCancelButton',
                            handler: function(){controller.overlay.destroy()},
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'delete'
                        }
                    ]
                }
            ]
        });
        dataController.loadAlbumsStep1();
    },

    chooseVideoAlbumDialogue: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');

        controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            items:[
                {
                    xtype:'list',
                    store: 'Videos',
                    mode: 'MULTI',
                    itemId:'videoAttachmentsList',
                    itemTpl:['<div class="img1" style="vertival-align:bottom;background-image: url({photo_320});">{title}</div>']
                },
                {
                    xtype: 'container',
                    width: '100%',
                    docked: 'bottom',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'confirmVideoAttachButton',
                            handler: function(){
                                var attachmentsList=Ext.ComponentQuery.query('#videoAttachmentsList')[0];
                                var attachments=attachmentsList.getSelection();
                                var attachmentStore=Ext.getStore('Attachments');

                                for (var i=0;i<attachments.length;i++)
                                {
                                    var attachment={
                                        picture:attachments[i].get('photo_130'),
                                        name:attachments[i].get('title'),
                                        id:'video'+attachments[i].get('owner_id')+'_'+attachments[i].get('id')
                                    };
                                    attachmentStore.add(attachment);
                                }
                                controller.overlay.destroy()
                            },
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'checkMark'
                        },
                        {
                            xtype: 'button',
                            width: '30%',
                            handler: function(){controller.overlay.destroy()},
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'delete'
                        }
                    ]
                }
            ]
        });
        console.log("messagesStore");
        dataController.loadVideosStep1();
    },

    chooseMapDialogue: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');

        controller.overlay=Ext.Viewport.add({
            xtype: 'mapchooser',
            itemId:'tmpPanel'
        })
        //     ,
        //     items:[
        //         {
        //             xtype: 'component',
        //             html:''
        //         },
        //         {
        //             xtype: 'container',
        //             width: '100%',
        //             docked: 'bottom',
        //             style: {
        //                 'font-size': '1.2em'
        //             },
        //             ui: 'plain',
        //             layout: {
        //                 align: 'stretch',
        //                 pack: 'center',
        //                 type: 'hbox'
        //             },
        //             items: [
        //                 {
        //                     xtype: 'button',
        //                     width: '30%',
        //                     itemId: 'confirmVideoAttachButton',
        //                     handler: function(){
        //                         var attachmentsList=Ext.ComponentQuery.query('#videoAttachmentsList')[0];
        //                         var attachments=attachmentsList.getSelection();
        //                         var attachmentStore=Ext.getStore('Attachments');

        //                         for (var i=0;i<attachments.length;i++)
        //                         {
        //                             var attachment={
        //                                 picture:attachments[i].get('photo_130'),
        //                                 name:attachments[i].get('title'),
        //                                 id:'video'+attachments[i].get('owner_id')+'_'+attachments[i].get('id')
        //                             };
        //                             attachmentStore.add(attachment);
        //                         }
        //                         controller.overlay.destroy()
        //                     },
        //                     ui: 'action',
        //                     iconAlign: 'center',
        //                     iconCls: 'checkMark'
        //                 },
        //                 {
        //                     xtype: 'button',
        //                     width: '30%',
        //                     handler: function(){controller.overlay.destroy()},
        //                     ui: 'action',
        //                     iconAlign: 'center',
        //                     iconCls: 'delete'
        //                 }
        //             ]
        //         }
        //     ]
        // });

    },

    chooseAudioDialogue: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');

        controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            items:[
                    {
                        xtype: 'container',
                        docked: 'top',
                        layout: {
                            type: 'hbox'
                        },
                        items: [
                            {
                                xtype: 'searchfield',
                                boundStore: 'Audios',
                                doFilter: 'true',
                                fields: [
                                    'title',
                                    'artist'
                                ],
                                flex: 1,
                                itemId: 'searchAudios',
                                listeners: [
                                    {
                                        fn: function(element, eOpts) {
                                            this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                        },
                                        event: 'painted'
                                    }
                                ]
                            }
        //                     {
        //                         xtype: 'button',
        //                         itemId: 'sortAsc',
        //                         ui: 'action',
        //                         iconCls: 'add'
        //                     },
        //                     {
        //                         xtype: 'button',
        //                         itemId: 'sortDesc',
        //                         handler: function(button, e) {
        //                         }

        //                     }
                        ]
                    },
                {
                    xtype:'list',
                    store: 'Audios',
                    itemId:'audioAttachmentsList',
                    mode: 'MULTI',
                    pressedCls: 'x-item-selected',
                    pressedDelay: 0,
                    plugins: [
                        {
                            autoPaging: true,
                            loadMoreText: ' ',
                            noMoreRecordsText: ' ',
                            type: 'listpaging'
                        },
                        {
                            scrollerAutoRefresh: true,
                            type: 'pullrefresh'
                        }
                    ],


                    //})
                    itemTpl:['<div class="i" style="">{artist},{title}</div>']
                },
                {
                    xtype: 'container',
                    width: '100%',
                    docked: 'bottom',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'confirmAudioAttachButton',
                            handler: function(){
                                var attachmentsList=Ext.ComponentQuery.query('#audioAttachmentsList')[0];
                                var attachments=attachmentsList.getSelection();
                                var attachmentStore=Ext.getStore('Attachments');

                                for (var i=0;i<attachments.length;i++)
                                {
                                    var attachment={
                                        type:'audio',
                                        name:attachments[i].get('artist')+','+attachments[i].get('title'),
                                        id:'audio'+attachments[i].get('owner_id')+'_'+attachments[i].get('id')
                                    };
                                    attachmentStore.add(attachment);
                                }
                                controller.overlay.destroy()
                            },
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'checkMark'
                        },
                        {
                            xtype: 'button',
                            width: '30%',
                            handler: function(){controller.overlay.destroy()},
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'delete'
                        }
                    ]
                }
            ]
        });
        dataController.loadAudioStep1();
    },

    chooseDocumentsDialogue: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');

        controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            items:[
                {
                    xtype: 'container',
                    docked: 'top',
                    layout: {
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'searchfield',
                            boundStore: 'Docs',
                            doFilter: 'true',
                            fields: [
                                'title'
                            ],
                            flex: 1,
                            itemId: 'searchAudios',
                            listeners: [
                                {
                                    fn: function(element, eOpts) {
                                        this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                    },
                                    event: 'painted'
                                }
                            ]
                        }
                        //                     {
                        //                         xtype: 'button',
                        //                         itemId: 'sortAsc',
                        //                         ui: 'action',
                        //                         iconCls: 'add'
                        //                     },
                        //                     {
                        //                         xtype: 'button',
                        //                         itemId: 'sortDesc',
                        //                         handler: function(button, e) {
                        //                         }

                        //                     }
                    ]
                },
                {
                    xtype:'list',
                    store: 'Docs',
                    id:'docAttachmentsList',
                    mode: 'MULTI',
                    itemTpl:['<div class="i" style="">{title}({size})</div>'],
                    pressedCls: 'x-item-selected',
                    pressedDelay: 0,
                    plugins: [
                        {
                            autoPaging: true,
                            loadMoreText: ' ',
                            noMoreRecordsText: ' ',
                            type: 'listpaging'
                        },
                        {
                            scrollerAutoRefresh: true,
                            type: 'pullrefresh'
                        }
                    ]
                },
                {
                    xtype: 'container',
                    width: '100%',
                    docked: 'bottom',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'confirmDocsAttachButton',
                            handler: function(){
                                var attachmentsList=Ext.ComponentQuery.query('#docAttachmentsList')[0];
                                var attachments=attachmentsList.getSelection();
                                var attachmentStore=Ext.getStore('Attachments');

                                for (var i=0;i<attachments.length;i++)
                                {
                                    var icon="resources/images/ext/128/"+attachments[i].get('ext').toUpperCase()+'.jpg';
                                    if (!VKM.app.globals.docIcons[attachments[i].get('ext').toUpperCase()])
                                    {
                                        icon="resources/images/ext/128/Default.jpg";
                                    }

                                    var attachment={
                                        type:'doc',
                                        name:attachments[i].get('title')+' ('+attachments[i].get('size')+')',
                                        id:'doc'+attachments[i].get('owner_id')+'_'+attachments[i].get('id'),
                                        icon:icon};
                                    console.log(attachment);
                                    attachmentStore.add(attachment);
                                }
                                controller.overlay.destroy()

                            },
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'checkMark'
                        },
                        {
                            xtype: 'button',
                            width: '30%',
                            handler: function(){controller.overlay.destroy()},
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'delete'
                        }
                    ]
                }
            ]
        });
        dataController.loadDocsStep1();
    },

    chooseSmileDialogue: function(controller) {
        var dataController=VKM.app.getController('InitDataLoader');

        controller.overlay=Ext.Viewport.add({
            xtype: 'popupchooser',
            items:[
                {xtype:'emojiset'},
                {
                    xtype: 'container',
                    width: '100%',
                    docked: 'bottom',
                    style: {
                        'font-size': '1.2em'
                    },
                    ui: 'plain',
                    layout: {
                        align: 'stretch',
                        pack: 'center',
                        type: 'hbox'
                    },
                    items: [
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatAttachConfirmButton',
                            handler: function(){
                                var imagesStore=Ext.getStore('Images');
                                var attachmentStore=Ext.getStore('Attachments');

                                for (var i=0;i<imagesStore.getCount();i++)
                                {
                                    if(imagesStore.getData().items[i].get('selected'))
                                    {
                                        var attachment={
                                            picture:imagesStore.getData().items[i].get('photo_130'),
                                            name:'',
                                            id:'photo'+imagesStore.getData().items[i].get('owner_id')+'_'+imagesStore.getData().items[i].get('id')
                                        };
                                        attachmentStore.add(attachment);
                                    }
                                }
                                controller.overlay.destroy()
                            },
                            ui: 'action',
                            hidden:true,
                            iconAlign: 'center',
                            iconCls: 'checkMark'
                        },
                        {
                            xtype: 'button',
                            width: '30%',
                            itemId: 'chatAttachCancelButton',
                            handler: function(){controller.overlay.destroy()},
                            ui: 'action',
                            iconAlign: 'center',
                            iconCls: 'delete'
                        }
                    ]
                }
            ]
        });
        dataController.loadAlbumsStep1();
    },

    createMessage: function(user, forwardedMessages) {
        var controller=VKM.app.getController('InitDataLoader');
        var dataController=VKM.app.getController('DataLoader');
        var dialoguesController=VKM.app.getController('Dialogues');
        var panel=Ext.ComponentQuery.query('#messagesTabPanel')[0];
        var panel1=Ext.ComponentQuery.query('#mainTabBar')[0];
        Ext.getStore('Chat').removeAll();
        var user_id=user.id;
        if(!Ext.getStore('Users').getById(user.id))
        {
            Ext.getStore('Users').add(user);

        }

        VKM.app.globals.chat=
            {
            currentUserId:user_id,
            currentChatId:null
        };
        dialoguesController.currentDialogue={
            user_id:user_id,
            chat_id:null
        };

        this.loadChatHeaderData(user_id);
        setTimeout(panel1.items.items[0].fireEvent('tap',panel1.items.items[0]),1);
        panel.setActiveItem(3);
        if(forwardedMessages)
        {
            Ext.getStore('Attachments').add(forwardedMessages);
        }
        controller.loadChatMessagesStep1(user_id);


    },

    openNewChatStep1: function(response, message) {
        var controller=VKM.app.getController('Dialogues');
        if(message.response)
        {
            var dataController=VKM.app.getController('DataLoader');
            var url='https://api.vk.com/method/messages.getChat';
            var params=
                {
                    v:'5.4',
                    chat_id:message.response,
                    access_token:VKM.app.globals.authData['access_token']
                };
            dataController.go(url,params,controller.openNewChatStep2);

        }
    },

    openNewChatStep2: function(response, message) {
        var controller=VKM.app.getController('Dialogues');
        if(message.response)
        {
            var newMessage={
                did:message.response.id,
                chat_id:message.response.id,
                chat_active:[message.response.admin_id],
                title:message.response.title,
                body:'',
                user_id:message.response.admin_id,
                attachments:null,
                out:0,
                date:Ext.DateExtras.now()/1000
            }
            var newRecord=new VKM.model.Dialogues(newMessage);
            Ext.getStore('AllMessages').add(newRecord);
            Ext.getStore('Chat').removeAll();
            VKM.app.globals.chat=
                {
                currentUserId:null,
                currentChatId:message.response.id
            };
            controller.currentDialogue={
                user_id:null,
                chat_id:message.response.id
            };
            controller.loadChatHeaderData(message.response.admin_id,newRecord);
            var panel=Ext.ComponentQuery.query('#messagesTabPanel')[0];
            panel.setActiveItem(3);
        }
    },

    deleteMessages: function(response, message) {
        console.log(response);
        Ext.getStore('Chat').removeAll();


        // var controller=VKM.app.getController('Dialogues');
        // if(message.response)
        // {
        //     var newMessage={
        //         did:message.response.id,
        //         chat_id:message.response.id,
        //         chat_active:[message.response.admin_id],
        //         title:message.response.title,
        //         body:'',
        //         user_id:message.response.admin_id,
        //         attachments:null,
        //         out:0,
        //         date:Ext.DateExtras.now()
        //     }
        //     var newRecord=new VKM.model.Dialogues(newMessage);
        //     Ext.getStore('AllMessages').add(newRecord);
        //     Ext.getStore('Chat').removeAll();
        //     VKM.app.globals.chat=
        //         {
        //         currentUserId:null,
        //         currentChatId:message.response.id
        //     };
        //     controller.currentDialogue={
        //         user_id:null,
        //         chat_id:message.response.id
        //     };
        //     controller.loadChatHeaderData(message.response.admin_id,newRecord);
        //     var panel=Ext.ComponentQuery.query('#messagesTabPanel')[0];
        //     panel.setActiveItem(3);
        // }
    },

    editChatStep1: function(response, message) {
        var controller=VKM.app.getController('Dialogues');
        if(message.response)
        {

            var dataController=VKM.app.getController('InitDataLoader');
            var controller=VKM.app.getController('Dialogues');
            var chatId=message.response.id;
            var adminId=message.response.admin_id;
            controller.chatProperties=Ext.Viewport.add({
                xtype: 'popup1',
                items:[
                    {
                        xtype:'chatproperties',
                        id:'chatProperties'
                    }
                ]
            });

            // var settingsStore=Ext.getStore('settings');

            // var chatMessageSoundRecord=settingsStore.getById(chatId+'_messageSound');
            // var chatMessageSound=null;
            // if(chatMessageSoundRecord)
            // {
            //     chatMessageSound=chatMessageSoundRecord.get('value');
            // }
            // var chatVibrateToggleRecord=settingsStore.getById(chatId+'_messageVibrate');
            // var chatVibrateToggle=null;
            // if(chatVibrateToggleRecord)
            // {
            //     chatVibrateToggle=chatVibrateToggleRecord.get('value');
            // }
            // var chatNotificationBannerRecord=settingsStore.getById(chatId+'_messageVibrate');
            // var chatVibrateToggle=null;
            // if(chatVibrateToggleRecord)
            // {
            //     chatVibrateToggle=chatVibrateToggleRecord.get('value');
            // }


            var photo='resources/images/no_photo_group.png';

            if(message.response.photo_200)
            {
                photo=message.response.photo_200;
            }


            var chatProperties=controller.chatProperties.down('#chatProperties');


            chatProperties.down('#chatProfilePhoto').setHtml('<img src="'+photo+'"></img>');
            chatProperties.down('#nameSet').setTitle(ux.locale.Manager.get('labels.name'));
            chatProperties.down('#chatName').setValue(message.response.title);
            chatProperties.down('#chatName').oldValue=message.response.title;
            chatProperties.down('#chatName').chatId=chatId;
            // chatProperties.down('#newMessageSet').setTitle(ux.locale.Manager.get('labels.newMessage'));
            // chatProperties.down('#soundToggle').setLabel(ux.locale.Manager.get('labels.sound'));
            // chatProperties.down('#soundToggle').setValue(VKM.app.globals.settings.newMessageSound);

            // chatProperties.down('#vibrateToggle').setLabel(ux.locale.Manager.get('labels.vibrate'));
            // chatProperties.down('#vibrateToggle').setValue(VKM.app.globals.settings.newMessageVibrate);
            // chatProperties.down('#noticeSelect').setLabel(ux.locale.Manager.get('labels.notification'));

            chatProperties.down('#chatMembers').setTitle(ux.locale.Manager.get('labels.members'));
            console.log(VKM.app.globals.authData['user_id']);
            var membersSet=chatProperties.down('#chatMembers');

            for (var i=0;i<message.response.users.length;i++)
            {
                var memberRecord=Ext.getStore('Users').getById(message.response.users[i]);
                var member=membersSet.add({xtype:'chatmembercontainer'});

                if(VKM.app.globals.authData['user_id']==message.response.admin_id)
                {
                    member.down('#deleteFromChatButton').setHidden(false);
                }
                else
                {
                    member.down('#deleteFromChatButton').setHidden(true);
                }

                member.down('#deleteFromChatButton').deleteData={
                    chat_id:chatId,
                    user_id:message.response.users[i],
                    membersSet:membersSet,
                    member:member
                }


                if(message.response.users[i]==adminId)
                {
                    member.down('#deleteFromChatButton').setHidden(true);
                }

                member.down('#chatUserImage').setSrc(memberRecord.get('photo_50'));
                member.down('#chatUserName').setHtml(memberRecord.get('first_name')+' '+memberRecord.get('last_name'));


            }

            var member=membersSet.add({xtype:'chatmembercontainer'});
        //     member.down('#chatUserImage').setSrc('resources/images/group_list_icon_add_normal.png');
        //     member.down('#chatUserName').setHtml(ux.locale.Manager.get('labels.addmember'));
        //     member.down('#deleteFromChatButton').setHidden(true);
        //     member.down('#chatUserImage').setStyle({width: '45px',height: '45px',border:'none','border-radius': ''});

            member.down('#chatUserImage').setHidden(true);
            member.down('#chatUserName').setHidden(true);
            member.down('#deleteFromChatButton').setHidden(true);
            member.down('#newUserButton').setHidden(false);
            member.down('#newUserButton').setText(ux.locale.Manager.get('labels.addChatUser'));
            member.down('#newUserButton').chatId=chatId;
            member.down('#newUserButton').membersSet=membersSet;
            member.down('#newUserButton').member=member;
            member.down('#newUserButton').adminId=adminId;
            member.down('#newUserButton').users=message.response.users;


            controller.chatProperties.show();


        }




    },

    cleanMessageText: function(cont, opts) {
        var trim=function(str){return str.replace(/^\s+|\s+$/g, '');};

        var controller=VKM.app.getController('Dialogues');
        if (!cont) return '';
        if (cont.tagName == 'TEXTAREA') return val(cont);
        var el = cont.firstChild;
        var v = '';
        var contTag = new RegExp('^(DIV|P|LI|OL|TR|TD|BLOCKQUOTE)$');
        while (el) {
            switch (el.nodeType) {
                case 3:
                    var str = el.data.replace(/^\n|\n$/g, ' ').replace(/[\n\xa0]/g, ' ').replace(/[ ]+/g, ' ');
                    v += str;
                    break;
                case 1:
                    var str = controller.cleanMessageText(el);
                    if (el.tagName && el.tagName.match(contTag) && str) {
                        if (str.substr(-1) != '\n') {
                            str += '\n';
                        }

                        var prev = el.previousSibling;
                        while(prev && prev.nodeType == 3 && trim(prev.nodeValue) == '') {
                            prev = prev.previousSibling;
                        }
                        if (prev && !(prev.tagName && prev.tagName.match(contTag))) {
                            str = '\n' + str;
                        }

                    } else if (el.tagName == 'IMG') {
                        var code = controller.getCode(el);
                        if (code) {
                            str += controller.codeToChr(code);
                        }
                    } else if (el.tagName == 'BR') {
                        str += '\n';
                    }
                    v += str;
                    break;
            }
            el = el.nextSibling;
        }
        return v;

    },

    editableVal: function(cont, opts) {
        var controller=VKM.app.getController('Dialogues');
        if (!cont) return '';
        if (cont.tagName == 'TEXTAREA') return val(cont);
        var el = cont.firstChild;
        var v = '';
        var contTag = new RegExp('^(DIV|P|LI|OL|TR|TD|BLOCKQUOTE)$');
        while (el) {
            switch (el.nodeType) {
                case 3:
                    var str = el.data.replace(/^\n|\n$/g, ' ').replace(/[\n\xa0]/g, ' ').replace(/[ ]+/g, ' ');
                    v += str;
                    break;
                case 1:
                    var str = controller.editableVal(el);
                    if (el.tagName && el.tagName.match(contTag) && str) {
                        if (str.substr(-1) != '\n') {
                            str += '\n';
                        }

                        var prev = el.previousSibling;
                        while(prev && prev.nodeType == 3 && trim(prev.nodeValue) == '') {
                            prev = prev.previousSibling;
                        }
                        if (prev && !(prev.tagName && prev.tagName.match(contTag))) {
                            str = '\n' + str;
                        }

                    } else if (el.tagName == 'IMG') {
                        var code = controller.getCode(el);
                        if (code) {
                            str += Emoji.codeToChr(code);
                        }
                    } else if (el.tagName == 'BR') {
                        str += '\n';
                    }
                    v += str;
                    break;
            }
            el = el.nextSibling;
        }
        return v;
    },

    codeToChr: function(code) {
        var len = code.length / 4;
        var chr = '';
        var i = 0;
        while(len--) {
            chr += String.fromCharCode(parseInt(code.substr(i, 4), 16))
            i += 4;
        }
        return chr;
    },

    getCode: function(obj) {
        var code = false;

        var m = obj.src.match(/\/([a-zA-Z0-9]+).png/);
        if (m) {
            var code = m[1];
        }

        return code;

    }

});