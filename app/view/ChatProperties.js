/*
 * File: app/view/ChatProperties.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VKM.view.ChatProperties', {
    extend: 'Ext.Container',
    alias: 'widget.chatproperties',

    requires: [
        'Ext.TitleBar',
        'Ext.form.FieldSet',
        'Ext.field.Toggle',
        'Ext.field.Select',
        'Ext.Button'
    ],

    config: {
        layout: 'vbox',
        scrollable: true,
        items: [
            {
                xtype: 'titlebar',
                docked: 'top',
                hidden: true,
                itemId: 'userNameSettings',
                ui: 'plain',
                layout: {
                    type: 'hbox',
                    pack: 'justify'
                }
            },
            {
                xtype: 'container',
                itemId: 'mycontainer143',
                layout: {
                    type: 'vbox',
                    align: 'center',
                    pack: 'center'
                },
                items: [
                    {
                        xtype: 'component',
                        cls: 'addButton',
                        itemId: 'chatProfilePhoto',
                        margin: 5
                    }
                ],
                listeners: [
                    {
                        fn: function(element, eOpts) {
                            element.dom.addEventListener('click',VKM.app.loadChatPhoto);
                        },
                        event: 'painted'
                    }
                ]
            },
            {
                xtype: 'fieldset',
                itemId: 'nameSet',
                items: [
                    {
                        xtype: 'textfield',
                        itemId: 'chatName'
                    }
                ]
            },
            {
                xtype: 'fieldset',
                itemId: 'userNewMessageSettings1',
                items: [
                    {
                        xtype: 'togglefield',
                        itemId: 'customPropsChat',
                        labelWidth: '60%'
                    },
                    {
                        xtype: 'selectfield',
                        itemId: 'soundSelectChat',
                        label: 'Field',
                        labelWidth: '60%',
                        autoSelect: false
                    },
                    {
                        xtype: 'togglefield',
                        itemId: 'vibrateToggleChat',
                        labelWidth: '60%'
                    },
                    {
                        xtype: 'togglefield',
                        itemId: 'bannerToggleChat',
                        labelWidth: '60%'
                    }
                ],
                listeners: [
                    {
                        fn: function(element, eOpts) {
                            // var controller=VKM.app.getController('Contacts');
                            // if (controller.currentContact)
                            {
                                var userId=VKM.app.globals.chat.currentChatId+2000000000
                                this.userId=userId;

                                VKM.app.globals.isInit=true;
                                this.setTitle(ux.locale.Manager.get('labels.newMessage'));
                                this.down('#customPropsChat').setLabel(ux.locale.Manager.get('labels.customProps'));
                                this.down('#soundSelectChat').setLabel(ux.locale.Manager.get('labels.Sound'));
                                this.down('#vibrateToggleChat').setLabel(ux.locale.Manager.get('labels.Vibrate'));
                                this.down('#bannerToggleChat').setLabel(ux.locale.Manager.get('labels.Banner'));
                                //this.down('#customProps').setTitle(ux.locale.Manager.get('labels.customProps'));


                                var settingsStore=Ext.getStore('userSettings');

                                var record=settingsStore.getById(userId);

                                var soundSelect=[
                                {
                                    value:'none',
                                    text:ux.locale.Manager.get('labels.none')
                                },
                                {
                                    value:1,
                                    text:"#1"
                                },
                                {
                                    value:2,
                                    text:"#2"
                                },
                                {
                                    value:3,
                                    text:"#3"
                                },
                                {
                                    value:4,
                                    text:"#4"
                                },
                                {
                                    value:5,
                                    text:"#5"
                                },
                                {
                                    value:6,
                                    text:"#6"
                                },
                                {
                                    value:7,
                                    text:"#7"
                                },
                                {
                                    value:8,
                                    text:"#8"
                                },
                                {
                                    value:9,
                                    text:"#9"
                                },
                                {
                                    value:10,
                                    text:"#10"
                                },
                                {
                                    value:11,
                                    text:"#11"
                                },
                                {
                                    value:12,
                                    text:"#12"
                                },
                                {
                                    value:13,
                                    text:"#13"
                                },
                                {
                                    value:14,
                                    text:"#14"
                                },
                                {
                                    value:15,
                                    text:"#15"
                                },
                                {
                                    value:16,
                                    text:"#16"
                                },
                                {
                                    value:17,
                                    text:"#17"
                                },
                                {
                                    value:18,
                                    text:"#18"
                                },
                                {
                                    value:19,
                                    text:"#19"
                                },
                                {
                                    value:20,
                                    text:"#20"
                                }
                                ];

                                this.down('#soundSelectChat').setOptions(soundSelect);



                                if(record)
                                {
                                    if (record.get('sound'))
                                    {
                                        this.down('#soundSelectChat').setValue(record.get('soundChat'));
                                    }
                                    else
                                    {
                                        this.down('#soundSelectChat').setValue(false);
                                    };
                                    if (record.get('vibrate'))
                                    {
                                        this.down('#vibrateToggleChat').setValue(record.get('vibrate'));
                                    }
                                    else
                                    {
                                        this.down('#vibrateToggleChat').setValue(false);
                                    };
                                    if (record.get('banner'))
                                    {
                                        this.down('#bannerToggleChat').setValue(record.get('banner'));
                                    }
                                    else
                                    {
                                        this.down('#bannerToggleChat').setValue(false);
                                    };
                                    if (record.get('isActive'))
                                    {
                                        this.down('#customPropsChat').setValue(record.get('isActive'));
                                    }
                                    else
                                    {
                                        this.down('#customPropsChat').setValue(false);
                                    }
                                    //     if (record.get('keepBanner'))
                                    //     {
                                    //         this.down('#keepBannerCheck').setValue(record.get('isActive'));
                                    //     };
                                }
                                else
                                {
                                    this.down('#customPropsChat').setValue(false);
                                    this.down('#soundSelectChat').setValue(null);
                                    this.down('#vibrateToggleChat').setValue(null);
                                    this.down('#bannerToggleChat').setValue(null);
                                }

                                VKM.app.globals.isInit=false;
                            }
                        },
                        event: 'painted'
                    }
                ]
            },
            {
                xtype: 'fieldset',
                itemId: 'chatMembers',
                ui: 'light'
            },
            {
                xtype: 'container',
                docked: 'bottom',
                margin: 5,
                items: [
                    {
                        xtype: 'button',
                        docked: 'left',
                        id: 'removeFromFriendsButton3',
                        ui: 'action',
                        iconCls: 'arrow_left'
                    },
                    {
                        xtype: 'button',
                        locales: {
                            text: 'labels.leavechat'
                        },
                        id: 'removeFromFriendsButton4',
                        itemId: 'logoutButton1',
                        margin: '0 0 0 5',
                        ui: 'untitled-ui-2'
                    },
                    {
                        xtype: 'button',
                        locales: {
                            text: 'labels.Delete'
                        },
                        id: 'removeFromFriendsButton5',
                        itemId: 'logoutButton2',
                        margin: '0 0 0 5',
                        ui: 'decline'
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onChatNameBlur',
                event: 'blur',
                delegate: '#chatName'
            },
            {
                fn: 'onVibrateToggleChange211',
                event: 'change',
                delegate: '#customPropsChat'
            },
            {
                fn: 'onNoticeSelectChange21',
                event: 'change',
                delegate: '#soundSelectChat'
            },
            {
                fn: 'onVibrateToggleChange22',
                event: 'change',
                delegate: '#vibrateToggleChat'
            },
            {
                fn: 'onSoundToggleChange21',
                event: 'change',
                delegate: '#bannerToggleChat'
            },
            {
                fn: 'onRemoveFromFriendsButton2Tap1',
                event: 'tap',
                delegate: '#removeFromFriendsButton3'
            },
            {
                fn: 'onRemoveFromFriendsButton2Tap11',
                event: 'tap',
                delegate: '#removeFromFriendsButton4'
            },
            {
                fn: 'onRemoveFromFriendsButton2Tap111',
                event: 'tap',
                delegate: '#removeFromFriendsButton5'
            }
        ]
    },

    onChatNameBlur: function(textfield, e, eOpts) {
        if(textfield.getValue()!=textfield.oldValue&&textfield.getValue()!='')
        {
            textfield.oldValue=textfield.getValue();
            var controller=VKM.app.getController('Dialogues');
            var chatRecord=Ext.getStore('AllMessages').getById(20000000+textfield.chatId);
            chatRecord.set('title',textfield.getValue());
            controller.loadChatHeaderData(chatRecord.get('user_id'),chatRecord);

            var dataController=VKM.app.getController('DataLoader');
            var url='https://api.vk.com/method/messages.editChat';
            var params=
                {
                    v:'5.4',
                    chat_id:textfield.chatId,
                    title:textfield.getValue(),
                    access_token:VKM.app.globals.authData['access_token']
                };
            dataController.go(url,params);


        }

    },

    onVibrateToggleChange211: function(togglefield, newValue, oldValue, eOpts) {
        userId=togglefield.up('#userNewMessageSettings1').userId;

        if(userId)
        {
            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,isActive:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({isActive:newValue});
            };
            record.save();

        }
        if(newValue)
        {
            togglefield.up('#userNewMessageSettings1').down('#soundSelectChat').setDisabled(false);
            togglefield.up('#userNewMessageSettings1').down('#vibrateToggleChat').setDisabled(false);
            togglefield.up('#userNewMessageSettings1').down('#bannerToggleChat').setDisabled(false);
        }
        else
        {
            togglefield.up('#userNewMessageSettings1').down('#soundSelectChat').setDisabled(true);
            togglefield.up('#userNewMessageSettings1').down('#vibrateToggleChat').setDisabled(true);
            togglefield.up('#userNewMessageSettings1').down('#bannerToggleChat').setDisabled(true);
        }

    },

    onNoticeSelectChange21: function(selectfield, newValue, oldValue, eOpts) {
        userId=selectfield.up('#userNewMessageSettings1').userId;
        if(userId)
        {
            if(!VKM.app.globals.isInit)
            {
                if(newValue&&newValue!='none')
                {
                    VKM.app.globals.notificationAudio[newValue].play();
                }
            }

            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,sound:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({sound:newValue});
            };
            record.save();
        }
    },

    onVibrateToggleChange22: function(togglefield, newValue, oldValue, eOpts) {
        userId=togglefield.up('#userNewMessageSettings1').userId;
        if(userId)
        {
            if(!VKM.app.globals.isInit)
            {
                if(newValue&&tizen)
                {
                    navigator.vibrate([1000, 1000]);
                }
            }

            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,vibrate:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({vibrate:newValue});
            };
            record.save();
        }
    },

    onSoundToggleChange21: function(togglefield, newValue, oldValue, eOpts) {
        userId=togglefield.up('#userNewMessageSettings1').userId;
        if(userId)
        {

            if(!VKM.app.globals.isInit)
            {
                if(newValue&&tizen)
                {
                    VKM.app.SimpleNotification('',ux.locale.Manager.get('labels.messagelooks'),'')
                }

            }

            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,banner:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({banner:newValue});
            };
            record.save();
        }
    },

    onRemoveFromFriendsButton2Tap1: function(button, e, eOpts) {
        var controller=VKM.app.getController('Dialogues');
        controller.chatProperties.destroy();
    },

    onRemoveFromFriendsButton2Tap11: function(button, e, eOpts) {
        var dataController=VKM.app.getController('DataLoader');
        var url='https://api.vk.com/method/messages.removeChatUser';
        var params=
            {
                v:'5.4',
                user_id:VKM.app.globals.authData['user_id'],
                chat_id:VKM.app.globals.chat.currentChatId,
                access_token:VKM.app.globals.authData['access_token']

            };
        var controller=VKM.app.getController('Dialogues');
        controller.chatProperties.destroy();
        dataController.go(url,params);


        // VKM.app.globals.authData.access_token=null;
        // VKM.app.globals.authData.expiresTime=null;
        // var settingsStore=Ext.getStore('settings');
        // var record=new VKM.model.localConfig({id:'expires_in',value:null});
        // settingsStore.add(record);
        // record.save();
        // record=new VKM.model.localConfig({id:'access_token',value:null});
        // settingsStore.add(record);
        // record.save();
        // record=new VKM.model.localConfig({id:'user_id',value:null});
        // settingsStore.add(record);
        // record.save();
        // record=new VKM.model.localConfig({id:'expiresTime',value:null});
        // settingsStore.add(record);
        // record.save();
        // settingsStore.sync();
        // Ext.create('VKM.view.FirstScreen', {fullscreen: true}).show();
        // //window.close();

    },

    onRemoveFromFriendsButton2Tap111: function(button, e, eOpts) {
        var MB = Ext.MessageBox;
        Ext.apply(MB, {
            YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
            NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
        });
        Ext.apply(MB, {
            YESNO: [MB.NO, MB.YES]
        });

        Ext.Msg.confirm("",ux.locale.Manager.get('labels.DeleteMessagesConfirm'), function(e){
            if(e == 'yes'){
                var controller=VKM.app.getController('Dialogues');
                var dataController=VKM.app.getController('DataLoader');
                var url='https://api.vk.com/method/messages.deleteDialog';
                var params=
                    {
                        v:'5.4',
                        //user_id:VKM.app.globals.chat.currentUserId,
                        chat_id:VKM.app.globals.chat.currentChatId,
                        access_token:VKM.app.globals.authData['access_token']
                    };
                VKM.app.globals.chat=null;
                controller.getMessagesPanel().setActiveItem(0);

                controller.chatProperties.destroy();
                dataController.go(url,params,controller.deleteMessages);


            }
        })

    }

});