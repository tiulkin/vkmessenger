/*
 * File: app/view/chatMemberContainer.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VKM.view.chatMemberContainer', {
    extend: 'Ext.Container',
    alias: 'widget.chatmembercontainer',

    requires: [
        'Ext.Img',
        'Ext.Spacer',
        'Ext.Button'
    ],

    config: {
        height: 50,
        itemId: 'chatMemberContainer',
        padding: '4px',
        layout: {
            type: 'hbox',
            align: 'stretchmax'
        },
        items: [
            {
                xtype: 'image',
                itemId: 'chatUserImage',
                style: {
                    'border-radius': '50% 50% 50% 50%',
                    'margin-right': '5px',
                    'background-position': 'center center',
                    width: '45px',
                    height: '45px',
                    'border-radius': '999px',
                    '-moz-border-radius': '999px'
                },
                width: 45
            },
            {
                xtype: 'component',
                itemId: 'chatUserName'
            },
            {
                xtype: 'spacer'
            },
            {
                xtype: 'button',
                locales: {
                    text: 'labels.addChatUser'
                },
                hidden: true,
                itemId: 'newUserButton',
                ui: 'confirm',
                width: '100%',
                iconCls: 'newPerson'
            },
            {
                xtype: 'button',
                handler: function(button, e) {
                    var dataController=VKM.app.getController('DataLoader');
                    var url='https://api.vk.com/method/messages.removeChatUser';
                    var params=
                    {
                        v:'5.4',
                        user_id:button.deleteData.user_id,
                        chat_id:button.deleteData.chat_id,
                        access_token:VKM.app.globals.authData['access_token']

                    };

                    button.deleteData.member.setHidden(true);
                    //button.deleteData.membersSet.remove(button.deleteData.member);
                    dataController.go(url,params);
                },
                itemId: 'deleteFromChatButton',
                ui: 'decline',
                iconCls: 'delete'
            }
        ],
        listeners: [
            {
                fn: 'onNewUserButtonTap',
                event: 'tap',
                delegate: '#newUserButton'
            }
        ]
    },

    onNewUserButtonTap: function(button, e, eOpts) {
        var dataController=VKM.app.getController('InitDataLoader');
        var controller=this;
        var chatId=button.chatId;
        var membersSet=button.membersSet;
        var admin_id=button.adminId;
        var users=button.users;
        var member=button.member;

        if(controller.contactChooser)
        {
            controller.contactChooser.destroy();
        }
        controller.contactChooser=Ext.Viewport.add({
            itemId:'tmpPanel',
            xtype: 'popupchooser',
            items:[
                {
                    xtype: 'container',
                    itemId: 'contactsNewChat',
                    layout: {
                        type: 'fit'
                    },
                    items: [
                        {
                            xtype:"container",
                            docked:"top",
                            layout:"hbox",
                            items:[
                                {
                                    xtype: 'searchfield',
                                    boundStore: 'Friends',
                                    doFilter: 'true',
                                    fields: [
                                        'first_name',
                                        'last_name'
                                    ],
                                    flex:1,

                                    itemId: 'searchAllContacts',
                                    listeners: [
                                        {
                                            fn: function(element, eOpts) {
                                                this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                            },
                                            event: 'painted'
                                        }
                                    ]
                                },

                                {
                                    xtype:'button',
                                    itemId:"closeButton",
                                    ui:"decline",
                                    iconCls:'delete',
                                    handler:VKM.app.closeTmpPanels,
        //                             style:{
        //                                 position:"absolute",
        //                                 top:2,
        //                                 left:2,
        //                                 zIndex:99999
        //                             }
                                }
                            ]
                        },
                        {
                            xtype: 'list',
                            itemId: 'contactsToSendList',
                            defaultType: 'contactItem',
                            mode:'SINGLE',
                            store: 'Friends',
                            grouped: true,

                            useSimpleItems: false,
                            memberc:member,
                            indexBar: {
                                itemId: 'friendsIndex',
                                style: {
                                    'font-size': '1.2em'
                                }
                            },

                            plugins: [
                                {
                                    autoPaging: true,
                                    loadMoreText: ' ',
                                    noMoreRecordsText: ' ',
                                    type: 'listpaging'
                                },
                                {
                                    type: 'pullrefresh'
                                }
                            ],
                            listeners:[
                                 {
                                    fn: function(element, eOpts) {
                                        var store=Ext.getStore('Friends');
                                        if(store.getCount()==0)
                                        {
                                            var controller=VKM.app.getController('InitDataLoader');
                                            var dataController=VKM.app.getController('DataLoader');
                                            var url='https://api.vk.com/method/execute.friends';

                                            var params=
                                                {
                                                    v:'5.3',
                                                    access_token:VKM.app.globals.authData['access_token'],
                                                    rev:0
                                                };


                                            store.getProxy().setUrl(url);
                                            store.getProxy().setExtraParams(params);
                                            store.getProxy().setReader(
                                                Ext.create("ux.Friends",
                                                           {
                                                               rootProperty: 'response.friends.items',
                                                               totalProperty: 'response.friends.count'
                                                           }
                                                          )
                                            )
                                            store.load({callback:function(request,success,response){
                                                VKM.app.globals.needRefresh['allFriendsList']=false;
                                            }});

                                        }
                                    },
                                    event: 'painted'
                                },{
                                fn: function(dataView,index,target,record){

                                    var isExists=false;
                                    var member=dataView.config.memberc;
                                    for (var i=0;i<users.length;i++)
                                    {
                                        if(users[i]==record.get('id'))
                                        {
                                            isExists=true;
                                        }
                                    };
                                    if(!isExists)
                                    {
                                        member.setHidden(true);
                                        users.push(record.get('id'));
                                        var memberRecord=Ext.getStore('Users').getById(record.get('id'));
                                        if(!memberRecord)
                                        {
                                            memberRecord=record
                                        }

                                        var member=membersSet.insert(1,{xtype:'chatmembercontainer'});

                                        if(VKM.app.globals.authData['user_id']==admin_id)
                                        {
                                            member.down('#deleteFromChatButton').setHidden(false);
                                        }
                                        member.down('#deleteFromChatButton').deleteData={
                                            chat_id:chatId,
                                            user_id:record.get('id'),
                                            membersSet:membersSet,
                                            member:member
                                        }



                                        member.down('#chatUserImage').setSrc(memberRecord.get('photo_50'));
                                        member.down('#chatUserName').setHtml(memberRecord.get('first_name')+' '+memberRecord.get('last_name'));




                                        var dataController=VKM.app.getController('DataLoader');
                                        var url='https://api.vk.com/method/messages.addChatUser';
                                        var params=
                                            {
                                                v:'5.4',
                                                chat_id:chatId,
                                                user_id:record.get('id'),
                                                access_token:VKM.app.globals.authData['access_token']
                                            };
                                        dataController.go(url,params);


                                        var newMember=membersSet.add({xtype:'chatmembercontainer'});
                                        newMember.down('#chatUserImage').setHidden(true);
                                        newMember.down('#chatUserName').setHidden(true);
                                        newMember.down('#deleteFromChatButton').setHidden(true);
                                        newMember.down('#newUserButton').setHidden(false);
                                        newMember.down('#newUserButton').setText(ux.locale.Manager.get('labels.addChatUser'));
                                        newMember.down('#newUserButton').chatId=chatId;
                                        newMember.down('#newUserButton').membersSet=membersSet;
                                        newMember.down('#newUserButton').member=newMember;
                                        newMember.down('#newUserButton').adminId=admin_id;
                                        newMember.down('#newUserButton').users=users;


                                    };
                                    controller.contactChooser.destroy();
                                },
                                event:'itemtap'
                            }]
                        }
                    ]
                }
            ]
        });
    }

});