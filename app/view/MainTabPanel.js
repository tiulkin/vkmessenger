/*
 * File: app/view/MainTabPanel.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VKM.view.MainTabPanel', {
    extend: 'Ext.tab.Panel',

    requires: [
        'VKM.view.ChatList',
        'Ext.tab.Panel',
        'Ext.field.Search',
        'Ext.Button',
        'Ext.dataview.List',
        'Ext.XTemplate',
        'Ext.plugin.ListPaging',
        'Ext.plugin.PullRefresh',
        'Ext.SegmentedButton',
        'Ext.Img',
        'Ext.Spacer',
        'Ext.tab.Bar',
        'Ext.field.Checkbox',
        'Ext.dataview.IndexBar',
        'Ext.TitleBar',
        'Ext.form.FieldSet',
        'Ext.field.Toggle',
        'Ext.field.Select',
        'Ext.form.Panel',
        'Ext.field.File',
        'Ext.field.Spinner'
    ],

    config: {
        itemId: 'mainTabPanel',
        ui: 'tab-panel-vk',
        layout: {
            type: 'card',
            animation: false,
            'animation.direction': 'down'
        },
        items: [
            {
                xtype: 'container',
                title: 'Messages',
                iconCls: 'envelop',
                itemId: 'messagesCard',
                layout: 'fit',
                items: [
                    {
                        xtype: 'tabpanel',
                        itemId: 'messagesTabPanel',
                        ui: 'tab-panel-vk',
                        layout: {
                            type: 'card',
                            animation: false
                        },
                        items: [
                            {
                                xtype: 'container',
                                title: 'a',
                                itemId: 'dialogues',
                                layout: 'fit',
                                items: [
                                    {
                                        xtype: 'container',
                                        docked: 'top',
                                        layout: 'hbox',
                                        items: [
                                            {
                                                xtype: 'searchfield',
                                                boundStore: 'AllMessages',
                                                doFilter: 'true',
                                                fields: [
                                                    'title',
                                                    'body',
                                                    'name'
                                                ],
                                                flex: 1,
                                                itemId: 'searchDialogues',
                                                listeners: [
                                                    {
                                                        fn: function(element, eOpts) {
                                                            this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                                        },
                                                        event: 'painted'
                                                    },
                                                    {
                                                        fn: function(component, eOpts) {
                                                            component.element.dom.addEventListener('click',function(e){
                                                                var store=component.store;
                                                                if(!store)
                                                                {
                                                                    store=Ext.getStore("AllMessages");
                                                                }

                                                                if(store.resultIsSearch)
                                                                {
                                                                    var MB = Ext.MessageBox;
                                                                    Ext.apply(MB, {
                                                                        YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
                                                                        NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
                                                                    });
                                                                    Ext.apply(MB, {
                                                                        YESNO: [MB.NO, MB.YES]
                                                                    });

                                                                    Ext.Msg.confirm(ux.locale.Manager.get('labels.clearfilter'), "", function(e){
                                                                        if(e == 'yes'){

                                                                            var list=Ext.ComponentQuery.query('#dialoguesList')[0];
                                                                            //var searchButton=component.getParent().down('#globalDialoguesSearch');
                                                                            component.setValue('');
                                                                            component.getParent().setDisabled(false);
                                                                            Ext.getStore('AllMessages').clearFilter();
                                                                            Ext.getStore('AllMessages').resultIsSearch=false;
                                                                            list.setStore('AllMessages');


                                                                        }
                                                                    })
                                                                }
                                                            })
                                                        },
                                                        event: 'initialize'
                                                    }
                                                ]
                                            },
                                            {
                                                xtype: 'button',
                                                itemId: 'newChatButton',
                                                ui: 'action',
                                                iconCls: 'add'
                                            },
                                            {
                                                xtype: 'button',
                                                handler: function(button, e) {
                                                    var url='https://api.vk.com/method/execute.searchDialogs';
                                                    var params=
                                                    {
                                                        v:'5.3',
                                                        access_token:VKM.app.globals.authData['access_token'],
                                                        //offset:offsetParam,
                                                        rev:0,
                                                        q:button.searchText
                                                    };




                                                    var store=Ext.getStore('FilteredDialogues');
                                                    store.removeAll();
                                                    store.getProxy().setUrl(url);
                                                    store.getProxy().setExtraParams(params);
                                                    store.getProxy().setReader(
                                                    Ext.create("ux.DialoguesSearch",
                                                    {
                                                        dialogue:true,
                                                        rootProperty: 'response.messages',
                                                        totalProperty: 'response.count'
                                                    }
                                                    )
                                                    )
                                                    var list=button.getParent().getParent().down('#dialoguesList');
                                                    list.setStore('FilteredDialogues');
                                                    store.load({callback:function(request,success,response){
                                                        var searchButton=button.getParent().down('#globalDialoguesSearch');
                                                        searchButton.setHidden(true);
                                                        searchButton.searchText='';
                                                        button.getParent().setDisabled(true);
                                                        Ext.getStore('AllMessages').resultIsSearch=true;
                                                    }
                                                });


                                                },
                                                docked: 'bottom',
                                                hidden: true,
                                                itemId: 'globalDialoguesSearch',
                                                ui: 'action',
                                                iconCls: 'search'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'list',
                                        baseCls: 'x-dataview',
                                        itemId: 'dialoguesList',
                                        ui: 'loans',
                                        disableSelection: true,
                                        defaultType: 'dialogueitem',
                                        itemTpl: [
                                            '<div>List Item {string}</div>'
                                        ],
                                        pressedCls: 'x-item-selected',
                                        pressedDelay: 0,
                                        store: 'AllMessages',
                                        plugins: [
                                            {
                                                autoPaging: true,
                                                loadMoreText: ' ',
                                                noMoreRecordsText: ' ',
                                                type: 'listpaging'
                                            },
                                            {
                                                scrollerAutoRefresh: true,
                                                type: 'pullrefresh'
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                title: 'Tab 1',
                                itemId: 'inbox',
                                layout: 'fit',
                                items: [
                                    {
                                        xtype: 'container',
                                        docked: 'top',
                                        layout: 'hbox',
                                        items: [
                                            {
                                                xtype: 'searchfield',
                                                boundStore: 'InboxMessages',
                                                doFilter: 'true',
                                                fields: [
                                                    'title',
                                                    'body',
                                                    'name'
                                                ],
                                                flex: 1,
                                                itemId: 'searchInboxText',
                                                listeners: [
                                                    {
                                                        fn: function(element, eOpts) {
                                                            this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                                        },
                                                        event: 'painted'
                                                    },
                                                    {
                                                        fn: function(component, eOpts) {
                                                            component.element.dom.addEventListener('click',function(e){
                                                                var store=component.store;
                                                                if(!store)
                                                                {
                                                                    store=Ext.getStore("InboxMessages");
                                                                }

                                                                if(store.resultIsSearch)
                                                                {
                                                                    var MB = Ext.MessageBox;
                                                                    Ext.apply(MB, {
                                                                        YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
                                                                        NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
                                                                    });
                                                                    Ext.apply(MB, {
                                                                        YESNO: [MB.NO, MB.YES]
                                                                    });

                                                                    Ext.Msg.confirm(ux.locale.Manager.get('labels.clearfilter'), "", function(e){
                                                                        if(e == 'yes'){
                                                                            var url='https://api.vk.com/method/execute.messages';
                                                                            store.getProxy().setExtraParams(store.oldExtraParams);
                                                                            store.getProxy().setUrl(url);
                                                                            store.currentPage=1;
                                                                            store.resultIsSearch=false;
                                                                            component.setDisabled(false);
                                                                            component.getParent().setDisabled(false);
                                                                            component.setValue('');
                                                                            component.getParent().down('#readFilter').setHidden(false);
                                                                            component.getParent().down('#sentFilter').setHidden(false);
                                                                            store.load();
                                                                        }
                                                                    })
                                                                }
                                                            })
                                                        },
                                                        event: 'initialize'
                                                    }
                                                ]
                                            },
                                            {
                                                xtype: 'segmentedbutton',
                                                itemId: 'readFilter',
                                                allowMultiple: true,
                                                items: [
                                                    {
                                                        xtype: 'button',
                                                        pressed: true,
                                                        hidden: true,
                                                        itemId: 'readFilter',
                                                        iconCls: 'envelopeClosed',
                                                        labelCls: 'received'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        itemId: 'unreadFilter',
                                                        iconCls: 'envelopeOpened'
                                                    }
                                                ]
                                            },
                                            {
                                                xtype: 'segmentedbutton',
                                                itemId: 'sentFilter',
                                                items: [
                                                    {
                                                        xtype: 'button',
                                                        out: '0',
                                                        pressed: true,
                                                        itemId: 'receivedFilter',
                                                        iconCls: 'received',
                                                        labelCls: 'received'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        out: '1',
                                                        itemId: 'sentFilter',
                                                        iconCls: 'sent'
                                                    }
                                                ]
                                            },
                                            {
                                                xtype: 'button',
                                                hidden: true,
                                                itemId: 'newChatButton',
                                                ui: 'action',
                                                iconCls: 'add'
                                            },
                                            {
                                                xtype: 'button',
                                                handler: function(button, e) {
                                                    var store=Ext.getStore('InboxMessages');
                                                    store.clearFilter();

                                                    var controller=VKM.app.getController('InitDataLoader');
                                                    var dataController=VKM.app.getController('DataLoader');
                                                    var url='https://api.vk.com/method/execute.search';

                                                    var params=
                                                    {
                                                        v:'5.3',
                                                        access_token:VKM.app.globals.authData['access_token'],
                                                        rev:0,
                                                        q:button.searchText
                                                    };

                                                    store.currentPage=1;
                                                    store.oldExtraParams=store.getProxy().getExtraParams();
                                                    store.getProxy().setUrl(url);
                                                    store.getProxy().setExtraParams(params);
                                                    store.getProxy().setReader(
                                                    Ext.create("ux.Dialogues",
                                                    {
                                                        rootProperty: 'response.messages.items',
                                                        totalProperty: 'response.messages.count'
                                                    }
                                                    )
                                                    )

                                                    store.load({callback:function(request,success,response){
                                                        var searchButton=button.getParent().down('#globalSearch');
                                                        searchButton.setHidden(true);
                                                        searchButton.searchText='';
                                                        button.getParent().setDisabled(true);
                                                        button.getParent().down('#readFilter').setHidden(true);
                                                        button.getParent().down('#sentFilter').setHidden(true);
                                                        store.resultIsSearch=true;
                                                    }
                                                });

                                                },
                                                docked: 'bottom',
                                                hidden: true,
                                                itemId: 'globalSearch',
                                                iconCls: 'search'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'list',
                                        baseCls: 'x-dataview',
                                        itemId: 'inboxList',
                                        ui: 'loans',
                                        disableSelection: true,
                                        defaultType: 'dialogueitem',
                                        store: 'InboxMessages',
                                        plugins: [
                                            {
                                                pluginId: 'uuuuu',
                                                autoPaging: true,
                                                loadMoreText: ' ',
                                                noMoreRecordsText: ' ',
                                                type: 'listpaging'
                                            },
                                            {
                                                scrollerAutoRefresh: true,
                                                type: 'pullrefresh'
                                            }
                                        ]
                                    }
                                ],
                                listeners: [
                                    {
                                        fn: function(element, eOpts) {
                                            var store=Ext.getStore('InboxMessages');
                                            if(store.getCount()==0)
                                            {
                                                var controller=VKM.app.getController('InitDataLoader');
                                                var dataController=VKM.app.getController('DataLoader');
                                                var url='https://api.vk.com/method/execute.messages';

                                                var params=
                                                {
                                                    v:'5.3',
                                                    access_token:VKM.app.globals.authData['access_token'],
                                                    rev:0,
                                                    out:0
                                                };


                                                store.getProxy().setUrl(url);
                                                store.getProxy().setExtraParams(params);
                                                store.getProxy().setReader(
                                                Ext.create("ux.Dialogues",
                                                {
                                                    rootProperty: 'response.messages.items',
                                                    totalProperty: 'response.messages.count'
                                                }
                                                )
                                                )
                                                var messagesList=this.down('#inboxList');
                                                messagesList.setLoadingText(ux.locale.Manager.get('labels.Loading'))
                                                store.load();
                                            }
                                        },
                                        event: 'painted'
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                title: 'Tab 1',
                                itemId: 'sent',
                                layout: 'fit'
                            },
                            {
                                xtype: 'container',
                                title: 'Tab 2',
                                itemId: 'chat',
                                layout: 'fit',
                                scrollable: 'vertical',
                                items: [
                                    {
                                        xtype: 'container',
                                        docked: 'top',
                                        itemId: 'chatHeader',
                                        padding: '5 10 10 10',
                                        width: '100%',
                                        layout: {
                                            type: 'hbox',
                                            align: 'stretchmax'
                                        },
                                        items: [
                                            {
                                                xtype: 'button',
                                                itemId: 'backFromChatToListButton',
                                                ui: 'action',
                                                iconAlign: 'center',
                                                iconCls: 'arrow_left'
                                            },
                                            {
                                                xtype: 'image',
                                                itemId: 'avatar',
                                                margin: 2,
                                                style: {
                                                    'border-radius': '50% 50% 50% 50%',
                                                    'margin-right': '5px',
                                                    'background-position': 'center center',
                                                    width: '45px',
                                                    height: '45px',
                                                    'border-radius': '999px',
                                                    '-moz-border-radius': '999px'
                                                },
                                                width: 45
                                            },
                                            {
                                                xtype: 'container',
                                                margin: 0,
                                                layout: {
                                                    type: 'vbox',
                                                    align: 'start'
                                                },
                                                items: [
                                                    {
                                                        xtype: 'component',
                                                        flex: 1,
                                                        cls: 'name',
                                                        itemId: 'name',
                                                        maxWidth: 220
                                                    },
                                                    {
                                                        xtype: 'component',
                                                        flex: 1,
                                                        itemId: 'name1',
                                                        maxWidth: 220,
                                                        style: {
                                                            'font-size': '0.8em'
                                                        }
                                                    },
                                                    {
                                                        xtype: 'component',
                                                        cls: 'x-item-datetime',
                                                        itemId: 'datetime'
                                                    }
                                                ]
                                            },
                                            {
                                                xtype: 'spacer'
                                            },
                                            {
                                                xtype: 'button',
                                                itemId: 'deleteChatButton',
                                                ui: 'decline',
                                                iconCls: 'delete'
                                            },
                                            {
                                                xtype: 'button',
                                                hidden: false,
                                                itemId: 'chatControlEditButton',
                                                ui: 'action',
                                                iconAlign: 'center',
                                                iconCls: 'compose'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'chatlist',
                                        cls: 'chat',
                                        itemId: 'chatList',
                                        mode: 'MULTI',
                                        defaultType: 'chatItem',
                                        pinHeaders: false
                                    },
                                    {
                                        xtype: 'container',
                                        docked: 'bottom',
                                        hidden: true,
                                        itemId: 'chatControlPanel',
                                        layout: 'vbox',
                                        items: [
                                            {
                                                xtype: 'container',
                                                itemId: 'newMessageButtons1',
                                                layout: {
                                                    type: 'hbox',
                                                    align: 'stretchmax',
                                                    pack: 'center'
                                                },
                                                items: [
                                                    {
                                                        xtype: 'button',
                                                        itemId: 'chatControlBackButton',
                                                        ui: 'plain',
                                                        iconAlign: 'center',
                                                        iconCls: 'uncheck'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        locales: {
                                                            text: 'labels.Forward'
                                                        },
                                                        itemId: 'chatControlReplyButton',
                                                        margin: '3px',
                                                        ui: 'action',
                                                        badgeCls: 'x-badge lightBadge',
                                                        iconAlign: 'center',
                                                        iconCls: 'forward'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        hidden: true,
                                                        itemId: 'chatControlStarButton',
                                                        ui: 'action',
                                                        badgeCls: 'x-badge lightBadge',
                                                        iconAlign: 'center',
                                                        iconCls: 'star'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        hidden: true,
                                                        itemId: 'chatControlComplainButton',
                                                        ui: 'decline',
                                                        iconAlign: 'center',
                                                        iconCls: 'complain'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        locales: {
                                                            text: 'labels.Delete'
                                                        },
                                                        itemId: 'chatControlDeleteButton',
                                                        margin: '3px',
                                                        ui: 'decline',
                                                        badgeCls: 'x-badge lightBadge',
                                                        iconAlign: 'center',
                                                        iconCls: 'delete'
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'container',
                                        docked: 'bottom',
                                        itemId: 'newMessageContainer',
                                        layout: 'hbox',
                                        items: [
                                            {
                                                xtype: 'container',
                                                width: '100%',
                                                layout: 'vbox',
                                                items: [
                                                    {
                                                        xtype: 'container',
                                                        cls: [
                                                            'x-item-message',
                                                            'triangle-right',
                                                            'right'
                                                        ],
                                                        data: {
                                                            value: 'sdfsdfsdfsdf'
                                                        },
                                                        itemId: 'newMessageBubble',
                                                        margin: '0 20 10 5',
                                                        tpl: Ext.create('Ext.XTemplate', 
                                                            '<p style="font-size:1.2em;" onfocus="VKM.app.globals.setChatTyping.delay(1500)" onmouseup="VKM.app.saveSelection()" onkeydown="VKM.app.catchBreaks(event);" id="newMessageText" contenteditable="true" class=" x-item-message triangle-right right newMessageText"></p>',
                                                            '',
                                                            {
                                                                catchBreaks: function(event) {

                                                                }
                                                            }
                                                        ),
                                                        layout: 'vbox',
                                                        items: [
                                                            {
                                                                xtype: 'dataview',
                                                                cls: 'dataview-horizontal',
                                                                docked: 'top',
                                                                height: 90,
                                                                hidden: true,
                                                                itemId: 'attachments',
                                                                width: '100%',
                                                                scrollable: 'horizontal',
                                                                deferEmptyText: false,
                                                                emptyText: 'Вложений нет',
                                                                inline: {
                                                                    wrap: false
                                                                },
                                                                itemTpl: [
                                                                    '<tpl if="picture"><div class="img2" style="color:white!important; background-image: url({picture});">{name}</div></tpl>',
                                                                    '<tpl if="type==\'audio\'"><div class="audioAttachment musicIconCls">{name}</div></tpl>',
                                                                    '<tpl if="type==\'doc\'"><div class="img2" style="padding-left:30px; color:white!important; background-image: url({icon});">{name}</div></tpl>',
                                                                    '<tpl if="type==\'message\'"><div class="docAttachment messageIconCls">{name}</div></tpl>',
                                                                    '',
                                                                    ''
                                                                ],
                                                                store: 'Attachments'
                                                            },
                                                            {
                                                                xtype: 'container',
                                                                docked: 'right',
                                                                itemId: 'newMessageButtons',
                                                                layout: {
                                                                    type: 'vbox',
                                                                    pack: 'end'
                                                                },
                                                                items: [
                                                                    {
                                                                        xtype: 'button',
                                                                        itemId: 'newMessageAttachButton',
                                                                        style: {
                                                                            color: 'white',
                                                                            'font-size': '1.2em'
                                                                        },
                                                                        ui: 'plain',
                                                                        iconAlign: 'center',
                                                                        iconCls: 'clip'
                                                                    },
                                                                    {
                                                                        xtype: 'button',
                                                                        docked: 'bottom',
                                                                        itemId: 'newMessageSmilesButton',
                                                                        style: {
                                                                            color: 'white',
                                                                            'font-size': '1.2em'
                                                                        },
                                                                        ui: 'plain',
                                                                        iconAlign: 'center',
                                                                        iconCls: 'smile'
                                                                    }
                                                                ]
                                                            },
                                                            {
                                                                xtype: 'container',
                                                                docked: 'left',
                                                                itemId: 'newMessageButtons1',
                                                                layout: {
                                                                    type: 'vbox',
                                                                    pack: 'end'
                                                                },
                                                                items: [
                                                                    {
                                                                        xtype: 'button',
                                                                        itemId: 'newMessageSendButton',
                                                                        ui: 'confirm',
                                                                        iconAlign: 'center',
                                                                        iconCls: 'send1'
                                                                    },
                                                                    {
                                                                        xtype: 'button',
                                                                        itemId: 'newMessageCancelButton',
                                                                        ui: 'decline',
                                                                        iconAlign: 'center',
                                                                        iconCls: 'delete'
                                                                    }
                                                                ]
                                                            }
                                                        ],
                                                        listeners: [
                                                            {
                                                                fn: function(element, eOpts) {

                                                                },
                                                                event: 'painted'
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ],
                                listeners: [
                                    {
                                        fn: function(component, eOpts) {

                                            //if (tizen)
                                            {
                                                component.element.dom.addEventListener('click',function(e){

                                                    if (e.target.tagName == 'IMG')
                                                    {
                                                        if(e.target.className&&e.target.className.substr(0,4)=='http')
                                                        {

                                                            var appControl = new tizen.ApplicationControl("http://tizen.org/appcontrol/operation/view", e.target.className);
                                                            tizen.application.launchAppControl(appControl, null,
                                                            function() {
                                                                console.log("browser opened");

                                                            },
                                                            function(e) { console.log("browser error: " + e.message); }
                                                            );


                                                            //                 var iframeUrl='<iframe height=100% width=100% src="'+e.target.className+'"></iframe>';
                                                            //                 var newPanel= Ext.Viewport.add({
                                                            //                     xtype:"panel",
                                                            //                     height:"100%",
                                                            //                     width:"100%",
                                                            //                     modal:true,
                                                            //                     itemId    :  "tmpPanel",
                                                            //                     cls:"googleViewer",
                                                            //                     centered:true,
                                                            //                     style:{height:"100%"},
                                                            //                     html:  iframeUrl,
                                                            //                     items:[{
                                                            //                         xtype:'button',
                                                            //                         itemId:"closeButton",
                                                            //                         ui:"decline",
                                                            //                         iconCls:'delete',
                                                            //                         handler:VKM.app.closeTmpPanels,
                                                            //                         style:{
                                                            //                             position:"absolute",
                                                            //                             top:2,
                                                            //                             left:2,
                                                            //                             zIndex:99999
                                                            //                         }
                                                            //                     }
                                                            //                           ]
                                                            //                 });
                                                            //                 newPanel.show();

                                                        }
                                                    }
                                                    else

                                                    if (e.target.tagName == 'A') {
                                                        console.log(e.target.type);
                                                        e.preventDefault();




                                                        if (e.target.type=="video")
                                                        {
                                                            var appControl = new tizen.ApplicationControl("http://tizen.org/appcontrol/operation/view", e.target.href,"video/mp4", null);
                                                            tizen.application.launchAppControl(
                                                            appControl,
                                                            "tizen.videoplayer",
                                                            function() {console.log("launch application control succeed"); },
                                                            function(e) {console.log("launch application control failed. reason: " + e.message); },
                                                            null );
                                                            function onsuccess() {
                                                                console.log("The application has launched successfully");
                                                            }
                                                        }
                                                        if (e.target.type=="doc")
                                                        {
                                                            var appControl = new tizen.ApplicationControl("http://tizen.org/appcontrol/operation/view", e.target.href,null, null);
                                                            tizen.application.launchAppControl(
                                                            appControl,
                                                            null,
                                                            function() {console.log("launch application control succeed"); },
                                                            function(e) {console.log("launch application control failed. reason: " + e.message); },
                                                            null );
                                                            function onsuccess() {
                                                                console.log("The application has launched successfully");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            var appControl = new tizen.ApplicationControl("http://tizen.org/appcontrol/operation/view", e.target.href);
                                                            tizen.application.launchAppControl(appControl, null,
                                                            function() {
                                                                console.log("browser opened");

                                                            },
                                                            function(e) { console.log("browser error: " + e.message); }
                                                            );


                                                        }
                                                        return;
                                                    };

                                                }, false);
                                            }
                                        },
                                        event: 'initialize'
                                    }
                                ]
                            }
                        ],
                        tabBar: {
                            cls: 'x-docked',
                            docked: 'top',
                            itemId: 'messagesTabBar',
                            layout: {
                                type: 'hbox',
                                pack: 'center'
                            },
                            listeners: [
                                {
                                    fn: function(element, eOpts) {
                                        this.items.items[0].setTitle('');
                                        this.items.items[1].setTitle('');
                                        this.items.items[2].setTitle('');
                                        this.items.items[2].setHidden(true);
                                        this.items.items[3].setHidden(true);
                                        this.items.items[0].setIconCls('chatMessages');
                                        this.items.items[1].setIconCls('envelope1');
                                        this.items.items[0].setTitle(ux.locale.Manager.get('labels.Dialogues'));
                                        this.items.items[1].setTitle(ux.locale.Manager.get('labels.Messages'));
                                        //this.items.items[2].setIconAlign('top');
                                        // this.items.items[0].setWidth('50%');
                                        // this.items.items[1].setWidth('33%');
                                        // this.items.items[2].setWidth('33%');

                                    },
                                    event: 'painted'
                                }
                            ]
                        }
                    }
                ]
            },
            {
                xtype: 'container',
                title: 'Contacts',
                iconCls: 'contacts',
                itemId: 'contactsCard',
                layout: 'fit',
                items: [
                    {
                        xtype: 'tabpanel',
                        itemId: 'contactsTabPanel',
                        ui: 'tab-panel-vk',
                        layout: {
                            type: 'card',
                            animation: false
                        },
                        items: [
                            {
                                xtype: 'container',
                                title: 'a',
                                itemId: 'all',
                                layout: 'fit',
                                items: [
                                    {
                                        xtype: 'container',
                                        docked: 'top',
                                        layout: 'hbox',
                                        items: [
                                            {
                                                xtype: 'searchfield',
                                                boundStore: 'Friends',
                                                doFilter: 'true',
                                                fields: [
                                                    'first_name',
                                                    'last_name',
                                                    'university_name',
                                                    'cityName',
                                                    'countryName',
                                                    'status'
                                                ],
                                                isFriends: 'true',
                                                flex: 1,
                                                itemId: 'searchAllContacts',
                                                listeners: [
                                                    {
                                                        fn: function(element, eOpts) {
                                                            this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                                        },
                                                        event: 'painted'
                                                    }
                                                ]
                                            },
                                            {
                                                xtype: 'segmentedbutton',
                                                docked: 'right',
                                                hidden: true,
                                                style: {
                                                    'margin-right': '3px'
                                                },
                                                allowDepress: true,
                                                allowMultiple: true,
                                                items: [
                                                    {
                                                        xtype: 'button',
                                                        ui: 'confirm',
                                                        text: 'Online'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        ui: 'action',
                                                        text: 'Requests'
                                                    }
                                                ]
                                            },
                                            {
                                                xtype: 'checkboxfield',
                                                docked: 'right',
                                                itemId: 'isOnline',
                                                width: '110px',
                                                label: 'online',
                                                labelCls: 'whiteBG',
                                                labelWidth: '1px',
                                                labelWrap: true,
                                                listeners: [
                                                    {
                                                        fn: function(element, eOpts) {
                                                            this.setLabel(ux.locale.Manager.get('labels.Online'));
                                                        },
                                                        event: 'painted'
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'list',
                                        itemId: 'allFriendsList',
                                        disableSelection: true,
                                        defaultType: 'frienditem',
                                        store: 'Friends',
                                        grouped: true,
                                        useSimpleItems: false,
                                        indexBar: {
                                            itemId: 'friendsIndex',
                                            style: {
                                                'font-size': '1.2em'
                                            }
                                        },
                                        plugins: [
                                            {
                                                autoPaging: true,
                                                loadMoreText: ' ',
                                                noMoreRecordsText: ' ',
                                                type: 'listpaging'
                                            },
                                            {
                                                type: 'pullrefresh'
                                            }
                                        ],
                                        listeners: [
                                            {
                                                fn: function(component, eOpts) {
                                                    if(VKM.app.globals.settings.friendsMode=='short')
                                                    {
                                                        this.setDefaultType('contactItem');
                                                    }
                                                    else
                                                    {
                                                        this.setDefaultType('frienditem');
                                                    }

                                                },
                                                event: 'initialize'
                                            }
                                        ]
                                    }
                                ],
                                listeners: [
                                    {
                                        fn: function(element, eOpts) {
                                            var store=Ext.getStore('Friends');
                                            if(VKM.app.globals.needRefresh['allFriendsList'])
                                            {
                                                store.removeAll();
                                            }
                                            if(store.getCount()==0)
                                            {
                                                var controller=VKM.app.getController('InitDataLoader');
                                                var dataController=VKM.app.getController('DataLoader');
                                                var url='https://api.vk.com/method/execute.friends';

                                                var params=
                                                {
                                                    v:'5.3',
                                                    access_token:VKM.app.globals.authData['access_token'],
                                                    rev:0
                                                };


                                                store.getProxy().setUrl(url);
                                                store.getProxy().setExtraParams(params);
                                                store.getProxy().setReader(
                                                Ext.create("ux.Friends",
                                                {
                                                    rootProperty: 'response.friends.items',
                                                    totalProperty: 'response.friends.count'
                                                }
                                                )
                                                )
                                                store.load({callback:function(request,success,response){
                                                    VKM.app.globals.needRefresh['allFriendsList']=false;
                                                }});

                                            }
                                        },
                                        event: 'painted'
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                title: '1',
                                hidden: true,
                                itemId: 'Requests',
                                layout: 'fit',
                                items: [
                                    {
                                        xtype: 'searchfield',
                                        doFilter: 'true',
                                        boundStore: 'Friends',
                                        fields: [
                                            'first_name',
                                            'last_name'
                                        ],
                                        doNotClearFilter: 'true',
                                        docked: 'top',
                                        itemId: 'searchOnlineContacts',
                                        listeners: [
                                            {
                                                fn: function(element, eOpts) {
                                                    this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                                },
                                                event: 'painted'
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                title: 'phone',
                                hidden: false,
                                itemId: 'phone',
                                layout: 'fit',
                                items: [
                                    {
                                        xtype: 'container',
                                        itemId: 'phoneSynchContainer',
                                        padding: '20px',
                                        layout: {
                                            type: 'vbox',
                                            align: 'center',
                                            pack: 'center'
                                        },
                                        items: [
                                            {
                                                xtype: 'component',
                                                flex: 1,
                                                itemId: 'importContactsMessage',
                                                style: {
                                                    'text-align': 'center'
                                                }
                                            },
                                            {
                                                xtype: 'button',
                                                handler: function(button, e) {
                                                    // var store=Ext.getStore('userSettings');
                                                    // store.removeAll();
                                                    // store.getProxy().clear();




                                                    var settingsStore=Ext.getStore('settings');
                                                    var record=settingsStore.getById('isPhoneSynched');
                                                    if(!record)
                                                    {
                                                        record=new VKM.model.localConfig({id:'isPhoneSynched',value:true});
                                                        settingsStore.add(record);
                                                    }
                                                    else
                                                    {
                                                        record.setData({id:'isPhoneSynched',value:true});
                                                    };
                                                    record.save();
                                                    //ttingsStore.synch();
                                                    VKM.app.globals.settings.isPhoneSynched=true;



                                                    button.up('#phone').down('#phoneContactsList').setHidden(false);
                                                    button.up('#phone').down('#searchPhone').setHidden(false);
                                                    button.up('#phone').down('#phoneSynchContainer').setHidden(true);
                                                    var controller=VKM.app.getController('Utils');
                                                    console.log(Ext.getStore('PhoneContacts'));
                                                    controller.getTizenAddresses();


                                                },
                                                locales: {
                                                    text: 'labels.importContacts'
                                                },
                                                itemId: 'importContactsfromPhone',
                                                margin: '10px',
                                                ui: 'action'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'searchfield',
                                        boundStore: 'PhoneContacts',
                                        doFilter: 'true',
                                        fields: [
                                            'firstName',
                                            'lastName',
                                            'middleName'
                                        ],
                                        docked: 'top',
                                        itemId: 'searchPhone',
                                        listeners: [
                                            {
                                                fn: function(element, eOpts) {
                                                    this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                                    var dataController=VKM.app.getController('Utils');

                                                },
                                                event: 'painted'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'list',
                                        boundStore: 'PhoneContacts',
                                        fields: [
                                            'firstName',
                                            'lastName'
                                        ],
                                        hidden: true,
                                        itemId: 'phoneContactsList',
                                        defaultType: 'phonecontactitem',
                                        store: 'PhoneContacts',
                                        grouped: true,
                                        useSimpleItems: false,
                                        indexBar: true
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                title: 'Tab 2',
                                hidden: false,
                                itemId: 'contactCard',
                                layout: 'vbox',
                                scrollable: 'vertical',
                                items: [
                                    {
                                        xtype: 'titlebar',
                                        docked: 'top',
                                        itemId: 'userName',
                                        ui: 'plain',
                                        layout: {
                                            type: 'hbox',
                                            pack: 'justify'
                                        },
                                        items: [
                                            {
                                                xtype: 'button',
                                                itemId: 'backToContactsButton',
                                                ui: 'action',
                                                iconCls: 'arrow_left'
                                            },
                                            {
                                                xtype: 'component',
                                                flex: 1,
                                                itemId: 'userText',
                                                style: {
                                                    'font-weight': 'bold',
                                                    'text-aligh': 'center',
                                                    'vertical-aligh': 'center'
                                                },
                                                width: '90%'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'container',
                                        layout: {
                                            type: 'vbox',
                                            align: 'center',
                                            pack: 'center'
                                        },
                                        items: [
                                            {
                                                xtype: 'component',
                                                itemId: 'userPhoto',
                                                width: 200
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'container',
                                        hidden: true,
                                        itemId: 'contactStuff1',
                                        layout: {
                                            type: 'vbox',
                                            align: 'center',
                                            pack: 'center'
                                        },
                                        items: [
                                            {
                                                xtype: 'container',
                                                itemId: 'body',
                                                padding: '10px',
                                                style: {
                                                    'text-align': 'center'
                                                }
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.sendinvitation'
                                                },
                                                hidden: true,
                                                itemId: 'inviteFriend',
                                                margin: 10,
                                                ui: 'action',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.connectVkId'
                                                },
                                                itemId: 'connectVkId',
                                                style: {
                                                    'margin-top': '20px'
                                                },
                                                ui: 'action',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'container',
                                                itemId: 'contactsStuddButtons',
                                                width: '100%',
                                                layout: {
                                                    type: 'vbox',
                                                    align: 'center',
                                                    pack: 'center'
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'container',
                                        hidden: true,
                                        itemId: 'contactStuff',
                                        layout: {
                                            type: 'vbox',
                                            align: 'center',
                                            pack: 'center'
                                        },
                                        items: [
                                            {
                                                xtype: 'container',
                                                itemId: 'lastseen'
                                            },
                                            {
                                                xtype: 'container',
                                                itemId: 'location'
                                            },
                                            {
                                                xtype: 'container',
                                                itemId: 'body'
                                            },
                                            {
                                                xtype: 'container',
                                                itemId: 'body1',
                                                margin: '5px',
                                                width: '95%'
                                            },
                                            {
                                                xtype: 'container',
                                                itemId: 'friendsTitle'
                                            },
                                            {
                                                xtype: 'dataview',
                                                cls: 'dataview-horizontal',
                                                height: 135,
                                                hidden: true,
                                                itemId: 'friendsList',
                                                width: '100%',
                                                scrollable: 'horizontal',
                                                inline: {
                                                    wrap: false
                                                },
                                                itemCls: '',
                                                itemTpl: [
                                                    '<div class="img" style="background-image: url({photo_100});"></div><br/><div class="name" style="font-size:8px">{first_name}<br/>{last_name}</div>'
                                                ],
                                                store: 'FriendsInCommon',
                                                listeners: [
                                                    {
                                                        fn: function(component, eOpts) {

                                                        },
                                                        event: 'initialize'
                                                    }
                                                ]
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.writeamessage'
                                                },
                                                itemId: 'createMessageToFriendButton',
                                                margin: 10,
                                                ui: 'action',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'container',
                                                itemId: 'contactsStuddButtons1',
                                                width: '100%',
                                                layout: {
                                                    type: 'vbox',
                                                    align: 'center',
                                                    pack: 'center'
                                                }
                                            },
                                            {
                                                xtype: 'button',
                                                hidden: true,
                                                itemId: 'callToFriendButton',
                                                ui: 'action',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.sendSMS'
                                                },
                                                hidden: true,
                                                itemId: 'createMessageToFriendButton1',
                                                margin: 10,
                                                ui: 'action',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.sendSMS'
                                                },
                                                hidden: true,
                                                itemId: 'createMessageToFriendButton2',
                                                margin: 10,
                                                ui: 'action',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'container'
                                            },
                                            {
                                                xtype: 'container'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.Addfriend'
                                                },
                                                hidden: true,
                                                itemId: 'addFriendButton',
                                                style: {
                                                    'margin-top': '20px'
                                                },
                                                ui: 'action',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.diconnectVkId'
                                                },
                                                itemId: 'disconnectVkId',
                                                style: {
                                                    'margin-top': '20px'
                                                },
                                                ui: 'decline',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.Deleterequest'
                                                },
                                                hidden: true,
                                                itemId: 'removeRequestButton',
                                                style: {
                                                    'margin-top': '20px'
                                                },
                                                ui: 'decline',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.Deletefriend'
                                                },
                                                hidden: true,
                                                itemId: 'removeFromFriendsButton',
                                                style: {
                                                    'margin-top': '20px'
                                                },
                                                ui: 'decline',
                                                width: '80%'
                                            }
                                        ],
                                        listeners: [
                                            {
                                                fn: function(element, eOpts) {

                                                },
                                                event: 'painted'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'fieldset',
                                        hidden: true,
                                        itemId: 'userNewMessageSettings',
                                        items: [
                                            {
                                                xtype: 'togglefield',
                                                itemId: 'customProps',
                                                labelWidth: '60%'
                                            },
                                            {
                                                xtype: 'selectfield',
                                                itemId: 'soundSelect',
                                                label: 'Field',
                                                labelWidth: '60%',
                                                autoSelect: false
                                            },
                                            {
                                                xtype: 'togglefield',
                                                itemId: 'vibrateToggle',
                                                labelWidth: '60%'
                                            },
                                            {
                                                xtype: 'togglefield',
                                                itemId: 'bannerToggle',
                                                labelWidth: '60%'
                                            }
                                        ],
                                        listeners: [
                                            {
                                                fn: function(element, eOpts) {

                                                },
                                                event: 'painted'
                                            }
                                        ]
                                    }
                                ]
                            }
                        ],
                        tabBar: {
                            cls: 'x-docked',
                            docked: 'top',
                            itemId: 'contactsTabBar',
                            layout: {
                                type: 'hbox',
                                pack: 'center'
                            },
                            listeners: [
                                {
                                    fn: function(element, eOpts) {
                                        this.items.items[0].setTitle(ux.locale.Manager.get('labels.Allfriends'));
                                        this.items.items[1].setTitle(ux.locale.Manager.get('labels.Online'));
                                        this.items.items[2].setTitle(ux.locale.Manager.get('labels.Contacts'));
                                        this.items.items[3].setHidden(true);
                                        this.items.items[0].setWidth('33%');
                                        this.items.items[1].setWidth('33%');
                                        this.items.items[2].setWidth('33%');


                                    },
                                    event: 'painted'
                                }
                            ]
                        }
                    }
                ]
            },
            {
                xtype: 'container',
                title: 'Search',
                iconCls: 'search',
                itemId: 'searchCard',
                layout: 'fit',
                items: [
                    {
                        xtype: 'tabpanel',
                        itemId: 'searchTabPanel',
                        ui: 'tab-panel-vk',
                        layout: {
                            type: 'card',
                            animation: false
                        },
                        items: [
                            {
                                xtype: 'container',
                                title: 'Tab 1',
                                itemId: 'friendsSuggests',
                                layout: 'fit',
                                items: [
                                    {
                                        xtype: 'container',
                                        docked: 'top',
                                        layout: 'hbox',
                                        items: [
                                            {
                                                xtype: 'searchfield',
                                                boundStore: 'FriendSuggestions',
                                                doFilter: 'true',
                                                fields: [
                                                    'first_name',
                                                    'last_name',
                                                    'university_name',
                                                    'cityName',
                                                    'countryName',
                                                    'status'
                                                ],
                                                flex: 1,
                                                itemId: 'searchFriendsText',
                                                listeners: [
                                                    {
                                                        fn: function(element, eOpts) {
                                                            this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                                        },
                                                        event: 'painted'
                                                    },
                                                    {
                                                        fn: function(component, eOpts) {
                                                            component.element.dom.addEventListener('click',function(e){
                                                                var store=component.store;
                                                                if(!store)
                                                                {
                                                                    store=Ext.getStore("FriendSuggestions");
                                                                }

                                                                if(store.resultIsSearch)
                                                                {
                                                                    var MB = Ext.MessageBox;
                                                                    Ext.apply(MB, {
                                                                        YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
                                                                        NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
                                                                    });
                                                                    Ext.apply(MB, {
                                                                        YESNO: [MB.NO, MB.YES]
                                                                    });

                                                                    Ext.Msg.confirm(ux.locale.Manager.get('labels.clearfilter'), "", function(e){
                                                                        if(e == 'yes'){
                                                                            var url='https://api.vk.com/method/execute.suggestions';
                                                                            store.getProxy().setExtraParams(store.oldExtraParams);
                                                                            store.getProxy().setUrl(url);
                                                                            store.currentPage=1;
                                                                            store.resultIsSearch=false;
                                                                            component.setDisabled(false);
                                                                            component.getParent().setDisabled(false);
                                                                            component.setValue('');
                                                                            store.load();
                                                                        }
                                                                    })
                                                                }
                                                            })
                                                        },
                                                        event: 'initialize'
                                                    }
                                                ]
                                            },
                                            {
                                                xtype: 'button',
                                                hidden: true,
                                                itemId: 'newChatButton',
                                                ui: 'action',
                                                iconCls: 'add'
                                            },
                                            {
                                                xtype: 'button',
                                                handler: function(button, e) {
                                                    var store=Ext.getStore('FriendSuggestions');
                                                    store.clearFilter();

                                                    var url='https://api.vk.com/method/execute.searchUsers';

                                                    var params=
                                                    {
                                                        v:'5.3',
                                                        access_token:VKM.app.globals.authData['access_token'],
                                                        rev:0,
                                                        q:button.searchText
                                                    };

                                                    store.currentPage=1;
                                                    store.oldExtraParams=store.getProxy().getExtraParams();
                                                    store.getProxy().setUrl(url);
                                                    store.getProxy().setExtraParams(params);

                                                    store.load({callback:function(request,success,response){
                                                        var searchButton=button.getParent().down('#globalFriendsSearch');
                                                        searchButton.setHidden(true);
                                                        searchButton.searchText='';
                                                        button.getParent().setDisabled(true);
                                                        //     button.getParent().down('#readFilter').setHidden(true);
                                                        //     button.getParent().down('#sentFilter').setHidden(true);
                                                        store.resultIsSearch=true;
                                                    }
                                                });

                                                },
                                                docked: 'bottom',
                                                hidden: true,
                                                itemId: 'globalFriendsSearch',
                                                iconCls: 'search'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'list',
                                        searchFriends: 'true',
                                        baseCls: 'x-dataview',
                                        itemId: 'friendSuggestions',
                                        ui: 'loans',
                                        disableSelection: true,
                                        defaultType: 'frienditem',
                                        store: 'FriendSuggestions',
                                        plugins: [
                                            {
                                                pluginId: 'uu2',
                                                autoPaging: true,
                                                loadMoreText: ' ',
                                                noMoreRecordsText: ' ',
                                                type: 'listpaging'
                                            },
                                            {
                                                scrollerAutoRefresh: true,
                                                type: 'pullrefresh'
                                            }
                                        ],
                                        listeners: [
                                            {
                                                fn: function(component, eOpts) {
                                                    if(VKM.app.globals.settings.friendsMode=='short')
                                                    {
                                                        this.setDefaultType('contactItem');
                                                    }
                                                    else
                                                    {
                                                        this.setDefaultType('frienditem');
                                                    }
                                                },
                                                event: 'initialize'
                                            }
                                        ]
                                    }
                                ],
                                listeners: [
                                    {
                                        fn: function(element, eOpts) {
                                            var store=Ext.getStore('FriendSuggestions');
                                            if(VKM.app.globals.needRefresh['friendSuggestions'])
                                            {
                                                store.removeAll();
                                            }

                                            var controller=VKM.app.getController('Search');
                                            controller.setCurrentTab=0;
                                            if(store.getCount()==0)
                                            {
                                                VKM.app.globals.needRefresh['friendSuggestions']=false;

                                                var url='https://api.vk.com/method/execute.suggestions';

                                                var params=
                                                {
                                                    v:'5.3',
                                                    access_token:VKM.app.globals.authData['access_token'],
                                                    rev:0,
                                                    out:0
                                                };

                                                store.getProxy().setReader(
                                                Ext.create("ux.FriendsSuggestions",
                                                {
                                                    rootProperty: 'response.items',
                                                    totalProperty: 'response.count'
                                                }
                                                )
                                                );
                                                store.getProxy().setUrl(url);
                                                store.getProxy().setExtraParams(params);
                                                store.load();

                                            }
                                        },
                                        event: 'painted'
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                title: '1',
                                itemId: 'friendRequests',
                                layout: 'fit',
                                items: [
                                    {
                                        xtype: 'searchfield',
                                        doFilter: 'true',
                                        boundStore: 'FriendRequests',
                                        fields: [
                                            'first_name',
                                            'last_name',
                                            'university_name',
                                            'status'
                                        ],
                                        doNotClearFilter: 'true',
                                        docked: 'top',
                                        itemId: 'searchRequests',
                                        listeners: [
                                            {
                                                fn: function(element, eOpts) {
                                                    this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                                },
                                                event: 'painted'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'list',
                                        boundStore: 'FriendRequests',
                                        searchFriends: 'true',
                                        itemId: 'FriendRequests',
                                        disableSelection: true,
                                        defaultType: 'frienditem',
                                        scrollToTopOnRefresh: false,
                                        store: 'FriendRequests',
                                        grouped: true,
                                        pinHeaders: false,
                                        useSimpleItems: false,
                                        plugins: [
                                            {
                                                type: 'pullrefresh'
                                            },
                                            {
                                                pluginId: 'uuuuu1',
                                                autoPaging: true,
                                                loadMoreText: ' ',
                                                noMoreRecordsText: ' ',
                                                type: 'listpaging'
                                            }
                                        ],
                                        listeners: [
                                            {
                                                fn: function(component, eOpts) {
                                                    if(VKM.app.globals.settings.friendsMode=='short')
                                                    {
                                                        this.setDefaultType('contactItem');
                                                    }
                                                    else
                                                    {
                                                        this.setDefaultType('frienditem');
                                                    }
                                                },
                                                event: 'initialize'
                                            }
                                        ]
                                    }
                                ],
                                listeners: [
                                    {
                                        fn: function(element, eOpts) {
                                            var store=Ext.getStore('FriendRequests');
                                            var controller=VKM.app.getController('Search');
                                            controller.setCurrentTab=1;

                                            if(VKM.app.globals.needRefresh['FriendRequests'])
                                            {
                                                store.removeAll();
                                            }


                                            if(store.getCount()==0)
                                            {
                                                VKM.app.globals.needRefresh['FriendRequests']=false;
                                                var controller=VKM.app.getController('InitDataLoader');
                                                var dataController=VKM.app.getController('DataLoader');
                                                var url='https://api.vk.com/method/execute.searchFriends';

                                                var params=
                                                {
                                                    v:'5.4',
                                                    user_id:VKM.app.globals.authData.user_id,
                                                    access_token:VKM.app.globals.authData['access_token']
                                                };


                                                store.getProxy().setUrl(url);
                                                store.getProxy().setExtraParams(params);
                                                store.getProxy().setReader(
                                                Ext.create("ux.FriendRequests",
                                                {
                                                    rootProperty: 'response.followers.items',
                                                    totalProperty: 'response.count'
                                                }
                                                )
                                                )
                                                store.load();
                                            }

                                        },
                                        event: 'painted'
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                title: 'Tab 2',
                                hidden: false,
                                itemId: 'searchContactCard',
                                layout: 'vbox',
                                scrollable: 'vertical',
                                items: [
                                    {
                                        xtype: 'titlebar',
                                        docked: 'top',
                                        itemId: 'userName',
                                        ui: 'plain',
                                        layout: {
                                            type: 'hbox',
                                            pack: 'justify'
                                        },
                                        items: [
                                            {
                                                xtype: 'button',
                                                itemId: 'backToSearchButton',
                                                ui: 'action',
                                                iconCls: 'arrow_left'
                                            },
                                            {
                                                xtype: 'component',
                                                flex: 1,
                                                itemId: 'userText',
                                                style: {
                                                    'font-weight': 'bold',
                                                    'text-aligh': 'center',
                                                    'vertical-aligh': 'center'
                                                },
                                                width: '90%'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'container',
                                        layout: {
                                            type: 'vbox',
                                            align: 'center',
                                            pack: 'center'
                                        },
                                        items: [
                                            {
                                                xtype: 'component',
                                                itemId: 'userPhoto',
                                                width: 200
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'container',
                                        hidden: true,
                                        itemId: 'contactStuff',
                                        layout: {
                                            type: 'vbox',
                                            align: 'center',
                                            pack: 'center'
                                        },
                                        items: [
                                            {
                                                xtype: 'container',
                                                itemId: 'lastseen'
                                            },
                                            {
                                                xtype: 'container',
                                                itemId: 'location'
                                            },
                                            {
                                                xtype: 'container',
                                                itemId: 'body'
                                            },
                                            {
                                                xtype: 'container',
                                                itemId: 'body1',
                                                margin: '5px',
                                                width: '95%'
                                            },
                                            {
                                                xtype: 'container',
                                                itemId: 'friendsTitle'
                                            },
                                            {
                                                xtype: 'dataview',
                                                cls: 'dataview-horizontal',
                                                height: 135,
                                                hidden: true,
                                                itemId: 'friendsListSearch',
                                                width: '100%',
                                                scrollable: 'horizontal',
                                                inline: {
                                                    wrap: false
                                                },
                                                itemCls: '',
                                                itemTpl: [
                                                    '<div class="img" style="background-image: url({photo_100});"></div><br/><div class="name" style="font-size:8px">{first_name}<br/>{last_name}</div>'
                                                ],
                                                store: 'FriendsInCommon'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.writeamessage'
                                                },
                                                itemId: 'createMessageToFriendButton',
                                                margin: 10,
                                                ui: 'action',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'button',
                                                hidden: true,
                                                itemId: 'callToFriendButton',
                                                ui: 'action',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'container'
                                            },
                                            {
                                                xtype: 'container'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.Addfriend'
                                                },
                                                hidden: true,
                                                itemId: 'addFriendButtonSearch',
                                                style: {
                                                    'margin-top': '20px'
                                                },
                                                ui: 'action',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.Deleterequest'
                                                },
                                                hidden: true,
                                                itemId: 'removeRequestButtonSearch',
                                                style: {
                                                    'margin-top': '20px'
                                                },
                                                ui: 'decline',
                                                width: '80%'
                                            },
                                            {
                                                xtype: 'button',
                                                locales: {
                                                    text: 'labels.Deletefriend'
                                                },
                                                hidden: true,
                                                itemId: 'removeFromFriendsButtonSearch',
                                                style: {
                                                    'margin-top': '20px'
                                                },
                                                ui: 'decline',
                                                width: '80%'
                                            }
                                        ],
                                        listeners: [
                                            {
                                                fn: function(element, eOpts) {

                                                },
                                                event: 'painted'
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'fieldset',
                                        itemId: 'userNewMessageSettings',
                                        items: [
                                            {
                                                xtype: 'togglefield',
                                                itemId: 'customPropsSearch',
                                                labelWidth: '60%'
                                            },
                                            {
                                                xtype: 'selectfield',
                                                itemId: 'soundSelectSearch',
                                                label: 'Field',
                                                labelWidth: '60%',
                                                autoSelect: false
                                            },
                                            {
                                                xtype: 'togglefield',
                                                itemId: 'vibrateToggleSearch',
                                                labelWidth: '60%'
                                            },
                                            {
                                                xtype: 'togglefield',
                                                itemId: 'bannerToggleSearch',
                                                labelWidth: '60%'
                                            }
                                        ],
                                        listeners: [
                                            {
                                                fn: function(element, eOpts) {

                                                },
                                                event: 'painted'
                                            }
                                        ]
                                    }
                                ]
                            }
                        ],
                        tabBar: {
                            docked: 'top',
                            itemId: 'searchTabBar',
                            layout: {
                                type: 'hbox',
                                align: 'center',
                                pack: 'center'
                            },
                            listeners: [
                                {
                                    fn: function(element, eOpts) {
                                        this.items.items[1].setTitle(ux.locale.Manager.get('labels.friendrequests'));
                                        this.items.items[0].setTitle(ux.locale.Manager.get('labels.friendrecommended'));
                                        this.items.items[2].setHidden(true);
                                    },
                                    event: 'painted'
                                }
                            ]
                        }
                    }
                ]
            },
            {
                xtype: 'container',
                title: 'Settings',
                iconCls: 'settings',
                itemId: 'settingsCard',
                layout: 'vbox',
                scrollable: true,
                listeners: [
                    {
                        fn: function(element, eOpts) {
                            container=this;
                            if (!VKM.app.globals.me)
                            {
                                VKM.app.globals.me=Ext.getStore('Users').getById(VKM.app.globals.authData.user_id).getData();
                            }

                            VKM.app.globals.isInit=true

                            container.down('#userText').setHtml(VKM.app.globals.me.first_name+' '+VKM.app.globals.me.last_name)

                            //this.down('#userNameSettings').setTitle(VKM.app.globals.me.first_name+' '+VKM.app.globals.me.last_name);
                            container.down('#globalNewMessageSet').setTitle(ux.locale.Manager.get('labels.newMessage'));
                            container.query('#globalSoundSelect')[0].setLabel(ux.locale.Manager.get('labels.sound'));
                            container.down('#globalVibrateToggle').setLabel(ux.locale.Manager.get('labels.vibrate'));
                            container.down('#globalVibrateToggle').setValue(VKM.app.globals.settings.newMessageVibrate);
                            container.down('#globalSilenceMode').setValue(VKM.app.globals.settings.globalSilenceMode);


                            container.down('#globalBannerToggle').setLabel(ux.locale.Manager.get('labels.banner'));
                            container.down('#languageSet').setTitle(ux.locale.Manager.get('labels.defaultLanguage'));
                            container.down('#pageSize').setTitle(ux.locale.Manager.get('labels.pagesize'));
                            container.down('#dialoguesPageSize').setLabel(ux.locale.Manager.get('labels.dialogues_'));
                            container.down('#chatPageSize').setLabel(ux.locale.Manager.get('labels.chat_'));
                            container.down('#messagesPageSize').setLabel(ux.locale.Manager.get('labels.messages_'));
                            container.down('#friendsPageSize').setLabel(ux.locale.Manager.get('labels.friends_'));
                            container.down('#deletepersonalsettings').setText(ux.locale.Manager.get('labels.deletepersonalsettings'));
                            container.down('#globalSilenceMode').setLabel(ux.locale.Manager.get('labels.silenceMode'));

                            container.down('#pdfViewerMode').setLabel(ux.locale.Manager.get('labels.pdfViewer'));
                            container.down('#chatselection').setLabel(ux.locale.Manager.get('labels.chatselection'));
                            container.down('#friendsMode').setLabel(ux.locale.Manager.get('labels.friendsMode'));
                            container.down('#importContactsSettings').setText(ux.locale.Manager.get('labels.importContacts'));



                            // this.down('#photoSet').setTitle(ux.locale.Manager.get('labels.photoUpload'));
                            // this.down('#compressPhoto').setLabel(ux.locale.Manager.get('labels.compressInUpload'));
                            // this.down('#compressPhoto').setValue(VKM.app.globals.settings.compressPhotos);


                            container.down('#dialoguesPageSize').setValue(VKM.app.globals.settings.dialoguesPageSize);
                            container.down('#chatPageSize').setValue(VKM.app.globals.settings.chatPageSize);
                            container.down('#messagesPageSize').setValue(VKM.app.globals.settings.messagesPageSize);
                            container.down('#friendsPageSize').setValue(VKM.app.globals.settings.friendsPageSize);

                            //VKM.app.globals.uploadFiles.push(this.down('#file1'));


                            var languages=[
                            {
                                value:'ru',
                                text:ux.locale.Manager.get('languages.russian')
                            },
                            {
                                value:'en',
                                text:ux.locale.Manager.get('languages.english')
                            },
                            {
                                value:'autoDetect',
                                text:ux.locale.Manager.get('languages.autoDetect')
                            }
                            ];

                            this.down('#language').setOptions(languages);
                            this.down('#language').setValue(VKM.app.globals.settings.language);


                            var chatSelection=[
                            {
                                value:'doubleClick',
                                text:ux.locale.Manager.get('labels.doubleClick')
                            },
                            {
                                value:'longClick',
                                text:ux.locale.Manager.get('labels.longClick')
                            }
                            ];


                            this.down('#chatselection').setOptions(chatSelection);

                            if(VKM.app.globals.settings.chatSelection)
                            {
                                this.down('#chatselection').setValue(VKM.app.globals.settings.chatSelection);
                            }




                            var pdfViewerMode=[
                            {
                                value:'internal',
                                text:ux.locale.Manager.get('labels.internal')
                            },
                            {
                                value:'google',
                                text:ux.locale.Manager.get('labels.google')
                            }
                            ];
                            this.down('#pdfViewerMode').setOptions(pdfViewerMode);

                            if(VKM.app.globals.settings.pdfViewerMode)
                            {
                                this.down('#pdfViewerMode').setValue(VKM.app.globals.settings.pdfViewerMode);
                            }



                            var friendsMode=[
                            {
                                value:'short',
                                text:ux.locale.Manager.get('labels.short')
                            },
                            {
                                value:'detailed',
                                text:ux.locale.Manager.get('labels.detailed')
                            }
                            ];
                            this.down('#friendsMode').setOptions(friendsMode);

                            if(VKM.app.globals.settings.friendsMode)
                            {
                                this.down('#friendsMode').setValue(VKM.app.globals.settings.friendsMode);
                            }




                            var soundSelect=[
                            {
                                value:'none',
                                text:ux.locale.Manager.get('labels.none')
                            },
                            {
                                value:1,
                                text:"#1"
                            },
                            {
                                value:2,
                                text:"#2"
                            },
                            {
                                value:3,
                                text:"#3"
                            },
                            {
                                value:4,
                                text:"#4"
                            },
                            {
                                value:5,
                                text:"#5"
                            },
                            {
                                value:6,
                                text:"#6"
                            },
                            {
                                value:7,
                                text:"#7"
                            },
                            {
                                value:8,
                                text:"#8"
                            },
                            {
                                value:9,
                                text:"#9"
                            },
                            {
                                value:10,
                                text:"#10"
                            },
                            {
                                value:11,
                                text:"#11"
                            },
                            {
                                value:12,
                                text:"#12"
                            },
                            {
                                value:13,
                                text:"#13"
                            },
                            {
                                value:14,
                                text:"#14"
                            },
                            {
                                value:15,
                                text:"#15"
                            },
                            {
                                value:16,
                                text:"#16"
                            },
                            {
                                value:17,
                                text:"#17"
                            },
                            {
                                value:18,
                                text:"#18"
                            },
                            {
                                value:19,
                                text:"#19"
                            },
                            {
                                value:20,
                                text:"#20"
                            }
                            ];

                            this.down('#globalSoundSelect').setOptions(soundSelect);

                            if(VKM.app.globals.settings.newMessageSound)
                            {
                                container.down('#globalSoundSelect').setValue(VKM.app.globals.settings.newMessageSound);
                            }


                            VKM.app.globals.isInit=false;

                        },
                        event: 'painted',
                        order: 'before'
                    }
                ],
                items: [
                    {
                        xtype: 'titlebar',
                        docked: 'top',
                        itemId: 'userNameSettings',
                        ui: 'plain',
                        layout: {
                            type: 'hbox',
                            pack: 'justify'
                        },
                        items: [
                            {
                                xtype: 'component',
                                flex: 1,
                                itemId: 'userText',
                                style: {
                                    'font-weight': 'bold',
                                    'text-aligh': 'center',
                                    'vertical-aligh': 'center'
                                },
                                width: '90%'
                            }
                        ]
                    },
                    {
                        xtype: 'container',
                        itemId: 'mycontainer49',
                        layout: {
                            type: 'vbox',
                            align: 'center',
                            pack: 'center'
                        },
                        items: [
                            {
                                xtype: 'component',
                                cls: 'addButton',
                                itemId: 'ownerUserPhoto',
                                margin: 5,
                                listeners: [
                                    {
                                        fn: function(element, eOpts) {
                                            if (!VKM.app.globals.me)
                                            {

                                                VKM.app.globals.me=Ext.getStore('Users').getById(VKM.app.globals.authData.user_id).getData();
                                            }

                                            var photo =VKM.app.globals.me.photo_200;
                                            if (!photo)
                                            {
                                                photo=VKM.app.globals.me.photo_200_orig;
                                            }

                                            this.setHtml('<img src="'+photo+'"" ></img>');


                                        },
                                        event: 'painted',
                                        order: 'before'
                                    }
                                ]
                            },
                            {
                                xtype: 'formpanel',
                                height: 100,
                                hidden: true,
                                itemId: 'photoPhorm',
                                width: '100%',
                                enctype: 'multipart/form-data',
                                standardSubmit: true,
                                submitOnAction: false,
                                items: [
                                    {
                                        xtype: 'filefield',
                                        itemId: 'photo',
                                        name: 'photo',
                                        accept: 'image',
                                        capture: 'camera'
                                    }
                                ]
                            }
                        ],
                        listeners: [
                            {
                                fn: function(element, eOpts) {
                                    element.dom.addEventListener('click',VKM.app.loadProfilePhoto);

                                },
                                event: 'painted'
                            }
                        ]
                    },
                    {
                        xtype: 'fieldset',
                        itemId: 'globalNewMessageSet1',
                        items: [
                            {
                                xtype: 'selectfield',
                                itemId: 'chatselection',
                                label: 'Field',
                                labelWidth: '40%',
                                autoSelect: false
                            },
                            {
                                xtype: 'selectfield',
                                itemId: 'pdfViewerMode',
                                label: 'Field',
                                labelWidth: '40%',
                                autoSelect: false
                            },
                            {
                                xtype: 'selectfield',
                                itemId: 'friendsMode',
                                label: 'Field',
                                labelWidth: '40%',
                                autoSelect: false
                            }
                        ]
                    },
                    {
                        xtype: 'fieldset',
                        itemId: 'globalNewMessageSet',
                        items: [
                            {
                                xtype: 'togglefield',
                                itemId: 'globalSilenceMode',
                                label: 'Field',
                                labelWidth: '60%'
                            },
                            {
                                xtype: 'selectfield',
                                itemId: 'globalSoundSelect',
                                label: 'Field',
                                labelWidth: '60%',
                                value: 1,
                                autoSelect: false
                            },
                            {
                                xtype: 'togglefield',
                                itemId: 'globalVibrateToggle',
                                label: 'Field',
                                labelWidth: '60%'
                            },
                            {
                                xtype: 'togglefield',
                                itemId: 'globalBannerToggle',
                                labelWidth: '60%'
                            },
                            {
                                xtype: 'button',
                                handler: function(button, e) {
                                    var MB = Ext.MessageBox;
                                    Ext.apply(MB, {
                                        YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
                                        NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
                                    });
                                    Ext.apply(MB, {
                                        YESNO: [MB.NO, MB.YES]
                                    });

                                    Ext.Msg.confirm("",ux.locale.Manager.get('labels.DeleteSettingsConfirm'), function(e){
                                        if(e == 'yes'){
                                            var store=Ext.getStore('userSettings');
                                            store.removeAll();
                                            store.getProxy().clear();


                                        }
                                    })


                                },
                                locales: {
                                    text: 'deletepersonalsettings'
                                },
                                itemId: 'deletepersonalsettings',
                                margin: '10px',
                                ui: 'decline'
                            }
                        ]
                    },
                    {
                        xtype: 'fieldset',
                        itemId: 'pageSize',
                        items: [
                            {
                                xtype: 'spinnerfield',
                                itemId: 'dialoguesPageSize',
                                label: 'Field',
                                labelWidth: '50%',
                                maxValue: 100,
                                minValue: 10,
                                stepValue: 10,
                                defaultValue: 30
                            },
                            {
                                xtype: 'spinnerfield',
                                itemId: 'chatPageSize',
                                label: 'Field',
                                labelWidth: '50%',
                                maxValue: 100,
                                minValue: 10,
                                stepValue: 10,
                                defaultValue: 30
                            },
                            {
                                xtype: 'spinnerfield',
                                itemId: 'messagesPageSize',
                                label: 'Field',
                                labelWidth: '50%',
                                maxValue: 100,
                                minValue: 10,
                                stepValue: 10,
                                defaultValue: 30
                            },
                            {
                                xtype: 'spinnerfield',
                                itemId: 'friendsPageSize',
                                label: 'Field',
                                labelWidth: '50%',
                                maxValue: 100,
                                minValue: 10,
                                stepValue: 10,
                                defaultValue: 50
                            }
                        ]
                    },
                    {
                        xtype: 'fieldset',
                        itemId: 'languageSet',
                        items: [
                            {
                                xtype: 'selectfield',
                                itemId: 'language',
                                autoSelect: false
                            }
                        ]
                    },
                    {
                        xtype: 'fieldset',
                        hidden: true,
                        itemId: 'photoSet',
                        items: [
                            {
                                xtype: 'togglefield',
                                itemId: 'compressPhoto',
                                labelWidth: '60%'
                            }
                        ]
                    },
                    {
                        xtype: 'container',
                        layout: {
                            type: 'vbox',
                            align: 'center',
                            pack: 'center'
                        },
                        items: [
                            {
                                xtype: 'button',
                                handler: function(button, e) {
                                    var settingsStore=Ext.getStore('settings');
                                    var record=settingsStore.getById('isPhoneSynched');
                                    if(!record)
                                    {
                                        record=new VKM.model.localConfig({id:'isPhoneSynched',value:true});
                                        settingsStore.add(record);
                                    }

                                    else
                                    {
                                        record.setData({id:'isPhoneSynched',value:true});
                                    };

                                    record.save();

                                    VKM.app.globals.settings.isPhoneSynched=true;

                                    // button.up('#phone').down('#phoneContactsList').setHidden(false);
                                    // button.up('#phone').down('#searchPhone').setHidden(false);
                                    // button.up('#phone').down('#phoneSynchContainer').setHidden(true);

                                    var controller=VKM.app.getController('Utils');
                                    console.log(Ext.getStore('PhoneContacts'));
                                    controller.getTizenAddresses();


                                },
                                itemId: 'importContactsSettings',
                                margin: '10px',
                                ui: 'action',
                                width: '80%'
                            },
                            {
                                xtype: 'button',
                                locales: {
                                    text: 'labels.logout'
                                },
                                itemId: 'logoutButton',
                                margin: '10px',
                                ui: 'untitled-ui-2',
                                width: '80%'
                            }
                        ]
                    }
                ]
            }
        ],
        tabBar: {
            docked: 'bottom',
            itemId: 'mainTabBar',
            listeners: [
                {
                    fn: function(element, eOpts) {
                        this.items.items[0].setTitle(ux.locale.Manager.get('labels.Messages'));
                        this.items.items[1].setTitle(ux.locale.Manager.get('labels.Contacts'));
                        this.items.items[2].setTitle(ux.locale.Manager.get('labels.Search'));
                        this.items.items[3].setTitle(ux.locale.Manager.get('labels.Settings'));

                    },
                    event: 'painted',
                    order: 'after'
                }
            ]
        },
        listeners: [
            {
                fn: 'onMysearchfieldKeyup',
                event: 'keyup',
                delegate: '#searchDialogues'
            },
            {
                fn: 'BasicEventBinding67',
                event: 'clearicontap',
                delegate: '#searchDialogues'
            },
            {
                fn: 'onDialoguesActivate',
                event: 'activate',
                order: 'before',
                delegate: '#dialogues'
            },
            {
                fn: 'onDialoguesDeactivate',
                event: 'deactivate',
                delegate: '#dialogues'
            },
            {
                fn: 'onMysearchfieldKeyup2',
                event: 'keyup',
                delegate: '#searchInboxText'
            },
            {
                fn: 'BasicEventBinding671',
                event: 'clearicontap',
                order: 'before',
                delegate: '#searchInboxText'
            },
            {
                fn: 'onMysegmentedbutton2Toggle',
                event: 'toggle',
                delegate: '#readFilter'
            },
            {
                fn: 'onInboxListItemTap',
                event: 'itemtap',
                delegate: '#inboxList'
            },
            {
                fn: 'BasicEventBinding134',
                event: 'activate',
                delegate: '#inbox'
            },
            {
                fn: 'onDeleteChatButtonTap',
                event: 'tap',
                delegate: '#deleteChatButton'
            },
            {
                fn: 'onChatControlEditButtonTap',
                event: 'tap',
                delegate: '#chatControlEditButton'
            },
            {
                fn: 'onAttachmentsItemTap',
                event: 'itemtap',
                delegate: '#attachments'
            },
            {
                fn: 'onIsOnlineCheck',
                event: 'check',
                delegate: '#isOnline'
            },
            {
                fn: 'onIsOnlineUncheck',
                event: 'uncheck',
                delegate: '#isOnline'
            },
            {
                fn: 'onAllActivate',
                event: 'activate',
                delegate: '#all'
            },
            {
                fn: 'onPhoneActivate',
                event: 'activate',
                delegate: '#phone'
            },
            {
                fn: 'onCreateMessageToFriendButtonTap3',
                event: 'tap',
                delegate: '#inviteFriend'
            },
            {
                fn: 'onRemoveFromFriendsButtonTap132',
                event: 'tap',
                delegate: '#connectVkId'
            },
            {
                fn: 'onCreateMessageToFriendButtonTap',
                event: 'tap',
                delegate: '#createMessageToFriendButton'
            },
            {
                fn: 'onCallToFriendButtonTap',
                event: 'tap',
                delegate: '#callToFriendButton'
            },
            {
                fn: 'onCreateMessageToFriendButtonTap2',
                event: 'tap',
                delegate: '#createMessageToFriendButton1'
            },
            {
                fn: 'onCreateMessageToFriendButtonTap21',
                event: 'tap',
                delegate: '#createMessageToFriendButton2'
            },
            {
                fn: 'onRemoveFromFriendsButtonTap1',
                event: 'tap',
                delegate: '#addFriendButton'
            },
            {
                fn: 'onRemoveFromFriendsButtonTap131',
                event: 'tap',
                delegate: '#disconnectVkId'
            },
            {
                fn: 'onRemoveFromFriendsButtonTap11',
                event: 'tap',
                delegate: '#removeRequestButton'
            },
            {
                fn: 'onRemoveFromFriendsButtonTap',
                event: 'tap',
                delegate: '#removeFromFriendsButton'
            },
            {
                fn: 'onContactCardDeactivate',
                event: 'deactivate',
                delegate: '#contactCard'
            },
            {
                fn: 'onVibrateToggleChange21',
                event: 'change',
                delegate: '#customProps'
            },
            {
                fn: 'onNoticeSelectChange2',
                event: 'change',
                delegate: '#soundSelect'
            },
            {
                fn: 'onVibrateToggleChange2',
                event: 'change',
                delegate: '#vibrateToggle'
            },
            {
                fn: 'onSoundToggleChange2',
                event: 'change',
                delegate: '#bannerToggle'
            },
            {
                fn: 'onContactCardActivate',
                event: 'activate',
                delegate: '#contactCard'
            },
            {
                fn: 'onMysearchfieldKeyup21',
                event: 'keyup',
                delegate: '#searchFriendsText'
            },
            {
                fn: 'BasicEventBinding6711',
                event: 'clearicontap',
                order: 'before',
                delegate: '#searchFriendsText'
            },
            {
                fn: 'onFriendsListItemTap',
                event: 'itemtap',
                delegate: '#friendsListSearch'
            },
            {
                fn: 'onCreateMessageToFriendButtonTap1',
                event: 'tap',
                delegate: '#createMessageToFriendButton'
            },
            {
                fn: 'onCallToFriendButtonTap1',
                event: 'tap',
                delegate: '#callToFriendButton'
            },
            {
                fn: 'onRemoveFromFriendsButtonTap12',
                event: 'tap',
                delegate: '#addFriendButtonSearch'
            },
            {
                fn: 'onRemoveFromFriendsButtonTap111',
                event: 'tap',
                delegate: '#removeRequestButtonSearch'
            },
            {
                fn: 'onRemoveFromFriendsButtonTap2',
                event: 'tap',
                delegate: '#removeFromFriendsButtonSearch'
            },
            {
                fn: 'onContactCardDeactivate1',
                event: 'deactivate',
                delegate: '#searchContactCard'
            },
            {
                fn: 'onVibrateToggleChange212',
                event: 'change',
                delegate: '#customPropsSearch'
            },
            {
                fn: 'onNoticeSelectChange22',
                event: 'change',
                delegate: '#soundSelectSearch'
            },
            {
                fn: 'onVibrateToggleChange23',
                event: 'change',
                delegate: '#vibrateToggleSearch'
            },
            {
                fn: 'onSoundToggleChange22',
                event: 'change',
                delegate: '#bannerToggleSearch'
            },
            {
                fn: 'onContactCardActivate1',
                event: 'activate',
                delegate: '#searchContactCard'
            },
            {
                fn: 'onMyfilefieldUpdatedata',
                event: 'updatedata',
                delegate: '#photo'
            },
            {
                fn: 'onNoticeSelectChange1',
                event: 'change',
                delegate: '#chatselection'
            },
            {
                fn: 'onNoticeSelectChange11',
                event: 'change',
                delegate: '#pdfViewerMode'
            },
            {
                fn: 'onNoticeSelectChange111',
                event: 'change',
                delegate: '#friendsMode'
            },
            {
                fn: 'onNoticeSelectChange3',
                event: 'change',
                delegate: '#globalSilenceMode'
            },
            {
                fn: 'onNoticeSelectChange',
                event: 'change',
                delegate: '#globalSoundSelect'
            },
            {
                fn: 'onVibrateToggleChange',
                event: 'change',
                delegate: '#globalVibrateToggle'
            },
            {
                fn: 'onSoundToggleChange',
                event: 'change',
                delegate: '#globalBannerToggle'
            },
            {
                fn: 'onSoundToggleChange1',
                event: 'change',
                delegate: '#dialoguesPageSize'
            },
            {
                fn: 'onSoundToggleChange12',
                event: 'change',
                delegate: '#chatPageSize'
            },
            {
                fn: 'onSoundToggleChange11',
                event: 'change',
                delegate: '#messagesPageSize'
            },
            {
                fn: 'onSoundToggleChange111',
                event: 'change',
                delegate: '#friendsPageSize'
            },
            {
                fn: 'onLanguageChange',
                event: 'change',
                delegate: '#language'
            },
            {
                fn: 'onCompressPhotoChange',
                event: 'change',
                delegate: '#compressPhoto'
            },
            {
                fn: 'onRemoveFromFriendsButton2Tap',
                event: 'tap',
                delegate: '#logoutButton'
            },
            {
                fn: 'onMainTabPanelInitialize',
                event: 'initialize'
            }
        ]
    },

    onMysearchfieldKeyup: function(textfield, e, eOpts) {
        if (textfield.getValue()!='')
        {
            var searchButton=textfield.getParent().down('#globalDialoguesSearch');
            searchButton.setHidden(false);
            searchButton.setText(textfield.getValue())
            searchButton.searchText=textfield.getValue();
        }
        else
        {
            var searchButton=textfield.getParent().down('#globalDialoguesSearch');
            searchButton.setHidden(true);
            searchButton.searchText='';
        }
        // console.log(1);
        // var dataview=textfield.getParent().down('#dialoguesList');
        // if (newValue&&newValue!='')
        // {
        //     var controller=VKM.app.getController('InitDataLoader');
        //     controller.searchDialoguesStep1(newValue,dataview);

        // }
        // else
        // {
        //     dataview.setStore(Ext.getStore('AllMessages'));
        // }

    },

    BasicEventBinding67: function(textfield, e, eOpts) {
        var searchButton=textfield.getParent().down('#globalDialoguesSearch');
        searchButton.setHidden(true);

    },

    onDialoguesActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        // if(this.down('#messagesTabBar'))
        // {
        //     this.down('#messagesTabBar').setHidden(true);
        // }
        container.down('#searchDialogues').setDisabled(false);

    },

    onDialoguesDeactivate: function(oldActiveItem, container, newActiveItem, eOpts) {
        container.down('#searchDialogues').setDisabled(true);
    },

    onMysearchfieldKeyup2: function(textfield, e, eOpts) {
        if (textfield.getValue()!='')
        {
            var searchButton=textfield.getParent().down('#globalSearch');
            searchButton.setHidden(false);
            searchButton.setText(textfield.getValue())
            searchButton.searchText=textfield.getValue();
        }
        else
        {
            var searchButton=textfield.getParent().down('#globalSearch');
            searchButton.setHidden(true);
            searchButton.searchText='';
        }
        // console.log(1);
        // var dataview=textfield.getParent().down('#dialoguesList');
        // if (newValue&&newValue!='')
        // {
        //     var controller=VKM.app.getController('InitDataLoader');
        //     controller.searchDialoguesStep1(newValue,dataview);

        // }
        // else
        // {
        //     dataview.setStore(Ext.getStore('AllMessages'));
        // }

    },

    BasicEventBinding671: function(textfield, e, eOpts) {
        var searchButton=textfield.getParent().down('#globalSearch');
        //var searchButton=textfield.getParent().setDisabled(false);
        searchButton.setHidden(true);
        var store=Ext.getStore('InboxMessages');
        if(store.resultIsSearch)
        {
            return(false)
        }
        // {
        //     var url='https://api.vk.com/method/execute.messages';
        //     store.currentPage=1;
        //     store.getProxy().setUrl(url);
        //     store.getProxy().setExtraParams(params);
        //     store.getProxy().setReader(
        //         Ext.create("ux.Dialogues",
        //                    {
        //                        rootProperty: 'response.messages.items',
        //                        totalProperty: 'response.messages.count'
        //                    }
        //                   )
        //     )
        //     store.load();
        // }
    },

    onMysegmentedbutton2Toggle: function(segmentedbutton, button, isPressed, eOpts) {
        if (isPressed==true)
        {
            var store=Ext.getStore('InboxMessages');
            var params=store.getProxy().getExtraParams();
            params["filters"]=1;
            store.getProxy().setExtraParams(params);
            store.currentPage=1;
            store.load();
        }
        else
        {
            var store=Ext.getStore('InboxMessages');
            var params=store.getProxy().getExtraParams();
            params["filters"]=0;
            store.getProxy().setExtraParams(params);
            store.currentPage=1;
            store.load();
        }
    },

    onInboxListItemTap: function(dataview, index, target, record, e, eOpts) {
        var dataController=VKM.app.getController('InitDataLoader');
        var controller=VKM.app.getController('Dialogues');
        // controller.oneMessage=Ext.Viewport.add({
        //     xtype: 'popupchooser',
        //     src:'Dialogues',
        //     items:[]
        // });

        messageItem=Ext.Viewport.add(
            {
                xtype:'onemessage',
                record:record,
                centered:true,
                hideOnMaskTap:true,
                height:"80%",
                width:"90%",
                cls:'blueBackground'

                //scrollable:true
            });
        //messageItem=controller.oneMessage.add({xtype:'onemessage',record:record});
        messageItem.updateRecord(record);
        messageItem.show();

    },

    BasicEventBinding134: function(newActiveItem, container, oldActiveItem, eOpts) {
        var store=Ext.getStore('InboxMessages');
        if(store.getCount()==0)
        {
            var controller=VKM.app.getController('InitDataLoader');
            var dataController=VKM.app.getController('DataLoader');
            var url='https://api.vk.com/method/execute.messages';

            var params=
                {
                    v:'5.3',
                    access_token:VKM.app.globals.authData['access_token'],
                    rev:0,
                    out:0
                };


            store.getProxy().setUrl(url);
            store.getProxy().setExtraParams(params);
            store.getProxy().setReader(
                Ext.create("ux.Dialogues",
                           {
                               rootProperty: 'response.messages.items',
                               totalProperty: 'response.messages.count'
                           }
                          )
            )
            var messagesList=this.down('#inboxList');
            messagesList.setLoadingText(ux.locale.Manager.get('labels.Loading'))
            store.load();
        }
    },

    onDeleteChatButtonTap: function(button, e, eOpts) {
        var MB = Ext.MessageBox;
        Ext.apply(MB, {
            YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
            NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
        });
        Ext.apply(MB, {
            YESNO: [MB.NO, MB.YES]
        });

        Ext.Msg.confirm("" ,ux.locale.Manager.get('labels.DeleteMessagesConfirm'), function(e){
            if(e == 'yes'){
                var controller=VKM.app.getController('Dialogues');
                var dataController=VKM.app.getController('DataLoader');
                var url='https://api.vk.com/method/messages.deleteDialog';
                var params=
                    {
                        v:'5.4',
                        user_id:VKM.app.globals.chat.currentUserId,
                        chat_id:VKM.app.globals.chat.currentChatId,
                        access_token:VKM.app.globals.authData['access_token']
                    };
                dataController.go(url,params,controller.deleteMessages);


            }
        })


    },

    onChatControlEditButtonTap: function(button, e, eOpts) {
        var chat=button.chatRecord;
        var chatId=chat.get('chat_id');
        var dataController=VKM.app.getController('DataLoader');
        var controller=VKM.app.getController('Dialogues');
        var url='https://api.vk.com/method/messages.getChat';
        var params=
            {
                v:'5.4',
                chat_id:chatId,
                access_token:VKM.app.globals.authData['access_token']
            };
        dataController.go(url,params,controller.editChatStep1);



    },

    onAttachmentsItemTap: function(dataview, index, target, record, e, eOpts) {
        var MB = Ext.MessageBox;
        Ext.apply(MB, {
        		YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
        		NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
        });
        Ext.apply(MB, {
        		YESNO: [MB.NO, MB.YES]
        });

        Ext.Msg.confirm(ux.locale.Manager.get('labels.DeleteQ'), "", function(e){
            if(e == 'yes'){
                Ext.getStore('Attachments').remove(record);
            }
        })
    },

    onIsOnlineCheck: function(checkboxfield, e, eOpts) {
        var store=Ext.getStore('Friends');
        store.onlineFilter= new Ext.util.Filter({
            property: 'online',
            value   : 1
        });
        store.filter(store.onlineFilter);
    },

    onIsOnlineUncheck: function(checkboxfield, e, eOpts) {
        var store=Ext.getStore('Friends');

        if(store.searchFilter)
        {
            store.clearFilter(true);
            store.filter(store.searchFilter);
        }
        else
        {
            store.clearFilter();
        }


    },

    onAllActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var controller=VKM.app.getController('Contacts');
        controller.setCurrentTab=0;
    },

    onPhoneActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var controller=VKM.app.getController('Contacts');
        controller.setCurrentTab=2;

        this.down('#importContactsMessage').setHtml(ux.locale.Manager.get('labels.importContactsMessage'))


        if(VKM.app.globals.settings.isPhoneSynched)
        {
            this.down('#phoneContactsList').setHidden(false);
            this.down('#searchPhone').setHidden(false);
            this.down('#phoneSynchContainer').setHidden(true);

        }
        else
        {
            this.down('#phoneContactsList').setHidden(true);
            this.down('#searchPhone').setHidden(true);
            this.down('#phoneSynchContainer').setHidden(false);
        }
        VKM.app.getController('Utils').getTizenAddresses();
    },

    onCreateMessageToFriendButtonTap3: function(button, e, eOpts) {
        if (!VKM.app.globals.me)
        {
            VKM.app.globals.me=Ext.getStore('Users').getById(VKM.app.globals.authData.user_id).getData();
        }


        var name = VKM.app.globals.me.first_name+' '+VKM.app.globals.me.last_name



        var appControl = new tizen.ApplicationControl(
            'http://tizen.org/appcontrol/operation/compose',
            null,
            "text/html",
            null,
            [
                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/to", [button.phone]),
                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/text", [name+' '+ux.locale.Manager.get('labels.invitationText')]),
                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/subject", [ux.locale.Manager.get('labels.invitationSubject')])
            ]
        );

        serviceCB = {
            onsuccess: function () { console.log('OK');  },
            onfailure: function () { console.log('failed'); }
        };

        console.log("Launch service");

        tizen.application.launchAppControl(
            appControl,
            "tizen.messages",
            function() {console.log("launch application control succeed"); },
            function(e) {console.log('launch appControl failed. Reason: ' + e.name)},
            serviceCB
        );



    },

    onRemoveFromFriendsButtonTap132: function(button, e, eOpts) {
        var dataController=VKM.app.getController('InitDataLoader');
        var controller=VKM.app.getController('Contacts');;

        if(controller.contactChooser)
        {
            controller.contactChooser.destroy();
        }
        controller.contactChooser=Ext.Viewport.add({
            itemId:'tmpPanel',
            xtype: 'popupchooser',
            items:[
                {
                    xtype: 'container',
                    //itemId: 'contactsNewChat',
                    layout: {
                        type: 'fit'
                    },
                    items: [
                        {
                            xtype:"container",
                            docked:"top",
                            layout:"hbox",
                            items:[
                                {
                                    xtype: 'searchfield',
                                    boundStore: 'Friends',
                                    doFilter: 'true',
                                    fields: [
                                        'first_name',
                                        'last_name',
                                        'mobile_phone',
                                        'home_phone',
                                        'university_name',
                                        'city_name'
                                    ],
                                    flex:1,
                                    listeners: [
                                        {
                                            fn: function(element, eOpts) {
                                                this.setPlaceHolder(ux.locale.Manager.get('labels.Search'));
                                            },
                                            event: 'painted'
                                        }
                                    ]
                                },

                                {
                                    xtype:'button',
                                    itemId:"closeButton",
                                    ui:"decline",
                                    iconCls:'delete',
                                    handler:VKM.app.closeTmpPanels,
        //                             style:{
        //                                 position:"absolute",
        //                                 top:2,
        //                                 left:2,
        //                                 zIndex:99999
        //                             }
                                }
                            ]
                        },
                        {
                            xtype: 'list',
                            //itemId: 'contactsToConnectList',
                            defaultType: 'frienditem',
                            mode:'SINGLE',
                            store: 'Friends',
                            grouped: true,
                            useSimpleItems: false,

                            indexBar: {
                                itemId: 'friendsIndex',
                                style: {
                                    'font-size': '1.2em'
                                }
                            },

                            plugins: [
                                {
                                    autoPaging: true,
                                    loadMoreText: ' ',
                                    noMoreRecordsText: ' ',
                                    type: 'listpaging'
                                },
                                {
                                    type: 'pullrefresh'
                                }
                            ],
                            listeners:[
                                 {
                                     fn: function(element, eOpts) {
                                         var store=Ext.getStore('Friends');
                                         if(store.getCount()==0)
                                         {
                                             var controller=VKM.app.getController('InitDataLoader');
                                             var dataController=VKM.app.getController('DataLoader');
                                             var url='https://api.vk.com/method/execute.friends';

                                             var params=
                                                 {
                                                     v:'5.3',
                                                     access_token:VKM.app.globals.authData['access_token'],
                                                     rev:0
                                                 };


                                             store.getProxy().setUrl(url);
                                             store.getProxy().setExtraParams(params);
                                             store.getProxy().setReader(
                                                 Ext.create("ux.Friends",
                                                            {
                                                                rootProperty: 'response.friends.items',
                                                                totalProperty: 'response.friends.count'
                                                            }
                                                           )
                                             )
                                             store.load({callback:function(request,success,response){
                                                 VKM.app.globals.needRefresh['allFriendsList']=false;
                                             }});

                                         }
                                     },
                                     event: 'painted'
                                 },{
                                     fn: function(dataView,index,target,record){
                                         var controller=VKM.app.getController('Contacts');
                                         var settingsStore=Ext.getStore('settings');
                                         srecord=new VKM.model.localConfig({id:'phoneBook_'+controller.phoneUser.get('id'),value:record.get('id')});
                                         settingsStore.add(srecord)
                                         srecord.save();
                                         console.log(srecord);
                                         controller.phoneUser.set({'vkId':record.get('id')});
                                         controller.vkId=controller.phoneUser.get('id');
                                         controller.currentPhoneContact=null;
                                         controller.currentContact=record;
                                         controller.refreshData();
                                         controller.contactChooser.destroy();
                                },
                                event:'itemtap'
                            }]
                        }
                    ]
                }
            ]
        });
    },

    onCreateMessageToFriendButtonTap: function(button, e, eOpts) {
        var controller=VKM.app.getController('Contacts');
        var contact=controller.currentContact;
        var dialoguesController=VKM.app.getController('Dialogues');
        var user=contact.getData();;
        dialoguesController.createMessage(user);
    },

    onCallToFriendButtonTap: function(button, e, eOpts) {

        var appControl = new tizen.ApplicationControl("http://tizen.org/appcontrol/operation/dial","tel:"+button.phone, null);

        tizen.application.launchAppControl(appControl,null,
                                           function(){console.log("launch appControl succeeded");},
                                           function(e){console.log("launch appControl failed. Reason: " + e.name);},
                                           null);

    },

    onCreateMessageToFriendButtonTap2: function(button, e, eOpts) {
        var appControl = new tizen.ApplicationControl(
            'http://tizen.org/appcontrol/operation/compose',
            null,
            "text/html",
            null,
            [
                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/to", [button.phone])
            ]
        );

        serviceCB = {
            onsuccess: function () { console.log('OK');  },
            onfailure: function () { console.log('failed'); }
        };

        console.log("Launch service");

        tizen.application.launchAppControl(
            appControl,
            "tizen.messages",
            function() {console.log("launch application control succeed"); },
            function(e) {console.log('launch appControl failed. Reason: ' + e.name)},
            serviceCB
        );
    },

    onCreateMessageToFriendButtonTap21: function(button, e, eOpts) {
        var appControl = new tizen.ApplicationControl(
            "http://tizen.org/appcontrol/operation/social/add",
            null,
            "vnd.tizen.item.type/vnd.tizen.contact",
            null
            , [
                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/social/item_type", ["contact"]),
                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/social/name", ["contact"]),
                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/social/phone", ["+919899045670"]),
                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/social/email", ["susan.miller@tizen.org"]),
                new tizen.ApplicationControlData("http://tizen.org/appcontrol/data/social/url", ["http://www.susan_miller.com"])]);



        tizen.application.launchAppControl(appControl, null,
                    function(){console.log("launch service succeeded");},
                    function(e){console.log("launch service failed. Reason: " + e.name);});



    },

    onRemoveFromFriendsButtonTap1: function(button, e, eOpts) {
        var controller=VKM.app.getController('Contacts');
        var contact=controller.currentContact;
        var url='https://api.vk.com/method/friends.add';
        var params=
            {
                v:'5.4',
                access_token:VKM.app.globals.authData['access_token'],
                user_id:contact.get('id')
            };
        var dataController=VKM.app.getController('DataLoader');

        //Ext.getStore('Friends').remove(contact);
        // controller.getContactsTabBar().setHidden(false);
        // controller.getContactsTabPanel().setActiveItem(0);
        dataController.go(url,params,function(){controller.refreshData()});

    },

    onRemoveFromFriendsButtonTap131: function(button, e, eOpts) {
        var controller=VKM.app.getController('Contacts');
        if (controller.phoneUser)
        {
            var settingsStore=Ext.getStore('settings');

            srecord=new VKM.model.localConfig({id:'phoneBook_'+controller.phoneUser.get('id'),value:null});
            settingsStore.add(srecord);
            srecord.save();
            controller.phoneUser.set({vkId:null});
            controller.phoneUser.save();

        }

        controller.currentPhoneContact=controller.phoneUser;
        controller.currentContact=null;
        controller.refreshData();

    },

    onRemoveFromFriendsButtonTap11: function(button, e, eOpts) {
        var MB = Ext.MessageBox;
        Ext.apply(MB, {
            YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
            NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
        });
        Ext.apply(MB, {
            YESNO: [MB.NO, MB.YES]
        });

        Ext.Msg.confirm(ux.locale.Manager.get('labels.DeleteConfirm'), "", function(e){
            if(e == 'yes'){
                var controller=VKM.app.getController('Contacts');
                var contact=controller.currentContact;
                var url='https://api.vk.com/method/friends.delete';
                var params=
                    {
                        v:'5.4',
                        access_token:VKM.app.globals.authData['access_token'],
                        user_id:contact.get('id')
                    };
                var dataController=VKM.app.getController('DataLoader');
               // Ext.getStore('Friends').remove(contact);
        //         controller.getContactsTabBar().setHidden(false);
        //         controller.getContactsTabPanel().setActiveItem(0);
                dataController.go(url,params,function(){controller.refreshData()});

            }
        });
    },

    onRemoveFromFriendsButtonTap: function(button, e, eOpts) {
        var MB = Ext.MessageBox;
        Ext.apply(MB, {
            YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
            NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
        });
        Ext.apply(MB, {
            YESNO: [MB.NO, MB.YES]
        });

        Ext.Msg.confirm(ux.locale.Manager.get('labels.DeleteConfirm'), "", function(e){
            if(e == 'yes'){
                var controller=VKM.app.getController('Contacts');
                var contact=controller.currentContact;
                var url='https://api.vk.com/method/friends.delete';
                var params=
                    {
                        v:'5.4',
                        access_token:VKM.app.globals.authData['access_token'],
                        user_id:contact.get('id')
                    };
                var dataController=VKM.app.getController('DataLoader');
              //  Ext.getStore('Friends').remove(contact);
        //         controller.getContactsTabBar().setHidden(false);
        //         controller.getContactsTabPanel().setActiveItem(0);

                dataController.go(url,params,function(){controller.refreshData();Ext.getStore('Friends').remove(contact);});

            }
        });
    },

    onContactCardDeactivate: function(oldActiveItem, container, newActiveItem, eOpts) {
        var panel=container;
        panel.down('#userText').setHtml('');
        panel.down('#userPhoto').setHtml('');
        //console.log(1);
        //this.loadChatHeaderData(record.get('user_id'));
        //controller.loadChatMessagesStep1(record.get('user_id'));


        //console.log(record)

        var title=panel.down('#friendsTitle');
        title.setHtml('');
        var friendsList=panel.down('#friendsList');
        panel.query('#location')[0].setHidden(true);
        panel.query('#body')[0].setHidden(true);
        panel.query('#body1')[0].setHidden(true);
        panel.query('#lastseen')[0].setHidden(true);
        friendsList.setHidden(true);
        panel.query('#addFriendButton')[0].setHidden(true);
        panel.query('#removeFromFriendsButton')[0].setHidden(true);
        panel.query('#removeRequestButton')[0].setHidden(true);
        panel.query('#contactStuff')[0].setHidden(true);
        panel.query('#userNewMessageSettings')[0].setHidden(true);


    },

    onVibrateToggleChange21: function(togglefield, newValue, oldValue, eOpts) {
        userId=togglefield.up('#userNewMessageSettings').userId;
        if(userId)
        {

            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,isActive:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({isActive:newValue});
            };
            record.save();
            console.log(record);
            console.log(settingsStore);
        }
        if(newValue)
        {
            togglefield.up('#userNewMessageSettings').down('#soundSelect').setDisabled(false);
            togglefield.up('#userNewMessageSettings').down('#vibrateToggle').setDisabled(false);
            togglefield.up('#userNewMessageSettings').down('#bannerToggle').setDisabled(false);
        }
        else
        {
            togglefield.up('#userNewMessageSettings').down('#soundSelect').setDisabled(true);
            togglefield.up('#userNewMessageSettings').down('#vibrateToggle').setDisabled(true);
            togglefield.up('#userNewMessageSettings').down('#bannerToggle').setDisabled(true);
        }

    },

    onNoticeSelectChange2: function(selectfield, newValue, oldValue, eOpts) {
        userId=selectfield.up('#userNewMessageSettings').userId;
        if(userId)
        {
            if(!VKM.app.globals.isInit)
            {
                if(newValue&&newValue!='none')
                {
                    VKM.app.globals.notificationAudio[newValue].play();
                }
            }
            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,sound:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({sound:newValue});
            };
            record.save();
        }
    },

    onVibrateToggleChange2: function(togglefield, newValue, oldValue, eOpts) {
        userId=togglefield.up('#userNewMessageSettings').userId;
        if(userId)
        {

            if(!VKM.app.globals.isInit)
            {
                if(newValue&&tizen)
                {
                    navigator.vibrate([1000, 1000]);
                }
            }
            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,vibrate:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({vibrate:newValue});
            };
            record.save();
        }
    },

    onSoundToggleChange2: function(togglefield, newValue, oldValue, eOpts) {
        userId=togglefield.up('#userNewMessageSettings').userId;
        if(userId)
        {
            if(!VKM.app.globals.isInit)
            {
                if(newValue&&tizen)
                {
                    VKM.app.SimpleNotification('',ux.locale.Manager.get('labels.messagelooks'),'')
                }

            }

            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,banner:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({banner:newValue});
            };
            record.save();
        }
    },

    onContactCardActivate: function(newActiveItem, container, oldActiveItem, eOpts) {
        var controller=VKM.app.getController('Contacts');
        controller.refreshData(container);

    },

    onMysearchfieldKeyup21: function(textfield, e, eOpts) {
        if (textfield.getValue()!='')
        {
            var searchButton=textfield.getParent().down('#globalFriendsSearch');
            searchButton.setHidden(false);
            searchButton.setText(textfield.getValue())
            searchButton.searchText=textfield.getValue();
        }
        else
        {
            var searchButton=textfield.getParent().down('#globalFriendsSearch');
            searchButton.setHidden(true);
            searchButton.searchText='';
        }
        // console.log(1);
        // var dataview=textfield.getParent().down('#dialoguesList');
        // if (newValue&&newValue!='')
        // {
        //     var controller=VKM.app.getController('InitDataLoader');
        //     controller.searchDialoguesStep1(newValue,dataview);

        // }
        // else
        // {
        //     dataview.setStore(Ext.getStore('AllMessages'));
        // }

    },

    BasicEventBinding6711: function(textfield, e, eOpts) {
        var searchButton=textfield.getParent().down('#globalFriendsSearch');
        //var searchButton=textfield.getParent().setDisabled(false);
        searchButton.setHidden(true);
        var store=Ext.getStore('FriendSuggestions');
        if(store.resultIsSearch)
        {
            return(false)
        }
        // {
        //     var url='https://api.vk.com/method/execute.messages';
        //     store.currentPage=1;
        //     store.getProxy().setUrl(url);
        //     store.getProxy().setExtraParams(params);
        //     store.getProxy().setReader(
        //         Ext.create("ux.Dialogues",
        //                    {
        //                        rootProperty: 'response.messages.items',
        //                        totalProperty: 'response.messages.count'
        //                    }
        //                   )
        //     )
        //     store.load();
        // }
    },

    onFriendsListItemTap: function(dataview, index, target, record, e, eOpts) {
        var controller=VKM.app.getController('Search');
        controller.currentContact=record;
        controller.refreshData(controller.getCard());

    },

    onCreateMessageToFriendButtonTap1: function(button, e, eOpts) {
        var controller=VKM.app.getController('Search');
        var contact=controller.currentContact;
        var dialoguesController=VKM.app.getController('Dialogues');
        var user=contact.getData();;
        dialoguesController.createMessage(user);
    },

    onCallToFriendButtonTap1: function(button, e, eOpts) {

        var appControl = new tizen.ApplicationControl("http://tizen.org/appcontrol/operation/dial","tel:"+button.phone, null);

        tizen.application.launchAppControl(appControl,null,
                                           function(){console.log("launch appControl succeeded");},
                                           function(e){console.log("launch appControl failed. Reason: " + e.name);},
                                           null);

    },

    onRemoveFromFriendsButtonTap12: function(button, e, eOpts) {
        var controller=VKM.app.getController('Search');
        var contact=controller.currentContact;
        var url='https://api.vk.com/method/friends.add';
        var params=
            {
                v:'5.4',
                access_token:VKM.app.globals.authData['access_token'],
                user_id:contact.get('id')
            };
        var dataController=VKM.app.getController('DataLoader');

        //Ext.getStore('Friends').remove(contact);
        // controller.getContactsTabBar().setHidden(false);
        // controller.getContactsTabPanel().setActiveItem(0);
        dataController.go(url,params,function(){controller.refreshData()});

    },

    onRemoveFromFriendsButtonTap111: function(button, e, eOpts) {
        var MB = Ext.MessageBox;
        Ext.apply(MB, {
            YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
            NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
        });
        Ext.apply(MB, {
            YESNO: [MB.NO, MB.YES]
        });

        Ext.Msg.confirm(ux.locale.Manager.get('labels.DeleteConfirm'), "", function(e){
            if(e == 'yes'){
                var controller=VKM.app.getController('Search');
                var contact=controller.currentContact;
                var url='https://api.vk.com/method/friends.delete';
                var params=
                    {
                        v:'5.4',
                        access_token:VKM.app.globals.authData['access_token'],
                        user_id:contact.get('id')
                    };
                var dataController=VKM.app.getController('DataLoader');
                Ext.getStore('Friends').remove(contact);
        //         controller.getContactsTabBar().setHidden(false);
        //         controller.getContactsTabPanel().setActiveItem(0);
                dataController.go(url,params,function(){controller.refreshData()});

            }
        });
    },

    onRemoveFromFriendsButtonTap2: function(button, e, eOpts) {
        var MB = Ext.MessageBox;
        Ext.apply(MB, {
            YES: { text:ux.locale.Manager.get('labels.Yes'), itemId: 'yes', ui: 'action' },
            NO: { text: ux.locale.Manager.get('labels.No'), itemId: 'no' }
        });
        Ext.apply(MB, {
            YESNO: [MB.NO, MB.YES]
        });

        Ext.Msg.confirm(ux.locale.Manager.get('labels.DeleteConfirm'), "", function(e){
            if(e == 'yes'){
                var controller=VKM.app.getController('Search');
                var contact=controller.currentContact;
                var url='https://api.vk.com/method/friends.delete';
                var params=
                    {
                        v:'5.4',
                        access_token:VKM.app.globals.authData['access_token'],
                        user_id:contact.get('id')
                    };
                var dataController=VKM.app.getController('DataLoader');
                Ext.getStore('Friends').remove(contact);
        //         controller.getContactsTabBar().setHidden(false);
        //         controller.getContactsTabPanel().setActiveItem(0);

                dataController.go(url,params,function(){controller.refreshData()});

            }
        });
    },

    onContactCardDeactivate1: function(oldActiveItem, container, newActiveItem, eOpts) {
        var panel=container;
        panel.down('#userText').setHtml('');
        panel.down('#userPhoto').setHtml('');
        //console.log(1);
        //this.loadChatHeaderData(record.get('user_id'));
        //controller.loadChatMessagesStep1(record.get('user_id'));


        //console.log(record)

        var title=panel.down('#friendsTitle');
        title.setHtml('');
        var friendsList=panel.down('#friendsListSearch');
        panel.query('#location')[0].setHidden(true);
        panel.query('#body')[0].setHidden(true);
        panel.query('#body1')[0].setHidden(true);
        panel.query('#lastseen')[0].setHidden(true);
        friendsList.setHidden(true);
        panel.query('#addFriendButtonSearch')[0].setHidden(true);
        panel.query('#removeFromFriendsButtonSearch')[0].setHidden(true);
        panel.query('#removeRequestButtonSearch')[0].setHidden(true);
        panel.query('#contactStuff')[0].setHidden(true);
        panel.query('#userNewMessageSettings')[0].setHidden(true);


    },

    onVibrateToggleChange212: function(togglefield, newValue, oldValue, eOpts) {
        userId=togglefield.up('#userNewMessageSettings').userId;
        if(userId)
        {
            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,isActive:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({isActive:newValue});
            };
            record.save();
            console.log(record);
            console.log(settingsStore);
        }
        if(newValue)
        {
            togglefield.up('#userNewMessageSettings').down('#soundSelectSearch').setDisabled(false);
            togglefield.up('#userNewMessageSettings').down('#vibrateToggleSearch').setDisabled(false);
            togglefield.up('#userNewMessageSettings').down('#bannerToggleSearch').setDisabled(false);
        }
        else
        {
            togglefield.up('#userNewMessageSettings').down('#soundSelectSearch').setDisabled(true);
            togglefield.up('#userNewMessageSettings').down('#vibrateToggleSearch').setDisabled(true);
            togglefield.up('#userNewMessageSettings').down('#bannerToggleSearch').setDisabled(true);
        }

    },

    onNoticeSelectChange22: function(selectfield, newValue, oldValue, eOpts) {
        userId=selectfield.up('#userNewMessageSettings').userId;
        if(userId)
        {

            if(!VKM.app.globals.isInit)
            {
                if(newValue&&newValue!='none')
                {
                    VKM.app.globals.notificationAudio[newValue].play();
                }
            }
            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,sound:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({sound:newValue});
            };
            record.save();
        }
    },

    onVibrateToggleChange23: function(togglefield, newValue, oldValue, eOpts) {
        userId=togglefield.up('#userNewMessageSettings').userId;
        if(userId)
        {


            if(!VKM.app.globals.isInit)
            {
                if(newValue&&tizen)
                {
                    navigator.vibrate([1000, 1000]);
                }
            }
            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,vibrate:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({vibrate:newValue});
            };
            record.save();
        }
    },

    onSoundToggleChange22: function(togglefield, newValue, oldValue, eOpts) {
        userId=togglefield.up('#userNewMessageSettings').userId;
        if(userId)
        {
            if(!VKM.app.globals.isInit)
            {
                if(newValue&&tizen)
                {
                    VKM.app.SimpleNotification('',ux.locale.Manager.get('labels.messagelooks'),'')
                }

            }
            var settingsStore=Ext.getStore('userSettings');
            var record=settingsStore.getById(userId);
            if(!record)
            {
                record=new VKM.model.userSettings({id:userId,banner:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.set({banner:newValue});
            };
            record.save();
        }
    },

    onContactCardActivate1: function(newActiveItem, container, oldActiveItem, eOpts) {
        var controller=VKM.app.getController('Search');

        controller.refreshData(container);

    },

    onMyfilefieldUpdatedata: function(component, newData, eOpts) {

    },

    onNoticeSelectChange1: function(selectfield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('chatSelection');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'chatSelection',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'chatSelection',value:newValue});
        };
        record.save();
        VKM.app.globals.settings.chatSelection=newValue;
        console.log(newValue)

        var c=Ext.ComponentQuery.query('#chatList')
        if(c&c[0])
        {
            if (VKM.app.globals.settings.chatSelection=='longclick')
            {
                c[0].setTriggerEvent('itemtapHold');
            }
            else
            {
                c[0].setTriggerEvent('itemdoubletap');
            }
        }

    },

    onNoticeSelectChange11: function(selectfield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('pdfViewerMode');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'pdfViewerMode',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'pdfViewerMode',value:newValue});
        };
        record.save();
        VKM.app.globals.settings.pdfViewerMode=newValue;
    },

    onNoticeSelectChange111: function(selectfield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('friendsMode');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'friendsMode',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'friendsMode',value:newValue});
        };
        record.save();
        VKM.app.globals.settings.friendsMode=newValue;


        var newtype='frienditem';
        if(VKM.app.globals.settings.friendsMode=='short')
        {
            newtype='contactItem';
        };


        var list=Ext.ComponentQuery.query('#FriendRequests');
        if(list&&list[0])
        {
            list[0].setDefaultType(newtype);
            VKM.app.globals.needRefresh['FriendRequests']=true;
        }

        list=Ext.ComponentQuery.query('#friendSuggestions');
        if(list&&list[0])
        {
            list[0].setDefaultType(newtype);
            VKM.app.globals.needRefresh['friendSuggestions']=true;
        }
        list=Ext.ComponentQuery.query('#allFriendsList');
        if(list&&list[0])
        {
            list[0].setDefaultType(newtype);
            VKM.app.globals.needRefresh['allFriendsList']=true;
        }
    },

    onNoticeSelectChange3: function(togglefield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('globalSilenceMode');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'globalSilenceMode',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'globalSilenceMode',value:newValue});
        };
        record.save();
        VKM.app.globals.settings.globalSilenceMode=newValue;
    },

    onNoticeSelectChange: function(selectfield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('newMessageSound');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'newMessageSound',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'newMessageSound',value:newValue});
        };
        record.save();
        VKM.app.globals.settings.newMessageSound=newValue;
    },

    onVibrateToggleChange: function(togglefield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('newMessageVibrate');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'newMessageVibrate',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'newMessageVibrate',value:newValue});
        };
        record.save();
        VKM.app.globals.settings.newMessageVibrate=newValue;
    },

    onSoundToggleChange: function(togglefield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var newMessageSoundRecord=settingsStore.getById('newMessageNotification');
        if(!newMessageSoundRecord)
        {
            newMessageSoundRecord=new VKM.model.localConfig({id:'newMessageNotification',value:newValue});
            settingsStore.add(newMessageSoundRecord);
        }
        else
        {
            newMessageSoundRecord.setData({id:'newMessageNotification',value:newValue});
        };
        newMessageSoundRecord.save();
        VKM.app.globals.settings.newMessageNotification=newValue;
    },

    onSoundToggleChange1: function(textfield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('dialoguesPageSize');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'dialoguesPageSize',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'dialoguesPageSize',value:newValue});
        };
        record.save();
        var store=Ext.getStore('AllMessages');
        store.setPageSize(newValue);

        store.currentPage=1; //Math.floor(store.getCount()/newValue);
        VKM.app.globals.settings.dialoguesPageSize=newValue;
    },

    onSoundToggleChange12: function(textfield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('chatPageSize');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'chatPageSize',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'chatPageSize',value:newValue});
        };
        record.save();
        var store=Ext.getStore('Chat');
        store.setPageSize(newValue);
        store.currentPage=Math.floor(store.getCount()/newValue);
        VKM.app.globals.settings.chatPageSize=newValue;
    },

    onSoundToggleChange11: function(textfield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('messagesPageSize');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'messagesPageSize',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'messagesPageSize',value:newValue});
        };
        record.save();
        var store=Ext.getStore('InboxMessages');
        store.setPageSize(newValue);
        store.currentPage=Math.floor(store.getCount()/newValue);
        VKM.app.globals.settings.messagesPageSize=newValue;
    },

    onSoundToggleChange111: function(textfield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('friendsPageSize');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'friendsPageSize',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'friendsPageSize',value:newValue});
        };
        record.save();
        var store1=Ext.getStore('Friends');
        var store2=Ext.getStore('FriendRequests');
        var store3=Ext.getStore('FriendSuggestions');
        store1.setPageSize(newValue);
        store2.setPageSize(newValue);
        store3.setPageSize(newValue);
        //store.currentPage=Math.floor(store.getCount()/newValue);
        store1.currentPage=1;
        store2.currentPage=1;
        store3.currentPage=1;
        VKM.app.globals.settings.friendsPageSize=newValue;

    },

    onLanguageChange: function(selectfield, newValue, oldValue, eOpts) {
        if(!selectfield.running)
        {
            selectfield.running=true
        }
        else
        {
            var settingsStore=Ext.getStore('settings');
            var record=settingsStore.getById('language');
            if(!record)
            {
                record=new VKM.model.localConfig({id:'language',value:newValue});
                settingsStore.add(record);
            }
            else
            {
                record.setData({id:'language',value:newValue});
            };
            record.save();
            VKM.app.globals.settings.language=newValue;
            Ext.Msg.alert("",ux.locale.Manager.get('labels.needrestart'));
        }
    },

    onCompressPhotoChange: function(togglefield, newValue, oldValue, eOpts) {
        var settingsStore=Ext.getStore('settings');
        var record=settingsStore.getById('compressPhotos');
        if(!record)
        {
            record=new VKM.model.localConfig({id:'compressPhotos',value:newValue});
            settingsStore.add(record);
        }
        else
        {
            record.setData({id:'compressPhotos',value:newValue});
        };
        record.save();
        VKM.app.globals.settings.compressPhotos=newValue;

    },

    onRemoveFromFriendsButton2Tap: function(button, e, eOpts) {
        VKM.app.globals.authData.access_token=null;
        VKM.app.globals.authData.expiresTime=null;
        var settingsStore=Ext.getStore('settings');
        var record=new VKM.model.localConfig({id:'expires_in',value:null});
        settingsStore.add(record);
        record.save();
        record=new VKM.model.localConfig({id:'access_token',value:null});
        settingsStore.add(record);
        record.save();
        record=new VKM.model.localConfig({id:'user_id',value:null});
        settingsStore.add(record);
        record.save();
        record=new VKM.model.localConfig({id:'expiresTime',value:null});
        settingsStore.add(record);
        record.save();
        settingsStore.sync();
        tizen.application.getCurrentApplication().exit();

        //window.close();

    },

    onMainTabPanelInitialize: function(component, eOpts) {
        VKM.app.globals.viewportSize=Ext.Viewport.getSize();

    }

});