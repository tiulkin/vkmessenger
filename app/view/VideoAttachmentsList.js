/*
 * File: app/view/VideoAttachmentsList.js
 *
 * This file was generated by Sencha Architect version 3.0.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('VKM.view.VideoAttachmentsList', {
    extend: 'Ext.dataview.component.DataItem',
    alias: 'widget.videoattachmentslist',

    requires: [
        'Ext.Spacer',
        'Ext.Container',
        'Ext.field.Checkbox'
    ],

    config: {
        padding: '5 10 10 10',
        itemCls: 'x-list-item',
        layout: {
            type: 'hbox',
            align: 'start',
            pack: 'end'
        },
        items: [
            {
                xtype: 'spacer',
                hidden: true,
                itemId: 'right'
            },
            {
                xtype: 'container',
                itemId: 'body',
                maxWidth: 275,
                layout: 'hbox'
            },
            {
                xtype: 'spacer',
                itemId: 'left'
            },
            {
                xtype: 'checkboxfield',
                docked: 'left',
                itemId: 'isSelected',
                inputCls: 'narrowCheckBox '
            },
            {
                xtype: 'container',
                hidden: true,
                margin: 0,
                layout: 'hbox',
                items: [
                    {
                        xtype: 'component',
                        flex: 1,
                        cls: 'name',
                        html: 'Sample component inside dataitem',
                        itemId: 'name'
                    }
                ]
            }
        ],
        listeners: [
            {
                fn: 'onIsSelectedChange',
                event: 'change',
                delegate: '#isSelected'
            }
        ]
    },

    onIsSelectedChange: function(checkboxfield, newValue, oldValue, eOpts) {

    },

    updateRecord: function(record) {
        if (record)
        {
            var body=this.down('#body');
            this.down('#body').removeAll(true,true);
            if (record.get('chat_id')&&(record.get('out')!='1'))
            {
                this.down('#avatarContainer').setHidden(false);
                this.down('#avatar0').setHidden(false);
                var member=Ext.getStore('Users').getById(record.get('from_id'));
                this.down('#avatar0').setSrc(member.get('photo_50'));

            }
            else
            {
                this.down('#avatarContainer').setHidden(true);
                this.down('#avatar0').setHidden(true);
            }

            //console.log(record);
            //this.down('#name').setHtml(Ext.String.ellipsis(user.get('first_name')+' '+user.get('last_name'),23));
            var date=new Date(record.get('date')*1000);
            var currentDate=new Date(Ext.DateExtras.now());
            var messageDate=date;
            var messageBody=record.get('body');
            var messageTime=moment(date).format('d:mm');
            var messageDate=moment(date).format('D MMMM');
            var store=Ext.getStore('Chat')
            if (store.previousDate)
            {
                if (messageDate!=Ext.getStore('Chat').previousDate)
                {
                    this.down('#messageDate').setHidden(false);
                    this.down('#messageDate').setHtml(messageDate);
                    store.previousDate=messageDate;
                }
                else
                {
                    this.down('#messageDate').setHidden(true);
                }
            }
            else
            {
                this.down('#messageDate').setHidden(false);
                this.down('#messageDate').setHtml(messageDate);
                store.previousDate=messageDate;
            }


            messageBody= messageBody.replace(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi,"<a href='$1' target='_blank' style='color:white!important'>$1</a>");
            if(record.get('emoji'))
            {
                messageBody=VKM.app.smiles(messageBody);
                messageBody='<div>'+messageBody+'</div>';

            }
            messageBody=messageBody.replace(/\r\n|\r|\n/g,"<br />");


            //console.log(record.getData());
            if (record.get('out')==1)
            {
                this.down('#left').setHidden(true);
                this.down('#right').setHidden(false);

                this.down('#timeright').setHidden(true);
                this.down('#timeleft').setHidden(false);
                this.down('#timeleft').setHtml(messageTime);


                //this.down('#datetime').setHtml(moment(messageDate).fromNow());
                body.removeCls('triangle-right left');
                body.addCls('triangle-right right');
                body.add({
                    xtype: 'component',
                    docked:'top',
                    cls: 'x-item-message',
                    html:messageBody
                })
            }
            else
            {
                this.down('#right').setHidden(true);
                this.down('#left').setHidden(false);
                this.down('#timeleft').setHidden(true);
                this.down('#timeright').setHidden(false);
                this.down('#timeright').setHtml(messageTime);

                body.removeCls('triangle-right right');
                body.addCls('triangle-right left');
                body.add({
                    xtype: 'component',
                    docked:'top',
                    cls: 'x-item-message',
                    html:messageBody
                })
            }    ;

            var params=
                {
                    message:record.getData(),
                    body:body,
                    component:this
                };
            this.renderMessage(params);


        }
    },

    renderMessage: function(params) {
        var record=params.message;
        var body=params.body;
        var component=params.component;
        if(record.geo)
        {
            var latitude=record.geo.coordinates.split(' ')[0];
            var longitude=record.geo.coordinates.split(' ')[1];

            var position = new google.maps.LatLng(latitude,longitude)

            var image = new google.maps.MarkerImage(
                'resources/images/point.png',
                new google.maps.Size(32, 31),
                new google.maps.Point(0, 0),
                new google.maps.Point(16, 31)
            )

            var shadow = new google.maps.MarkerImage(
                'resources/images/shadow.png',
                new google.maps.Size(64, 52),
                new google.maps.Point(0, 0),
                new google.maps.Point(-5, 42)
            )


            body.add({
                xtype: 'map',
                position:position,
                title:record.geo.place.title,
                docked: 'top',
                height: 200,
                width: 260,
                margin: 2,
                mapOptions:{
                    zoom: 15,
                    center : position,
                    zoomControl: true,
                    scaleControl: true,
                },
                listeners: {
                    maprender: function(comp, map) {

                        var marker = new google.maps.Marker({
                            position: comp.config.position,
                            title : comp.config.title,
                            map: map
                        });
                        var infowindow = new google.maps.InfoWindow({
                            content: '<div id="content">'+comp.config.title+'<div id="content">'
                        });

                        google.maps.event.addListener(marker, 'click', function() {
                            infowindow.open(map, marker);
                        });
                    }

                }
            });

        }

        if(record.attachments)
        {
            var attachments=record.attachments
            for (var i=0;i<attachments.length;i++)
            {
                if (attachments[i].type=='photo')
                {
                    var description=attachments[i].photo.text;
                    description=description.replace(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi,"<a href='$1' target='_blank' style='color:white!important'>$1</a>");
                    description=description.replace(/\r\n|\r|\n/g,"<br />");

                    body.add({
                        xtype: 'component',
                        docked: 'top',
                        html:'<img width=100% src='+attachments[i].photo.photo_604+'></img>',
                        width: 260
                        //margin: 2
                    });
                    //                 this.down('#body').add({
                    //                     xtype: 'component',
                    //                     docked: 'top',
                    //                     html:description,
                    //                     style:{"font-size":"0.8em","font-weight": "light"},
                    //                     margin: 2
                    //                 });
                    //            console.log(record.getData());
                }
                if (attachments[i].type=='doc')
                {
                    body.add({
                        xtype: 'component',
                        docked: 'top',
                        html:'<span class="whiteDocumentIconCls"></span><a href='+attachments[i].doc.url+' style="color:white!important;font-size:0.8em;font-weight:light">'+attachments[i].doc.title+'</a>',
                        margin: 2
                    });
                    //            console.log(record.getData());
                }
                if (attachments[i].type=='audio')
                {

                    body.add({
                        xtype:'container',
                        width:260,
                        docked:'bottom',
                        //margin:5,
                        items:[

                            Ext.create('ux.AudioPlayer',{
                                xtype: 'audioplayer',
                                docked:'top',
                                //                            width:250,
                                //                             height:40,
                                duration:attachments[i].audio.duration,
                                url  : attachments[i].audio.url,
                                title:attachments[i].audio.artist+', '+attachments[i].audio.title
                            })

                            //                         {
                            //                             xtype:'component',
                            //                             docked:'top',
                            //                             html:attachments[i].audio.artist+', '+attachments[i].audio.title,
                            //                             style:{"font-size":"0.8em","font-weight": "light","margin-bottom":"0.5em"}

                        ]
                    });

                }
                if (attachments[i].type=='video')
                {
                    var description=attachments[i].video.description;
                    description=description.replace(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi,"<a href='$1' target='_blank' style='color:white!important'>$1</a>");
                    description=description.replace(/\r\n|\r|\n/g,"<br />");
                    var id=attachments[i].video.owner_id+'_'+attachments[i].video.id
                    var access_key=attachments[i].video.access_key;
                    if (access_key)
                    {
                        id=id+'_'+access_key;
                    }
                    var date=new Date(attachments[i].video.date);
                    var comments=attachments[i].video.comments;
                    var views=attachments[i].video.views
                    var videoContainer=body.add({
                        xtype:'container',
                        docked:'bottom',
                        //margin:5,
                        items:[
                            {
                                xtype:'component',
                                docked:'top',
                                html:'<div class="whiteVideoIconCls">'+attachments[i].video.title+'</div>',
                                style:{"font-size":"0.8em","font-weight": "light","margin-bottom":"0.5em"}
                            },
                            {
                                html:'<a type="video"><img width=100% src='+attachments[i].video.photo_320+'></img></a>',
                                width: 260,
                                xtype: 'component',
                                docked: 'top'
                                //html:'<a type="video" href=http://vk.com/video_ext.php?oid=63709057&id=164774633&hash=9a9aa1d37dc57f8d>fff</a>'
                            }
                            //                         {
                            //                             xtype:'component',
                            //                             docked:'top',
                            //                             html:description,
                            //                             style:{"font-size":"0.8em","font-weight": "light","margin-bottom":"0.5em"}
                            //                         }
                        ]
                    });
                    if (!attachments[i].video.player)
                    {
                        var dataController=VKM.app.getController('DataLoader');

                        videoContainer.callback=function(response,messages)
                        {



                        };
                        var url='https://api.vk.com/method/video.get';
                        var params=
                            {
                                v:'5.3',
                                videos:id,
                                access_token:VKM.app.globals.authData['access_token'],
                                access_key:access_key
                            };
                        dataController.go(url,params,videoContainer.callback);
                    }

                }

                //doc.title
                //doc.url
                //doc.ext
            }
        };
        if(record.fwd_messages)
        {
            var fwdMessages=body.add(
                {
                    xtype: 'container',
                    layout: {
                        align: 'start',
                        type: 'vbox'
                    },
                    style: {'border-left':'3px dotted white',"padding-left":"5px","padding-top":"5px"},
                }
            )

            for (var i=0;i<record.fwd_messages.length;i++)
            {
                var message=record.fwd_messages[i];
                console.log(message);
                var mdate=new Date(message.date);
                var member=Ext.getStore('Users').getById(message['user_id']);
                fwdMessages.add(
                    {
                        xtype: 'container',
                        cls: 'multiChat',
                        style: {
                            "margin-left":"5px"
                        },
                        layout: {
                            align: 'start',
                            type: 'vbox'
                        },
                        items: [
                            {
                                xtype: 'image',
                                docked: 'left',
                                itemId: 'avatar0',
                                margin: 2,
                                style: 'style="border-radius: 50% 50% 50% 50%"',
                                width: 30,
                                src:member.get('photo_50')
                            },
                            {
                                xtype: 'component',
                                cls: 'x-item-name',
                                html: member.get('first_name')+' '+member.get('last_name')
                            },
                            {
                                xtype: 'component',
                                cls: 'x-item-time',
                                html: moment(mdate).format('D MMMM d:mm')
                            }
                        ]
                    });

                var messageBody=message.body;
                messageBody= messageBody.replace(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi,"<a href='$1' target='_blank' style='color:white!important'>$1</a>");
                messageBody=VKM.app.smiles(messageBody);
                messageBody='<div>'+messageBody+'</div>';


                messageBody=messageBody.replace(/\r\n|\r|\n/g,"<br />");
                var text=fwdMessages.add({
                    xtype: 'component',
                    cls: 'x-item-body',
                    style:{"margin-bottom":"5px"},
                    html:messageBody
                })


                var newBody=fwdMessages.add({
                    xtype: 'container',
                    cls: 'x-item-body',
                    style:{"margin-bottom":"5px"}
                })
                var params={
                    message:message,
                    body:newBody,
                    component:component
                };
                component.renderMessage(params);
            }
        }


    }

});